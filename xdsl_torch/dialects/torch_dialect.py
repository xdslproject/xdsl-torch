###
# This dialect is automatically generated by xdsl_torch/tools/gen_torch_dialect.py
# Please don't edit it manually!
###

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *
from xdsl.traits import *

# ruff: noqa: F403, F405


@irdl_op_definition
class Torch_AtenAbsOp(IRDLOperation):
    name = "torch.aten.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbs_Op(IRDLOperation):
    name = "torch.aten.abs_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsoluteOp(IRDLOperation):
    name = "torch.aten.absolute"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsolute_Op(IRDLOperation):
    name = "torch.aten.absolute_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosFloatOp(IRDLOperation):
    name = "torch.aten.acos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosIntOp(IRDLOperation):
    name = "torch.aten.acos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosOp(IRDLOperation):
    name = "torch.aten.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosScalarOp(IRDLOperation):
    name = "torch.aten.acos.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcos_Op(IRDLOperation):
    name = "torch.aten.acos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshFloatOp(IRDLOperation):
    name = "torch.aten.acosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshIntOp(IRDLOperation):
    name = "torch.aten.acosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshOp(IRDLOperation):
    name = "torch.aten.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshScalarOp(IRDLOperation):
    name = "torch.aten.acosh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosh_Op(IRDLOperation):
    name = "torch.aten.acosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveAvgPool1DOp(IRDLOperation):
    name = "torch.aten.adaptive_avg_pool1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveAvgPool2DOp(IRDLOperation):
    name = "torch.aten.adaptive_avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveAvgPool3DOp(IRDLOperation):
    name = "torch.aten.adaptive_avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool1DOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenAddFloatIntOp(IRDLOperation):
    name = "torch.aten.add.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddFloatOp(IRDLOperation):
    name = "torch.aten.add.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntFloatOp(IRDLOperation):
    name = "torch.aten.add.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntOp(IRDLOperation):
    name = "torch.aten.add.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddOp(IRDLOperation):
    name = "torch.aten.add"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddScalarOp(IRDLOperation):
    name = "torch.aten.add.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddScalarOutOp(IRDLOperation):
    name = "torch.aten.add.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha `,` $out attr-dict `:` type($self) `,` type($other) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddTensorOp(IRDLOperation):
    name = "torch.aten.add.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdd_ScalarOp(IRDLOperation):
    name = "torch.aten.add_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdd_TensorOp(IRDLOperation):
    name = "torch.aten.add_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddbmmOp(IRDLOperation):
    name = "torch.aten.addbmm"
    self = operand_def(BaseAttr(TensorType))
    batch1 = operand_def(BaseAttr(TensorType))
    batch2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $batch1 `,` $batch2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($batch1) `,` type($batch2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddbmm_Op(IRDLOperation):
    name = "torch.aten.addbmm_"
    self = operand_def(BaseAttr(TensorType))
    batch1 = operand_def(BaseAttr(TensorType))
    batch2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $batch1 `,` $batch2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($batch1) `,` type($batch2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddcdivOp(IRDLOperation):
    name = "torch.aten.addcdiv"
    self = operand_def(BaseAttr(TensorType))
    tensor1 = operand_def(BaseAttr(TensorType))
    tensor2 = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor1 `,` $tensor2 `,` $value attr-dict `:` type($self) `,` type($tensor1) `,` type($tensor2) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddcdiv_Op(IRDLOperation):
    name = "torch.aten.addcdiv_"
    self = operand_def(BaseAttr(TensorType))
    tensor1 = operand_def(BaseAttr(TensorType))
    tensor2 = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor1 `,` $tensor2 `,` $value attr-dict `:` type($self) `,` type($tensor1) `,` type($tensor2) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddcmulOp(IRDLOperation):
    name = "torch.aten.addcmul"
    self = operand_def(BaseAttr(TensorType))
    tensor1 = operand_def(BaseAttr(TensorType))
    tensor2 = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor1 `,` $tensor2 `,` $value attr-dict `:` type($self) `,` type($tensor1) `,` type($tensor2) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddcmul_Op(IRDLOperation):
    name = "torch.aten.addcmul_"
    self = operand_def(BaseAttr(TensorType))
    tensor1 = operand_def(BaseAttr(TensorType))
    tensor2 = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor1 `,` $tensor2 `,` $value attr-dict `:` type($self) `,` type($tensor1) `,` type($tensor2) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmmOp(IRDLOperation):
    name = "torch.aten.addmm"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmm_Op(IRDLOperation):
    name = "torch.aten.addmm_"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmvOp(IRDLOperation):
    name = "torch.aten.addmv"
    self = operand_def(BaseAttr(TensorType))
    mat = operand_def(BaseAttr(TensorType))
    vec = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat `,` $vec `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat) `,` type($vec) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmv_Op(IRDLOperation):
    name = "torch.aten.addmv_"
    self = operand_def(BaseAttr(TensorType))
    mat = operand_def(BaseAttr(TensorType))
    vec = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat `,` $vec `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat) `,` type($vec) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddrOp(IRDLOperation):
    name = "torch.aten.addr"
    self = operand_def(BaseAttr(TensorType))
    vec1 = operand_def(BaseAttr(TensorType))
    vec2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $vec1 `,` $vec2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($vec1) `,` type($vec2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddr_Op(IRDLOperation):
    name = "torch.aten.addr_"
    self = operand_def(BaseAttr(TensorType))
    vec1 = operand_def(BaseAttr(TensorType))
    vec2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $vec1 `,` $vec2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($vec1) `,` type($vec2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdjointOp(IRDLOperation):
    name = "torch.aten.adjoint"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAffineGridGeneratorBackwardOp(IRDLOperation):
    name = "torch.aten.affine_grid_generator_backward"
    grad = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $size `,` $align_corners attr-dict `:` type($grad) `,` type($size) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenAffineGridGeneratorOp(IRDLOperation):
    name = "torch.aten.affine_grid_generator"
    theta = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$theta `,` $size `,` $align_corners attr-dict `:` type($theta) `,` type($size) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasCopyOp(IRDLOperation):
    name = "torch.aten.alias_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasOp(IRDLOperation):
    name = "torch.aten.alias"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAlignAsOp(IRDLOperation):
    name = "torch.aten.align_as"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAlignTensorsOp(IRDLOperation):
    name = "torch.aten.align_tensors"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllAllOutOp(IRDLOperation):
    name = "torch.aten.all.all_out"
    self = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $out attr-dict `:` type($self) `,` type($out) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAllBoolOp(IRDLOperation):
    name = "torch.aten.all.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimOp(IRDLOperation):
    name = "torch.aten.all.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimsOp(IRDLOperation):
    name = "torch.aten.all.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimsOutOp(IRDLOperation):
    name = "torch.aten.all.dims_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllFloatOp(IRDLOperation):
    name = "torch.aten.all.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllIntOp(IRDLOperation):
    name = "torch.aten.all.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllOp(IRDLOperation):
    name = "torch.aten.all"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllcloseOp(IRDLOperation):
    name = "torch.aten.allclose"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    rtol = operand_def(BaseAttr(Float64Type))
    atol = operand_def(BaseAttr(Float64Type))
    equal_nan = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $other `,` $rtol `,` $atol `,` $equal_nan attr-dict `:` type($self) `,` type($other) `,` type($rtol) `,` type($atol) `,` type($equal_nan) `->` type($result)"


@irdl_op_definition
class Torch_AtenAlphaDropoutOp(IRDLOperation):
    name = "torch.aten.alpha_dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenAlphaDropout_Op(IRDLOperation):
    name = "torch.aten.alpha_dropout_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $train attr-dict `:` type($self) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenAmaxOp(IRDLOperation):
    name = "torch.aten.amax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminOp(IRDLOperation):
    name = "torch.aten.amin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminmaxOp(IRDLOperation):
    name = "torch.aten.aminmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    min = result_def(BaseAttr(TensorType))
    max = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($min) `,` type($max)"


@irdl_op_definition
class Torch_AtenAngleFloatOp(IRDLOperation):
    name = "torch.aten.angle.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleIntOp(IRDLOperation):
    name = "torch.aten.angle.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleOp(IRDLOperation):
    name = "torch.aten.angle"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleScalarOp(IRDLOperation):
    name = "torch.aten.angle.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyAllOutOp(IRDLOperation):
    name = "torch.aten.any.all_out"
    self = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $out attr-dict `:` type($self) `,` type($out) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAnyBoolOp(IRDLOperation):
    name = "torch.aten.any.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimOp(IRDLOperation):
    name = "torch.aten.any.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimsOp(IRDLOperation):
    name = "torch.aten.any.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimsOutOp(IRDLOperation):
    name = "torch.aten.any.dims_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyFloatOp(IRDLOperation):
    name = "torch.aten.any.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyIntOp(IRDLOperation):
    name = "torch.aten.any.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyOp(IRDLOperation):
    name = "torch.aten.any"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArangeStartOutOp(IRDLOperation):
    name = "torch.aten.arange.start_out"
    start = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    end = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    step = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $step `,` $out attr-dict `:` type($start) `,` type($end) `,` type($step) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosOp(IRDLOperation):
    name = "torch.aten.arccos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccos_Op(IRDLOperation):
    name = "torch.aten.arccos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccoshOp(IRDLOperation):
    name = "torch.aten.arccosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosh_Op(IRDLOperation):
    name = "torch.aten.arccosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinOp(IRDLOperation):
    name = "torch.aten.arcsin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsin_Op(IRDLOperation):
    name = "torch.aten.arcsin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinhOp(IRDLOperation):
    name = "torch.aten.arcsinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinh_Op(IRDLOperation):
    name = "torch.aten.arcsinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan2Op(IRDLOperation):
    name = "torch.aten.arctan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctan2_Op(IRDLOperation):
    name = "torch.aten.arctan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctanOp(IRDLOperation):
    name = "torch.aten.arctan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan_Op(IRDLOperation):
    name = "torch.aten.arctan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanhOp(IRDLOperation):
    name = "torch.aten.arctanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanh_Op(IRDLOperation):
    name = "torch.aten.arctanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgmaxOp(IRDLOperation):
    name = "torch.aten.argmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgminOp(IRDLOperation):
    name = "torch.aten.argmin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgsortOp(IRDLOperation):
    name = "torch.aten.argsort"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgsortStableOp(IRDLOperation):
    name = "torch.aten.argsort.stable"
    self = operand_def(BaseAttr(TensorType))
    stable = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $stable `,` $dim `,` $descending attr-dict `:` type($self) `,` type($stable) `,` type($dim) `,` type($descending) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgsortStableOutOp(IRDLOperation):
    name = "torch.aten.argsort.stable_out"
    self = operand_def(BaseAttr(TensorType))
    stable = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $stable `,` $dim `,` $descending `,` $out attr-dict `:` type($self) `,` type($stable) `,` type($dim) `,` type($descending) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgwhereOp(IRDLOperation):
    name = "torch.aten.argwhere"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedCopyOp(IRDLOperation):
    name = "torch.aten.as_strided_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedOp(IRDLOperation):
    name = "torch.aten.as_strided"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedScatterOp(IRDLOperation):
    name = "torch.aten.as_strided_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($src) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStrided_Op(IRDLOperation):
    name = "torch.aten.as_strided_"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinFloatOp(IRDLOperation):
    name = "torch.aten.asin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinIntOp(IRDLOperation):
    name = "torch.aten.asin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinOp(IRDLOperation):
    name = "torch.aten.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinScalarOp(IRDLOperation):
    name = "torch.aten.asin.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsin_Op(IRDLOperation):
    name = "torch.aten.asin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhFloatOp(IRDLOperation):
    name = "torch.aten.asinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhIntOp(IRDLOperation):
    name = "torch.aten.asinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhOp(IRDLOperation):
    name = "torch.aten.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhScalarOp(IRDLOperation):
    name = "torch.aten.asinh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinh_Op(IRDLOperation):
    name = "torch.aten.asinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatIntOp(IRDLOperation):
    name = "torch.aten.atan2.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatOp(IRDLOperation):
    name = "torch.aten.atan2.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntFloatOp(IRDLOperation):
    name = "torch.aten.atan2.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntOp(IRDLOperation):
    name = "torch.aten.atan2.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2Op(IRDLOperation):
    name = "torch.aten.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtan2ScalarScalarOp(IRDLOperation):
    name = "torch.aten.atan2.Scalar_Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2_Op(IRDLOperation):
    name = "torch.aten.atan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtanFloatOp(IRDLOperation):
    name = "torch.aten.atan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanIntOp(IRDLOperation):
    name = "torch.aten.atan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanOp(IRDLOperation):
    name = "torch.aten.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanScalarOp(IRDLOperation):
    name = "torch.aten.atan.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan_Op(IRDLOperation):
    name = "torch.aten.atan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhFloatOp(IRDLOperation):
    name = "torch.aten.atanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhIntOp(IRDLOperation):
    name = "torch.aten.atanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhOp(IRDLOperation):
    name = "torch.aten.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhScalarOp(IRDLOperation):
    name = "torch.aten.atanh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanh_Op(IRDLOperation):
    name = "torch.aten.atanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast1DOp(IRDLOperation):
    name = "torch.aten.atleast_1d"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast1DSequenceOp(IRDLOperation):
    name = "torch.aten.atleast_1d.Sequence"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast2DOp(IRDLOperation):
    name = "torch.aten.atleast_2d"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast2DSequenceOp(IRDLOperation):
    name = "torch.aten.atleast_2d.Sequence"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast3DOp(IRDLOperation):
    name = "torch.aten.atleast_3d"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtleast3DSequenceOp(IRDLOperation):
    name = "torch.aten.atleast_3d.Sequence"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool1DOp(IRDLOperation):
    name = "torch.aten.avg_pool1d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DOp(IRDLOperation):
    name = "torch.aten.avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.avg_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.avg_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DOp(IRDLOperation):
    name = "torch.aten.avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenBaddbmmOp(IRDLOperation):
    name = "torch.aten.baddbmm"
    self = operand_def(BaseAttr(TensorType))
    batch1 = operand_def(BaseAttr(TensorType))
    batch2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $batch1 `,` $batch2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($batch1) `,` type($batch2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenBaddbmm_Op(IRDLOperation):
    name = "torch.aten.baddbmm_"
    self = operand_def(BaseAttr(TensorType))
    batch1 = operand_def(BaseAttr(TensorType))
    batch2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $batch1 `,` $batch2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($batch1) `,` type($batch2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenBartlettWindowPeriodicOutOp(IRDLOperation):
    name = "torch.aten.bartlett_window.periodic_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBatchNormBackwardElemtOp(IRDLOperation):
    name = "torch.aten.batch_norm_backward_elemt"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    invstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    sum_dy = operand_def(BaseAttr(TensorType))
    sum_dy_xmu = operand_def(BaseAttr(TensorType))
    count = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $invstd `,` $weight `,` $sum_dy `,` $sum_dy_xmu `,` $count attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($invstd) `,` type($weight) `,` type($sum_dy) `,` type($sum_dy_xmu) `,` type($count) `->` type($result)"


@irdl_op_definition
class Torch_AtenBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.batch_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    update = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    reserve = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $update `,` $eps `,` $output_mask `,` $reserve attr-dict `:` type($grad_out) `,` type($input) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($update) `,` type($eps) `,` type($output_mask) `,` type($reserve) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenBatchNormBackwardReduceOp(IRDLOperation):
    name = "torch.aten.batch_norm_backward_reduce"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    invstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    input_g = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    weight_g = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bias_g = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $invstd `,` $weight `,` $input_g `,` $weight_g `,` $bias_g attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($invstd) `,` type($weight) `,` type($input_g) `,` type($weight_g) `,` type($bias_g) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenBatchNormElemtOp(IRDLOperation):
    name = "torch.aten.batch_norm_elemt"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mean = operand_def(BaseAttr(TensorType))
    invstd = operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $mean `,` $invstd `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($mean) `,` type($invstd) `,` type($eps) `->` type($result)"


@irdl_op_definition
class Torch_AtenBatchNormGatherStatsOp(IRDLOperation):
    name = "torch.aten.batch_norm_gather_stats"
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    invstd = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    count = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $mean `,` $invstd `,` $running_mean `,` $running_var `,` $momentum `,` $eps `,` $count attr-dict `:` type($input) `,` type($mean) `,` type($invstd) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `,` type($count) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenBatchNormGatherStatsWithCountsOp(IRDLOperation):
    name = "torch.aten.batch_norm_gather_stats_with_counts"
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    invstd = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    counts = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $mean `,` $invstd `,` $running_mean `,` $running_var `,` $momentum `,` $eps `,` $counts attr-dict `:` type($input) `,` type($mean) `,` type($invstd) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `,` type($counts) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenBatchNormOp(IRDLOperation):
    name = "torch.aten.batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps `,` $cudnn_enabled attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `,` type($cudnn_enabled) `->` type($result)"


@irdl_op_definition
class Torch_AtenBatchNormStatsOp(IRDLOperation):
    name = "torch.aten.batch_norm_stats"
    input = operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $eps attr-dict `:` type($input) `,` type($eps) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenBatchNormUpdateStatsOp(IRDLOperation):
    name = "torch.aten.batch_norm_update_stats"
    input = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    momentum = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $running_mean `,` $running_var `,` $momentum attr-dict `:` type($input) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenBilinearOp(IRDLOperation):
    name = "torch.aten.bilinear"
    input1 = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input1 `,` $input2 `,` $weight `,` $bias attr-dict `:` type($input1) `,` type($input2) `,` type($weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyBackwardOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyWithLogitsOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_with_logits"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    pos_weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $pos_weight `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($pos_weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBincountOp(IRDLOperation):
    name = "torch.aten.bincount"
    self = operand_def(BaseAttr(TensorType))
    weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    minlength = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weights `,` $minlength attr-dict `:` type($self) `,` type($weights) `,` type($minlength) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAndScalarOutOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndScalarTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAndScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAnd_ScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_and_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAnd_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftScalarTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor_Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseLeftShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShift_TensorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift_.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseNotOp(IRDLOperation):
    name = "torch.aten.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseNot_Op(IRDLOperation):
    name = "torch.aten.bitwise_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOrScalarOutOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrScalarTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOrScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOr_ScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_or_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOr_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftScalarTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor_Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseRightShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShift_TensorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift_.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorScalarOutOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseXorScalarTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOutOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseXor_ScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_xor_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXor_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBlackmanWindowPeriodicOutOp(IRDLOperation):
    name = "torch.aten.blackman_window.periodic_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBlockDiagOp(IRDLOperation):
    name = "torch.aten.block_diag"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenBmmOp(IRDLOperation):
    name = "torch.aten.bmm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBroadcastTensorsOp(IRDLOperation):
    name = "torch.aten.broadcast_tensors"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenBroadcastToOp(IRDLOperation):
    name = "torch.aten.broadcast_to"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBucketizeScalarOp(IRDLOperation):
    name = "torch.aten.bucketize.Scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `->` type($result)"


@irdl_op_definition
class Torch_AtenBucketizeScalarOutOp(IRDLOperation):
    name = "torch.aten.bucketize.Scalar_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right `,` $out attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenBucketizeTensorOp(IRDLOperation):
    name = "torch.aten.bucketize.Tensor"
    self = operand_def(BaseAttr(TensorType))
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `->` type($result)"


@irdl_op_definition
class Torch_AtenBucketizeTensorOutOp(IRDLOperation):
    name = "torch.aten.bucketize.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right `,` $out attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenCanCastOp(IRDLOperation):
    name = "torch.aten.can_cast"
    from_ = operand_def(BaseAttr(IntegerType))
    to = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$from_ `,` $to attr-dict `:` type($from_) `,` type($to) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCartesianProdOp(IRDLOperation):
    name = "torch.aten.cartesian_prod"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenCatOp(IRDLOperation):
    name = "torch.aten.cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCcolIndicesCopyOp(IRDLOperation):
    name = "torch.aten.ccol_indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCcolIndicesOp(IRDLOperation):
    name = "torch.aten.ccol_indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCdistOp(IRDLOperation):
    name = "torch.aten.cdist"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    compute_mode = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $compute_mode attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($compute_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilFloatOp(IRDLOperation):
    name = "torch.aten.ceil.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilIntOp(IRDLOperation):
    name = "torch.aten.ceil.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilOp(IRDLOperation):
    name = "torch.aten.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilScalarOp(IRDLOperation):
    name = "torch.aten.ceil.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeil_Op(IRDLOperation):
    name = "torch.aten.ceil_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeluOp(IRDLOperation):
    name = "torch.aten.celu"
    self = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $alpha attr-dict `:` type($self) `,` type($alpha) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCelu_Op(IRDLOperation):
    name = "torch.aten.celu_"
    self = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $alpha attr-dict `:` type($self) `,` type($alpha) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenChainMatmulOp(IRDLOperation):
    name = "torch.aten.chain_matmul"
    matrices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$matrices attr-dict `:` type($matrices) `->` type($result)"


@irdl_op_definition
class Torch_AtenChalfOp(IRDLOperation):
    name = "torch.aten.chalf"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenChannelShuffleOp(IRDLOperation):
    name = "torch.aten.channel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $groups attr-dict `:` type($self) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCholeskyInverseOp(IRDLOperation):
    name = "torch.aten.cholesky_inverse"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskyOp(IRDLOperation):
    name = "torch.aten.cholesky"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskySolveOp(IRDLOperation):
    name = "torch.aten.cholesky_solve"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $upper attr-dict `:` type($self) `,` type($input2) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_AtenChooseQparamsOptimizedOp(IRDLOperation):
    name = "torch.aten.choose_qparams_optimized"
    input = operand_def(BaseAttr(TensorType))
    numel = operand_def(BaseAttr(IntegerType))
    n_bins = operand_def(BaseAttr(IntegerType))
    ratio = operand_def(BaseAttr(Float64Type))
    bit_width = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $numel `,` $n_bins `,` $ratio `,` $bit_width attr-dict `:` type($input) `,` type($numel) `,` type($n_bins) `,` type($ratio) `,` type($bit_width) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenChunkOp(IRDLOperation):
    name = "torch.aten.chunk"
    self = operand_def(BaseAttr(TensorType))
    chunks = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $chunks `,` $dim attr-dict `:` type($self) `,` type($chunks) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampMaxOp(IRDLOperation):
    name = "torch.aten.clamp_max"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMaxTensorOp(IRDLOperation):
    name = "torch.aten.clamp_max.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMaxTensorOutOp(IRDLOperation):
    name = "torch.aten.clamp_max.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $max `,` $out attr-dict `:` type($self) `,` type($max) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampMax_Op(IRDLOperation):
    name = "torch.aten.clamp_max_"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMax_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_max_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMinOp(IRDLOperation):
    name = "torch.aten.clamp_min"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMinTensorOp(IRDLOperation):
    name = "torch.aten.clamp_min.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMinTensorOutOp(IRDLOperation):
    name = "torch.aten.clamp_min.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $out attr-dict `:` type($self) `,` type($min) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampMin_Op(IRDLOperation):
    name = "torch.aten.clamp_min_"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMin_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_min_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampOp(IRDLOperation):
    name = "torch.aten.clamp"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampTensorOp(IRDLOperation):
    name = "torch.aten.clamp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampTensorOutOp(IRDLOperation):
    name = "torch.aten.clamp.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max `,` $out attr-dict `:` type($self) `,` type($min) `,` type($max) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenClamp_Op(IRDLOperation):
    name = "torch.aten.clamp_"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClamp_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClipOp(IRDLOperation):
    name = "torch.aten.clip"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClipTensorOp(IRDLOperation):
    name = "torch.aten.clip.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClipTensorOutOp(IRDLOperation):
    name = "torch.aten.clip.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max `,` $out attr-dict `:` type($self) `,` type($min) `,` type($max) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenClip_Op(IRDLOperation):
    name = "torch.aten.clip_"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClip_TensorOp(IRDLOperation):
    name = "torch.aten.clip_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenCloneOp(IRDLOperation):
    name = "torch.aten.clone"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoalesceOp(IRDLOperation):
    name = "torch.aten.coalesce"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCol2ImOp(IRDLOperation):
    name = "torch.aten.col2im"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($output_size) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenColIndicesCopyOp(IRDLOperation):
    name = "torch.aten.col_indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenColIndicesOp(IRDLOperation):
    name = "torch.aten.col_indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenColumnStackOp(IRDLOperation):
    name = "torch.aten.column_stack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenCombinationsOp(IRDLOperation):
    name = "torch.aten.combinations"
    self = operand_def(BaseAttr(TensorType))
    r = operand_def(BaseAttr(IntegerType))
    with_replacement = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $r `,` $with_replacement attr-dict `:` type($self) `,` type($r) `,` type($with_replacement) `->` type($result)"


@irdl_op_definition
class Torch_AtenComplexOp(IRDLOperation):
    name = "torch.aten.complex"
    real = operand_def(BaseAttr(TensorType))
    imag = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$real `,` $imag attr-dict `:` type($real) `,` type($imag) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenConcatOp(IRDLOperation):
    name = "torch.aten.concat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenConcatenateOp(IRDLOperation):
    name = "torch.aten.concatenate"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjOp(IRDLOperation):
    name = "torch.aten.conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysicalOp(IRDLOperation):
    name = "torch.aten.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysical_Op(IRDLOperation):
    name = "torch.aten.conj_physical_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConstantPadNdOp(IRDLOperation):
    name = "torch.aten.constant_pad_nd"
    self = operand_def(BaseAttr(TensorType))
    pad = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $pad `,` $value attr-dict `:` type($self) `,` type($pad) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenContiguousOp(IRDLOperation):
    name = "torch.aten.contiguous"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenConv1DOp(IRDLOperation):
    name = "torch.aten.conv1d"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenConv2DOp(IRDLOperation):
    name = "torch.aten.conv2d"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenConv3DOp(IRDLOperation):
    name = "torch.aten.conv3d"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvDepthwise3DOp(IRDLOperation):
    name = "torch.aten.conv_depthwise3d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvTbcBackwardOp(IRDLOperation):
    name = "torch.aten.conv_tbc_backward"
    self = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(BaseAttr(TensorType))
    pad = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input `,` $weight `,` $bias `,` $pad attr-dict `:` type($self) `,` type($input) `,` type($weight) `,` type($bias) `,` type($pad) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenConvTbcOp(IRDLOperation):
    name = "torch.aten.conv_tbc"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(BaseAttr(TensorType))
    pad = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $pad attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($pad) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvTranspose1DOp(IRDLOperation):
    name = "torch.aten.conv_transpose1d"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $output_padding `,` $groups `,` $dilation attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($output_padding) `,` type($groups) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvolutionBackwardOp(IRDLOperation):
    name = "torch.aten.convolution_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias_sizes = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $bias_sizes `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($bias_sizes) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenConvolutionBackwardOverrideableOp(IRDLOperation):
    name = "torch.aten.convolution_backward_overrideable"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    grad_input = result_def(BaseAttr(TensorType))
    grad_weight = result_def(BaseAttr(TensorType))
    grad_bias = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($grad_input) `,` type($grad_weight) `,` type($grad_bias)"


@irdl_op_definition
class Torch_AtenConvolutionOp(IRDLOperation):
    name = "torch.aten.convolution"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvolutionOverrideableOp(IRDLOperation):
    name = "torch.aten.convolution_overrideable"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopyOp(IRDLOperation):
    name = "torch.aten.copy"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopySparseToSparse_Op(IRDLOperation):
    name = "torch.aten.copy_sparse_to_sparse_"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_FloatOp(IRDLOperation):
    name = "torch.aten.copy_.float"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_IntOp(IRDLOperation):
    name = "torch.aten.copy_.int"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_Op(IRDLOperation):
    name = "torch.aten.copy_"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_TensorOp(IRDLOperation):
    name = "torch.aten.copy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysignFloatIntOp(IRDLOperation):
    name = "torch.aten.copysign.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignFloatOp(IRDLOperation):
    name = "torch.aten.copysign.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntFloatOp(IRDLOperation):
    name = "torch.aten.copysign.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntOp(IRDLOperation):
    name = "torch.aten.copysign.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignOp(IRDLOperation):
    name = "torch.aten.copysign"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignScalarOp(IRDLOperation):
    name = "torch.aten.copysign.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysignScalarOutOp(IRDLOperation):
    name = "torch.aten.copysign.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignTensorOp(IRDLOperation):
    name = "torch.aten.copysign.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysign_ScalarOp(IRDLOperation):
    name = "torch.aten.copysign_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysign_TensorOp(IRDLOperation):
    name = "torch.aten.copysign_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCorrcoefOp(IRDLOperation):
    name = "torch.aten.corrcoef"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosFloatOp(IRDLOperation):
    name = "torch.aten.cos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosIntOp(IRDLOperation):
    name = "torch.aten.cos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosOp(IRDLOperation):
    name = "torch.aten.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosScalarOp(IRDLOperation):
    name = "torch.aten.cos.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCos_Op(IRDLOperation):
    name = "torch.aten.cos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshFloatOp(IRDLOperation):
    name = "torch.aten.cosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshIntOp(IRDLOperation):
    name = "torch.aten.cosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshOp(IRDLOperation):
    name = "torch.aten.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshScalarOp(IRDLOperation):
    name = "torch.aten.cosh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosh_Op(IRDLOperation):
    name = "torch.aten.cosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosineEmbeddingLossOp(IRDLOperation):
    name = "torch.aten.cosine_embedding_loss"
    input1 = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input1 `,` $input2 `,` $target `,` $margin `,` $reduction attr-dict `:` type($input1) `,` type($input2) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosineSimilarityOp(IRDLOperation):
    name = "torch.aten.cosine_similarity"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    eps = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $dim `,` $eps attr-dict `:` type($x1) `,` type($x2) `,` type($dim) `,` type($eps) `->` type($result)"


@irdl_op_definition
class Torch_AtenCountNonzeroDimIntlistOp(IRDLOperation):
    name = "torch.aten.count_nonzero.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCountNonzeroDimIntlistOutOp(IRDLOperation):
    name = "torch.aten.count_nonzero.dim_IntList_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenCountNonzeroOp(IRDLOperation):
    name = "torch.aten.count_nonzero"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCovOp(IRDLOperation):
    name = "torch.aten.cov"
    self = operand_def(BaseAttr(TensorType))
    correction = operand_def(BaseAttr(IntegerType))
    fweights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    aweights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $correction `,` $fweights `,` $aweights attr-dict `:` type($self) `,` type($correction) `,` type($fweights) `,` type($aweights) `->` type($result)"


@irdl_op_definition
class Torch_AtenCrossEntropyLossOp(IRDLOperation):
    name = "torch.aten.cross_entropy_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    label_smoothing = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $label_smoothing attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($label_smoothing) `->` type($result)"


@irdl_op_definition
class Torch_AtenCrossOp(IRDLOperation):
    name = "torch.aten.cross"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dim attr-dict `:` type($self) `,` type($other) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCrowIndicesCopyOp(IRDLOperation):
    name = "torch.aten.crow_indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCrowIndicesOp(IRDLOperation):
    name = "torch.aten.crow_indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCudnnAffineGridGeneratorBackwardOp(IRDLOperation):
    name = "torch.aten.cudnn_affine_grid_generator_backward"
    grad = operand_def(BaseAttr(TensorType))
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    H = operand_def(BaseAttr(IntegerType))
    W = operand_def(BaseAttr(IntegerType))
    grad_theta = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $N `,` $C `,` $H `,` $W attr-dict `:` type($grad) `,` type($N) `,` type($C) `,` type($H) `,` type($W) `->` type($grad_theta)"


@irdl_op_definition
class Torch_AtenCudnnAffineGridGeneratorOp(IRDLOperation):
    name = "torch.aten.cudnn_affine_grid_generator"
    theta = operand_def(BaseAttr(TensorType))
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    H = operand_def(BaseAttr(IntegerType))
    W = operand_def(BaseAttr(IntegerType))
    grid = result_def(BaseAttr(TensorType))

    assembly_format = "$theta `,` $N `,` $C `,` $H `,` $W attr-dict `:` type($theta) `,` type($N) `,` type($C) `,` type($H) `,` type($W) `->` type($grid)"


@irdl_op_definition
class Torch_AtenCudnnBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.cudnn_batch_norm_backward"
    input = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    epsilon = operand_def(BaseAttr(Float64Type))
    reserveSpace = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grad_output `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $epsilon `,` $reserveSpace attr-dict `:` type($input) `,` type($grad_output) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($epsilon) `,` type($reserveSpace) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenCudnnBatchNormOp(IRDLOperation):
    name = "torch.aten.cudnn_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    exponential_average_factor = operand_def(BaseAttr(Float64Type))
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $exponential_average_factor `,` $epsilon attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($exponential_average_factor) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenCudnnConvolutionAddReluOp(IRDLOperation):
    name = "torch.aten.cudnn_convolution_add_relu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    z = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $z `,` $alpha `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($z) `,` type($alpha) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCudnnConvolutionOp(IRDLOperation):
    name = "torch.aten.cudnn_convolution"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    allow_tf32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $padding `,` $stride `,` $dilation `,` $groups `,` $benchmark `,` $deterministic `,` $allow_tf32 attr-dict `:` type($self) `,` type($weight) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `,` type($allow_tf32) `->` type($result)"


@irdl_op_definition
class Torch_AtenCudnnConvolutionReluOp(IRDLOperation):
    name = "torch.aten.cudnn_convolution_relu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCudnnConvolutionTransposeOp(IRDLOperation):
    name = "torch.aten.cudnn_convolution_transpose"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    allow_tf32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $padding `,` $output_padding `,` $stride `,` $dilation `,` $groups `,` $benchmark `,` $deterministic `,` $allow_tf32 attr-dict `:` type($self) `,` type($weight) `,` type($padding) `,` type($output_padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `,` type($allow_tf32) `->` type($result)"


@irdl_op_definition
class Torch_AtenCudnnGridSamplerBackwardOp(IRDLOperation):
    name = "torch.aten.cudnn_grid_sampler_backward"
    self = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    grad_self = result_def(BaseAttr(TensorType))
    grad_grid = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grid `,` $grad_output attr-dict `:` type($self) `,` type($grid) `,` type($grad_output) `->` type($grad_self) `,` type($grad_grid)"


@irdl_op_definition
class Torch_AtenCudnnGridSamplerOp(IRDLOperation):
    name = "torch.aten.cudnn_grid_sampler"
    self = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    output = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $grid attr-dict `:` type($self) `,` type($grid) `->` type($output)"
    )


@irdl_op_definition
class Torch_AtenCudnnIsAcceptableOp(IRDLOperation):
    name = "torch.aten.cudnn_is_acceptable"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCummaxOp(IRDLOperation):
    name = "torch.aten.cummax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenCummaxminBackwardOp(IRDLOperation):
    name = "torch.aten.cummaxmin_backward"
    grad = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $input `,` $indices `,` $dim attr-dict `:` type($grad) `,` type($input) `,` type($indices) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumminOp(IRDLOperation):
    name = "torch.aten.cummin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenCumprodBackwardOp(IRDLOperation):
    name = "torch.aten.cumprod_backward"
    grad = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $input `,` $dim `,` $output attr-dict `:` type($grad) `,` type($input) `,` type($dim) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumprodOp(IRDLOperation):
    name = "torch.aten.cumprod"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumprod_Op(IRDLOperation):
    name = "torch.aten.cumprod_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsumOp(IRDLOperation):
    name = "torch.aten.cumsum"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsum_Op(IRDLOperation):
    name = "torch.aten.cumsum_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenDataOp(IRDLOperation):
    name = "torch.aten.data"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDeg2RadOp(IRDLOperation):
    name = "torch.aten.deg2rad"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDeg2Rad_Op(IRDLOperation):
    name = "torch.aten.deg2rad_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDenseDimOp(IRDLOperation):
    name = "torch.aten.dense_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetOp(IRDLOperation):
    name = "torch.aten.det"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetachCopyOp(IRDLOperation):
    name = "torch.aten.detach_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetachOp(IRDLOperation):
    name = "torch.aten.detach"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetach_Op(IRDLOperation):
    name = "torch.aten.detach_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagEmbedOp(IRDLOperation):
    name = "torch.aten.diag_embed"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagOp(IRDLOperation):
    name = "torch.aten.diag"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagflatOp(IRDLOperation):
    name = "torch.aten.diagflat"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset attr-dict `:` type($self) `,` type($offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalBackwardOp(IRDLOperation):
    name = "torch.aten.diagonal_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalCopyOp(IRDLOperation):
    name = "torch.aten.diagonal_copy"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalOp(IRDLOperation):
    name = "torch.aten.diagonal"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalScatterOp(IRDLOperation):
    name = "torch.aten.diagonal_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($src) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiffOp(IRDLOperation):
    name = "torch.aten.diff"
    self = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    prepend = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    append = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $n `,` $dim `,` $prepend `,` $append attr-dict `:` type($self) `,` type($n) `,` type($dim) `,` type($prepend) `,` type($append) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigammaOp(IRDLOperation):
    name = "torch.aten.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigamma_Op(IRDLOperation):
    name = "torch.aten.digamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDimOp(IRDLOperation):
    name = "torch.aten.dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDistOp(IRDLOperation):
    name = "torch.aten.dist"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $p attr-dict `:` type($self) `,` type($other) `,` type($p) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivFloatOp(IRDLOperation):
    name = "torch.aten.div.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivIntOp(IRDLOperation):
    name = "torch.aten.div.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivOp(IRDLOperation):
    name = "torch.aten.div"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivScalarOp(IRDLOperation):
    name = "torch.aten.div.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivScalarOutOp(IRDLOperation):
    name = "torch.aten.div.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivTensorOp(IRDLOperation):
    name = "torch.aten.div.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDiv_ScalarOp(IRDLOperation):
    name = "torch.aten.div_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDiv_TensorOp(IRDLOperation):
    name = "torch.aten.div_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivideScalarOp(IRDLOperation):
    name = "torch.aten.divide.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivideTensorOp(IRDLOperation):
    name = "torch.aten.divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivide_ScalarOp(IRDLOperation):
    name = "torch.aten.divide_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivide_TensorOp(IRDLOperation):
    name = "torch.aten.divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDotOp(IRDLOperation):
    name = "torch.aten.dot"
    self = operand_def(BaseAttr(TensorType))
    tensor = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor attr-dict `:` type($self) `,` type($tensor) `->` type($result)"


@irdl_op_definition
class Torch_AtenDropoutOp(IRDLOperation):
    name = "torch.aten.dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenDropout_Op(IRDLOperation):
    name = "torch.aten.dropout_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $train attr-dict `:` type($self) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenDstackOp(IRDLOperation):
    name = "torch.aten.dstack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenEinsumSublistOp(IRDLOperation):
    name = "torch.aten.einsum.sublist"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenEluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.elu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    input_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    is_result = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    self_or_result = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $alpha `,` $scale `,` $input_scale `,` $is_result `,` $self_or_result `,` $grad_input attr-dict `:` type($grad_output) `,` type($alpha) `,` type($scale) `,` type($input_scale) `,` type($is_result) `,` type($self_or_result) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenEluBackwardOp(IRDLOperation):
    name = "torch.aten.elu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    input_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    is_result = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    self_or_result = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $alpha `,` $scale `,` $input_scale `,` $is_result `,` $self_or_result attr-dict `:` type($grad_output) `,` type($alpha) `,` type($scale) `,` type($input_scale) `,` type($is_result) `,` type($self_or_result) `->` type($result)"


@irdl_op_definition
class Torch_AtenEluOp(IRDLOperation):
    name = "torch.aten.elu"
    self = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    input_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $alpha `,` $scale `,` $input_scale attr-dict `:` type($self) `,` type($alpha) `,` type($scale) `,` type($input_scale) `->` type($result)"


@irdl_op_definition
class Torch_AtenElu_Op(IRDLOperation):
    name = "torch.aten.elu_"
    self = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    input_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $alpha `,` $scale `,` $input_scale attr-dict `:` type($self) `,` type($alpha) `,` type($scale) `,` type($input_scale) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($grad) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingBagOp(IRDLOperation):
    name = "torch.aten.embedding_bag"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenEmbeddingBagPaddingIdxOp(IRDLOperation):
    name = "torch.aten.embedding_bag.padding_idx"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenEmbeddingDenseBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_dense_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad_output) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingOp(IRDLOperation):
    name = "torch.aten.embedding"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($weight) `,` type($indices) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingRenorm_Op(IRDLOperation):
    name = "torch.aten.embedding_renorm_"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    max_norm = operand_def(BaseAttr(Float64Type))
    norm_type = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $max_norm `,` $norm_type attr-dict `:` type($self) `,` type($indices) `,` type($max_norm) `,` type($norm_type) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingSparseBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_sparse_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqBoolListOp(IRDLOperation):
    name = "torch.aten.eq.bool_list"
    a = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    b = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqBoolOp(IRDLOperation):
    name = "torch.aten.eq.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatIntOp(IRDLOperation):
    name = "torch.aten.eq.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatListOp(IRDLOperation):
    name = "torch.aten.eq.float_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatOp(IRDLOperation):
    name = "torch.aten.eq.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntFloatOp(IRDLOperation):
    name = "torch.aten.eq.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntListOp(IRDLOperation):
    name = "torch.aten.eq.int_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntOp(IRDLOperation):
    name = "torch.aten.eq.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqOp(IRDLOperation):
    name = "torch.aten.eq"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqScalarOp(IRDLOperation):
    name = "torch.aten.eq.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEqScalarOutOp(IRDLOperation):
    name = "torch.aten.eq.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqTensorListOp(IRDLOperation):
    name = "torch.aten.eq.Tensor_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqTensorOp(IRDLOperation):
    name = "torch.aten.eq.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEqTensorOutOp(IRDLOperation):
    name = "torch.aten.eq.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenEq_ScalarOp(IRDLOperation):
    name = "torch.aten.eq_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEq_TensorOp(IRDLOperation):
    name = "torch.aten.eq_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEqualOp(IRDLOperation):
    name = "torch.aten.equal"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenErfFloatOp(IRDLOperation):
    name = "torch.aten.erf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfIntOp(IRDLOperation):
    name = "torch.aten.erf.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfOp(IRDLOperation):
    name = "torch.aten.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfScalarOp(IRDLOperation):
    name = "torch.aten.erf.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErf_Op(IRDLOperation):
    name = "torch.aten.erf_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcFloatOp(IRDLOperation):
    name = "torch.aten.erfc.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcIntOp(IRDLOperation):
    name = "torch.aten.erfc.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcOp(IRDLOperation):
    name = "torch.aten.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcScalarOp(IRDLOperation):
    name = "torch.aten.erfc.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfc_Op(IRDLOperation):
    name = "torch.aten.erfc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinvOp(IRDLOperation):
    name = "torch.aten.erfinv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinv_Op(IRDLOperation):
    name = "torch.aten.erfinv_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2Op(IRDLOperation):
    name = "torch.aten.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2_Op(IRDLOperation):
    name = "torch.aten.exp2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpFloatOp(IRDLOperation):
    name = "torch.aten.exp.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpIntOp(IRDLOperation):
    name = "torch.aten.exp.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpOp(IRDLOperation):
    name = "torch.aten.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpScalarOp(IRDLOperation):
    name = "torch.aten.exp.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp_Op(IRDLOperation):
    name = "torch.aten.exp_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandAsOp(IRDLOperation):
    name = "torch.aten.expand_as"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenExpandCopyOp(IRDLOperation):
    name = "torch.aten.expand_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandOp(IRDLOperation):
    name = "torch.aten.expand"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1FloatOp(IRDLOperation):
    name = "torch.aten.expm1.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1IntOp(IRDLOperation):
    name = "torch.aten.expm1.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1Op(IRDLOperation):
    name = "torch.aten.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1ScalarOp(IRDLOperation):
    name = "torch.aten.expm1.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1_Op(IRDLOperation):
    name = "torch.aten.expm1_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenEyeMOutOp(IRDLOperation):
    name = "torch.aten.eye.m_out"
    n = operand_def(BaseAttr(IntegerType))
    m = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$n `,` $m `,` $out attr-dict `:` type($n) `,` type($m) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFakeQuantizePerChannelAffineCachemaskBackwardOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_channel_affine_cachemask_backward"
    grad = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$grad `,` $mask attr-dict `:` type($grad) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFakeQuantizePerChannelAffineCachemaskOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_channel_affine_cachemask"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $axis `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($axis) `,` type($quant_min) `,` type($quant_max) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_AtenFakeQuantizePerChannelAffineOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_channel_affine"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $axis `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($axis) `,` type($quant_min) `,` type($quant_max) `->` type($result)"


@irdl_op_definition
class Torch_AtenFakeQuantizePerTensorAffineCachemaskBackwardOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_tensor_affine_cachemask_backward"
    grad = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$grad `,` $mask attr-dict `:` type($grad) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFakeQuantizePerTensorAffineCachemaskOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_tensor_affine_cachemask"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    zero_point = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($quant_min) `,` type($quant_max) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_AtenFakeQuantizePerTensorAffineOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_tensor_affine"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    zero_point = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($quant_min) `,` type($quant_max) `->` type($result)"


@irdl_op_definition
class Torch_AtenFakeQuantizePerTensorAffineTensorQparamsOp(IRDLOperation):
    name = "torch.aten.fake_quantize_per_tensor_affine.tensor_qparams"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($quant_min) `,` type($quant_max) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmLinearFp16WeightFp32ActivationOp(IRDLOperation):
    name = "torch.aten.fbgemm_linear_fp16_weight_fp32_activation"
    input = operand_def(BaseAttr(TensorType))
    packed_weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $packed_weight `,` $bias attr-dict `:` type($input) `,` type($packed_weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmLinearFp16WeightOp(IRDLOperation):
    name = "torch.aten.fbgemm_linear_fp16_weight"
    input = operand_def(BaseAttr(TensorType))
    packed_weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $packed_weight `,` $bias attr-dict `:` type($input) `,` type($packed_weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmLinearInt8WeightFp32ActivationOp(IRDLOperation):
    name = "torch.aten.fbgemm_linear_int8_weight_fp32_activation"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    packed = operand_def(BaseAttr(TensorType))
    col_offsets = operand_def(BaseAttr(TensorType))
    weight_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    weight_zero_point = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    bias = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $packed `,` $col_offsets `,` $weight_scale `,` $weight_zero_point `,` $bias attr-dict `:` type($input) `,` type($weight) `,` type($packed) `,` type($col_offsets) `,` type($weight_scale) `,` type($weight_zero_point) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmLinearInt8WeightOp(IRDLOperation):
    name = "torch.aten.fbgemm_linear_int8_weight"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    packed = operand_def(BaseAttr(TensorType))
    col_offsets = operand_def(BaseAttr(TensorType))
    weight_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    weight_zero_point = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    bias = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $packed `,` $col_offsets `,` $weight_scale `,` $weight_zero_point `,` $bias attr-dict `:` type($input) `,` type($weight) `,` type($packed) `,` type($col_offsets) `,` type($weight_scale) `,` type($weight_zero_point) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmLinearQuantizeWeightOp(IRDLOperation):
    name = "torch.aten.fbgemm_linear_quantize_weight"
    input = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(Float64Type))
    result3 = result_def(BaseAttr(IntegerType))

    assembly_format = "$input attr-dict `:` type($input) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenFbgemmPackGemmMatrixFp16Op(IRDLOperation):
    name = "torch.aten.fbgemm_pack_gemm_matrix_fp16"
    input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input attr-dict `:` type($input) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmPackQuantizedMatrixKnOp(IRDLOperation):
    name = "torch.aten.fbgemm_pack_quantized_matrix.KN"
    input = operand_def(BaseAttr(TensorType))
    K = operand_def(BaseAttr(IntegerType))
    N = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $K `,` $N attr-dict `:` type($input) `,` type($K) `,` type($N) `->` type($result)"


@irdl_op_definition
class Torch_AtenFbgemmPackQuantizedMatrixOp(IRDLOperation):
    name = "torch.aten.fbgemm_pack_quantized_matrix"
    input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input attr-dict `:` type($input) `->` type($result)"


@irdl_op_definition
class Torch_AtenFeatureAlphaDropoutOp(IRDLOperation):
    name = "torch.aten.feature_alpha_dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenFeatureAlphaDropout_Op(IRDLOperation):
    name = "torch.aten.feature_alpha_dropout_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $train attr-dict `:` type($self) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenFeatureDropoutOp(IRDLOperation):
    name = "torch.aten.feature_dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenFeatureDropout_Op(IRDLOperation):
    name = "torch.aten.feature_dropout_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $train attr-dict `:` type($self) `,` type($p) `,` type($train) `->` type($result)"


@irdl_op_definition
class Torch_AtenFftFftshiftOp(IRDLOperation):
    name = "torch.aten.fft_fftshift"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFftIfftshiftOp(IRDLOperation):
    name = "torch.aten.fft_ifftshift"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFillDiagonal_Op(IRDLOperation):
    name = "torch.aten.fill_diagonal_"
    self = operand_def(BaseAttr(TensorType))
    fill_value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    wrap = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $fill_value `,` $wrap attr-dict `:` type($self) `,` type($fill_value) `,` type($wrap) `->` type($result)"


@irdl_op_definition
class Torch_AtenFillScalarOp(IRDLOperation):
    name = "torch.aten.fill.Scalar"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFillScalarOutOp(IRDLOperation):
    name = "torch.aten.fill.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $value `,` $out attr-dict `:` type($self) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFillTensorOp(IRDLOperation):
    name = "torch.aten.fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFillTensorOutOp(IRDLOperation):
    name = "torch.aten.fill.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $value `,` $out attr-dict `:` type($self) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFill_ScalarOp(IRDLOperation):
    name = "torch.aten.fill_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFill_TensorOp(IRDLOperation):
    name = "torch.aten.fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFixOp(IRDLOperation):
    name = "torch.aten.fix"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFix_Op(IRDLOperation):
    name = "torch.aten.fix_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFlattenDenseTensorsOp(IRDLOperation):
    name = "torch.aten.flatten_dense_tensors"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenFlipOp(IRDLOperation):
    name = "torch.aten.flip"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFliplrOp(IRDLOperation):
    name = "torch.aten.fliplr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFlipudOp(IRDLOperation):
    name = "torch.aten.flipud"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloatPower_ScalarOp(IRDLOperation):
    name = "torch.aten.float_power_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloatPower_TensorOp(IRDLOperation):
    name = "torch.aten.float_power_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorDivideOp(IRDLOperation):
    name = "torch.aten.floor_divide"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDivideScalarOp(IRDLOperation):
    name = "torch.aten.floor_divide.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDivideScalarOutOp(IRDLOperation):
    name = "torch.aten.floor_divide.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorDivide_ScalarOp(IRDLOperation):
    name = "torch.aten.floor_divide_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDivide_TensorOp(IRDLOperation):
    name = "torch.aten.floor_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorFloatOp(IRDLOperation):
    name = "torch.aten.floor.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorIntOp(IRDLOperation):
    name = "torch.aten.floor.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorOp(IRDLOperation):
    name = "torch.aten.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorScalarOp(IRDLOperation):
    name = "torch.aten.floor.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloor_Op(IRDLOperation):
    name = "torch.aten.floor_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmaxOp(IRDLOperation):
    name = "torch.aten.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFminOp(IRDLOperation):
    name = "torch.aten.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodFloatIntOp(IRDLOperation):
    name = "torch.aten.fmod.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodFloatOp(IRDLOperation):
    name = "torch.aten.fmod.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntFloatOp(IRDLOperation):
    name = "torch.aten.fmod.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntOp(IRDLOperation):
    name = "torch.aten.fmod.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodOp(IRDLOperation):
    name = "torch.aten.fmod"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodScalarOp(IRDLOperation):
    name = "torch.aten.fmod.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodScalarOutOp(IRDLOperation):
    name = "torch.aten.fmod.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodTensorOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodTensorOutOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmod_ScalarOp(IRDLOperation):
    name = "torch.aten.fmod_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmod_TensorOp(IRDLOperation):
    name = "torch.aten.fmod_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFracOp(IRDLOperation):
    name = "torch.aten.frac"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFrac_Op(IRDLOperation):
    name = "torch.aten.frac_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $output_size `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $output_size `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool2DOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    random_samples = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $output_size `,` $random_samples attr-dict `:` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($random_samples) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool2DOutputOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool2d.output"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    random_samples = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $output_size `,` $random_samples `,` $output `,` $indices attr-dict `:` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($random_samples) `,` type($output) `,` type($indices) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $output_size `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $output_size `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool3DOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    random_samples = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $output_size `,` $random_samples attr-dict `:` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($random_samples) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool3DOutputOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool3d.output"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    random_samples = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $output_size `,` $random_samples `,` $output `,` $indices attr-dict `:` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($random_samples) `,` type($output) `,` type($indices) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFrexpOp(IRDLOperation):
    name = "torch.aten.frexp"
    a = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(Float64Type))
    result1 = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFrexpTensorOp(IRDLOperation):
    name = "torch.aten.frexp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_AtenFusedMovingAvgObsFakeQuantOp(IRDLOperation):
    name = "torch.aten.fused_moving_avg_obs_fake_quant"
    self = operand_def(BaseAttr(TensorType))
    observer_on = operand_def(BaseAttr(TensorType))
    fake_quant_on = operand_def(BaseAttr(TensorType))
    running_min = operand_def(BaseAttr(TensorType))
    running_max = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    averaging_const = operand_def(BaseAttr(Float64Type))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    ch_axis = operand_def(BaseAttr(IntegerType))
    per_row_fake_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    symmetric_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $observer_on `,` $fake_quant_on `,` $running_min `,` $running_max `,` $scale `,` $zero_point `,` $averaging_const `,` $quant_min `,` $quant_max `,` $ch_axis `,` $per_row_fake_quant `,` $symmetric_quant attr-dict `:` type($self) `,` type($observer_on) `,` type($fake_quant_on) `,` type($running_min) `,` type($running_max) `,` type($scale) `,` type($zero_point) `,` type($averaging_const) `,` type($quant_min) `,` type($quant_max) `,` type($ch_axis) `,` type($per_row_fake_quant) `,` type($symmetric_quant) `->` type($result)"


@irdl_op_definition
class Torch_AtenGatherBackwardOp(IRDLOperation):
    name = "torch.aten.gather_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($grad) `,` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGatherOp(IRDLOperation):
    name = "torch.aten.gather"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdIntOp(IRDLOperation):
    name = "torch.aten.gcd.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdOp(IRDLOperation):
    name = "torch.aten.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGcd_Op(IRDLOperation):
    name = "torch.aten.gcd_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeFloatIntOp(IRDLOperation):
    name = "torch.aten.ge.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeFloatOp(IRDLOperation):
    name = "torch.aten.ge.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntFloatOp(IRDLOperation):
    name = "torch.aten.ge.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntOp(IRDLOperation):
    name = "torch.aten.ge.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeOp(IRDLOperation):
    name = "torch.aten.ge"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeScalarOp(IRDLOperation):
    name = "torch.aten.ge.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeScalarOutOp(IRDLOperation):
    name = "torch.aten.ge.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeTensorOp(IRDLOperation):
    name = "torch.aten.ge.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeTensorOutOp(IRDLOperation):
    name = "torch.aten.ge.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGe_ScalarOp(IRDLOperation):
    name = "torch.aten.ge_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGe_TensorOp(IRDLOperation):
    name = "torch.aten.ge_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeqrfOp(IRDLOperation):
    name = "torch.aten.geqrf"
    self = operand_def(BaseAttr(TensorType))
    a = result_def(BaseAttr(TensorType))
    tau = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($a) `,` type($tau)"


@irdl_op_definition
class Torch_AtenGerOp(IRDLOperation):
    name = "torch.aten.ger"
    self = operand_def(BaseAttr(TensorType))
    vec2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $vec2 attr-dict `:` type($self) `,` type($vec2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.glu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluBackwardJvpOp(IRDLOperation):
    name = "torch.aten.glu_backward_jvp"
    grad_x = operand_def(BaseAttr(TensorType))
    grad_glu = operand_def(BaseAttr(TensorType))
    x = operand_def(BaseAttr(TensorType))
    dgrad_glu = operand_def(BaseAttr(TensorType))
    dx = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_x `,` $grad_glu `,` $x `,` $dgrad_glu `,` $dx `,` $dim attr-dict `:` type($grad_x) `,` type($grad_glu) `,` type($x) `,` type($dgrad_glu) `,` type($dx) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluBackwardOp(IRDLOperation):
    name = "torch.aten.glu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluJvpOp(IRDLOperation):
    name = "torch.aten.glu_jvp"
    glu = operand_def(BaseAttr(TensorType))
    x = operand_def(BaseAttr(TensorType))
    dx = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$glu `,` $x `,` $dx `,` $dim attr-dict `:` type($glu) `,` type($x) `,` type($dx) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluOp(IRDLOperation):
    name = "torch.aten.glu"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqualScalarOp(IRDLOperation):
    name = "torch.aten.greater_equal.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqualScalarOutOp(IRDLOperation):
    name = "torch.aten.greater_equal.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGreaterEqualTensorOp(IRDLOperation):
    name = "torch.aten.greater_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqualTensorOutOp(IRDLOperation):
    name = "torch.aten.greater_equal.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGreaterEqual_ScalarOp(IRDLOperation):
    name = "torch.aten.greater_equal_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqual_TensorOp(IRDLOperation):
    name = "torch.aten.greater_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterScalarOp(IRDLOperation):
    name = "torch.aten.greater.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterScalarOutOp(IRDLOperation):
    name = "torch.aten.greater.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGreaterTensorOp(IRDLOperation):
    name = "torch.aten.greater.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterTensorOutOp(IRDLOperation):
    name = "torch.aten.greater.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGreater_ScalarOp(IRDLOperation):
    name = "torch.aten.greater_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreater_TensorOp(IRDLOperation):
    name = "torch.aten.greater_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGridSampler2DBackwardOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `,` type($output_mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGridSampler2DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGridSampler3DBackwardOp(IRDLOperation):
    name = "torch.aten.grid_sampler_3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `,` type($output_mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGridSampler3DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_3d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGridSamplerOp(IRDLOperation):
    name = "torch.aten.grid_sampler"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGroupNormOp(IRDLOperation):
    name = "torch.aten.group_norm"
    input = operand_def(BaseAttr(TensorType))
    num_groups = operand_def(BaseAttr(IntegerType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $num_groups `,` $weight `,` $bias `,` $eps `,` $cudnn_enabled attr-dict `:` type($input) `,` type($num_groups) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($cudnn_enabled) `->` type($result)"


@irdl_op_definition
class Torch_AtenGruCellOp(IRDLOperation):
    name = "torch.aten.gru_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    b_hh = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenGruDataOp(IRDLOperation):
    name = "torch.aten.gru.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGruInputOp(IRDLOperation):
    name = "torch.aten.gru.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGtFloatIntOp(IRDLOperation):
    name = "torch.aten.gt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtFloatOp(IRDLOperation):
    name = "torch.aten.gt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntFloatOp(IRDLOperation):
    name = "torch.aten.gt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntOp(IRDLOperation):
    name = "torch.aten.gt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtOp(IRDLOperation):
    name = "torch.aten.gt"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtScalarOp(IRDLOperation):
    name = "torch.aten.gt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGtScalarOutOp(IRDLOperation):
    name = "torch.aten.gt.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtTensorOp(IRDLOperation):
    name = "torch.aten.gt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGtTensorOutOp(IRDLOperation):
    name = "torch.aten.gt.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenGt_ScalarOp(IRDLOperation):
    name = "torch.aten.gt_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGt_TensorOp(IRDLOperation):
    name = "torch.aten.gt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHammingWindowPeriodicAlphaBetaOutOp(IRDLOperation):
    name = "torch.aten.hamming_window.periodic_alpha_beta_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    alpha = operand_def(BaseAttr(Float64Type))
    beta = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $alpha `,` $beta `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($alpha) `,` type($beta) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenHammingWindowPeriodicAlphaOutOp(IRDLOperation):
    name = "torch.aten.hamming_window.periodic_alpha_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    alpha = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $alpha `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenHammingWindowPeriodicOutOp(IRDLOperation):
    name = "torch.aten.hamming_window.periodic_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenHannWindowPeriodicOutOp(IRDLOperation):
    name = "torch.aten.hann_window.periodic_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardshrinkBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.hardshrink_backward.grad_input"
    grad_out = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $self `,` $lambd `,` $grad_input attr-dict `:` type($grad_out) `,` type($self) `,` type($lambd) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardshrinkBackwardOp(IRDLOperation):
    name = "torch.aten.hardshrink_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $self `,` $lambd attr-dict `:` type($grad_out) `,` type($self) `,` type($lambd) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardshrinkOp(IRDLOperation):
    name = "torch.aten.hardshrink"
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $lambd attr-dict `:` type($self) `,` type($lambd) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidOp(IRDLOperation):
    name = "torch.aten.hardsigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoid_Op(IRDLOperation):
    name = "torch.aten.hardsigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishBackwardOp(IRDLOperation):
    name = "torch.aten.hardswish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishOp(IRDLOperation):
    name = "torch.aten.hardswish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswish_Op(IRDLOperation):
    name = "torch.aten.hardswish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardtanhBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.hardtanh_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $min_val `,` $max_val `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($min_val) `,` type($max_val) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardtanhBackwardOp(IRDLOperation):
    name = "torch.aten.hardtanh_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $min_val `,` $max_val attr-dict `:` type($grad_output) `,` type($self) `,` type($min_val) `,` type($max_val) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardtanhOp(IRDLOperation):
    name = "torch.aten.hardtanh"
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min_val `,` $max_val attr-dict `:` type($self) `,` type($min_val) `,` type($max_val) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardtanh_Op(IRDLOperation):
    name = "torch.aten.hardtanh_"
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min_val `,` $max_val attr-dict `:` type($self) `,` type($min_val) `,` type($max_val) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeavisideOp(IRDLOperation):
    name = "torch.aten.heaviside"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeaviside_Op(IRDLOperation):
    name = "torch.aten.heaviside_"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHingeEmbeddingLossOp(IRDLOperation):
    name = "torch.aten.hinge_embedding_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $margin `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenHistcOp(IRDLOperation):
    name = "torch.aten.histc"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(BaseAttr(IntegerType))
    min = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $bins `,` $min `,` $max attr-dict `:` type($self) `,` type($bins) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenHistogramddIntBinsOp(IRDLOperation):
    name = "torch.aten.histogramdd.int_bins"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(BaseAttr(IntegerType))
    range = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    hist = result_def(BaseAttr(TensorType))
    bin_edges = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $bins `,` $range `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($range) `,` type($weight) `,` type($density) `->` type($hist) `,` type($bin_edges)"


@irdl_op_definition
class Torch_AtenHistogramddOp(IRDLOperation):
    name = "torch.aten.histogramdd"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    range = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    hist = result_def(BaseAttr(TensorType))
    bin_edges = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $bins `,` $range `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($range) `,` type($weight) `,` type($density) `->` type($hist) `,` type($bin_edges)"


@irdl_op_definition
class Torch_AtenHistogramddTensorlistBinsOp(IRDLOperation):
    name = "torch.aten.histogramdd.TensorList_bins"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    range = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    hist = result_def(BaseAttr(TensorType))
    bin_edges = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $bins `,` $range `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($range) `,` type($weight) `,` type($density) `->` type($hist) `,` type($bin_edges)"


@irdl_op_definition
class Torch_AtenHspmmOp(IRDLOperation):
    name = "torch.aten.hspmm"
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$mat1 `,` $mat2 attr-dict `:` type($mat1) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHstackOp(IRDLOperation):
    name = "torch.aten.hstack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossBackwardOp(IRDLOperation):
    name = "torch.aten.huber_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $delta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossOp(IRDLOperation):
    name = "torch.aten.huber_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $delta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHypotOp(IRDLOperation):
    name = "torch.aten.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHypot_Op(IRDLOperation):
    name = "torch.aten.hypot_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenI0Op(IRDLOperation):
    name = "torch.aten.i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenI0_Op(IRDLOperation):
    name = "torch.aten.i0_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIgammaOp(IRDLOperation):
    name = "torch.aten.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgamma_Op(IRDLOperation):
    name = "torch.aten.igamma_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammacOp(IRDLOperation):
    name = "torch.aten.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammac_Op(IRDLOperation):
    name = "torch.aten.igammac_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIm2ColOp(IRDLOperation):
    name = "torch.aten.im2col"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenImagOp(IRDLOperation):
    name = "torch.aten.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexAddOp(IRDLOperation):
    name = "torch.aten.index_add"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source `,` $alpha attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexAdd_Op(IRDLOperation):
    name = "torch.aten.index_add_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source `,` $alpha attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopyOp(IRDLOperation):
    name = "torch.aten.index_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopy_Op(IRDLOperation):
    name = "torch.aten.index_copy_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntScalarOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Scalar"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntScalarOutOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntTensorOutOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFill_IntScalarOp(IRDLOperation):
    name = "torch.aten.index_fill_.int_Scalar"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFill_IntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill_.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexListBoolOp(IRDLOperation):
    name = "torch.aten.index.list_bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    el = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListFloatOp(IRDLOperation):
    name = "torch.aten.index.list_float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    el = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListIntOp(IRDLOperation):
    name = "torch.aten.index.list_int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    el = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListTensorOp(IRDLOperation):
    name = "torch.aten.index.list_Tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    el = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexPutHackedTwinOp(IRDLOperation):
    name = "torch.aten.index_put.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexPut_HackedTwinOp(IRDLOperation):
    name = "torch.aten.index_put_.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectBackwardOp(IRDLOperation):
    name = "torch.aten.index_select_backward"
    grad = operand_def(BaseAttr(TensorType))
    self_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self_sizes `,` $dim `,` $index attr-dict `:` type($grad) `,` type($self_sizes) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectOp(IRDLOperation):
    name = "torch.aten.index_select"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexTensorHackedTwinOp(IRDLOperation):
    name = "torch.aten.index.Tensor_hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices attr-dict `:` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndicesCopyOp(IRDLOperation):
    name = "torch.aten.indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndicesOp(IRDLOperation):
    name = "torch.aten.indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenInfinitelyDifferentiableGeluBackwardOp(IRDLOperation):
    name = "torch.aten.infinitely_differentiable_gelu_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$grad `,` $self attr-dict `:` type($grad) `,` type($self) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenInnerOp(IRDLOperation):
    name = "torch.aten.inner"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenInstanceNormOp(IRDLOperation):
    name = "torch.aten.instance_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    use_input_stats = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $use_input_stats `,` $momentum `,` $eps `,` $cudnn_enabled attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($use_input_stats) `,` type($momentum) `,` type($eps) `,` type($cudnn_enabled) `->` type($result)"


@irdl_op_definition
class Torch_AtenIntReprOp(IRDLOperation):
    name = "torch.aten.int_repr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenInverseOp(IRDLOperation):
    name = "torch.aten.inverse"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsCoalescedOp(IRDLOperation):
    name = "torch.aten.is_coalesced"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsComplexOp(IRDLOperation):
    name = "torch.aten.is_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsConjOp(IRDLOperation):
    name = "torch.aten.is_conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousMemoryFormatOp(IRDLOperation):
    name = "torch.aten.is_contiguous.memory_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousOp(IRDLOperation):
    name = "torch.aten.is_contiguous"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsDistributedOp(IRDLOperation):
    name = "torch.aten.is_distributed"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsFloatingPointOp(IRDLOperation):
    name = "torch.aten.is_floating_point"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsInferenceOp(IRDLOperation):
    name = "torch.aten.is_inference"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsLeafOp(IRDLOperation):
    name = "torch.aten.is_leaf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsNegOp(IRDLOperation):
    name = "torch.aten.is_neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsNonOverlappingAndDenseOp(IRDLOperation):
    name = "torch.aten.is_non_overlapping_and_dense"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsNonzeroOp(IRDLOperation):
    name = "torch.aten.is_nonzero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsSameSizeOp(IRDLOperation):
    name = "torch.aten.is_same_size"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIsSetToOp(IRDLOperation):
    name = "torch.aten.is_set_to"
    self = operand_def(BaseAttr(TensorType))
    tensor = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $tensor attr-dict `:` type($self) `,` type($tensor) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsSignedOp(IRDLOperation):
    name = "torch.aten.is_signed"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsStridesLikeFormatOp(IRDLOperation):
    name = "torch.aten.is_strides_like_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsVulkanAvailableOp(IRDLOperation):
    name = "torch.aten.is_vulkan_available"
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_AtenIscloseOp(IRDLOperation):
    name = "torch.aten.isclose"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    rtol = operand_def(BaseAttr(Float64Type))
    atol = operand_def(BaseAttr(Float64Type))
    equal_nan = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $rtol `,` $atol `,` $equal_nan attr-dict `:` type($self) `,` type($other) `,` type($rtol) `,` type($atol) `,` type($equal_nan) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteFloatOp(IRDLOperation):
    name = "torch.aten.isfinite.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteOp(IRDLOperation):
    name = "torch.aten.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinScalarTensorOp(IRDLOperation):
    name = "torch.aten.isin.Scalar_Tensor"
    element = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$element `,` $test_elements `,` $assume_unique `,` $invert attr-dict `:` type($element) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.isin.Scalar_Tensor_out"
    element = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$element `,` $test_elements `,` $assume_unique `,` $invert `,` $out attr-dict `:` type($element) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorScalarOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Scalar"
    elements = operand_def(BaseAttr(TensorType))
    test_element = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_element `,` $assume_unique `,` $invert attr-dict `:` type($elements) `,` type($test_element) `,` type($assume_unique) `,` type($invert) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Scalar_out"
    elements = operand_def(BaseAttr(TensorType))
    test_element = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_element `,` $assume_unique `,` $invert `,` $out attr-dict `:` type($elements) `,` type($test_element) `,` type($assume_unique) `,` type($invert) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorTensorOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Tensor"
    elements = operand_def(BaseAttr(TensorType))
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_elements `,` $assume_unique `,` $invert attr-dict `:` type($elements) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorTensorOutOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Tensor_out"
    elements = operand_def(BaseAttr(TensorType))
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_elements `,` $assume_unique `,` $invert `,` $out attr-dict `:` type($elements) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfFloatOp(IRDLOperation):
    name = "torch.aten.isinf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfOp(IRDLOperation):
    name = "torch.aten.isinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanFloatOp(IRDLOperation):
    name = "torch.aten.isnan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanOp(IRDLOperation):
    name = "torch.aten.isnan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsneginfOp(IRDLOperation):
    name = "torch.aten.isneginf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsposinfOp(IRDLOperation):
    name = "torch.aten.isposinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsrealOp(IRDLOperation):
    name = "torch.aten.isreal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIstftOp(IRDLOperation):
    name = "torch.aten.istft"
    self = operand_def(BaseAttr(TensorType))
    n_fft = operand_def(BaseAttr(IntegerType))
    hop_length = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    win_length = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    center = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    normalized = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    onesided = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    length = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    return_complex = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $n_fft `,` $hop_length `,` $win_length `,` $window `,` $center `,` $normalized `,` $onesided `,` $length `,` $return_complex attr-dict `:` type($self) `,` type($n_fft) `,` type($hop_length) `,` type($win_length) `,` type($window) `,` type($center) `,` type($normalized) `,` type($onesided) `,` type($length) `,` type($return_complex) `->` type($result)"


@irdl_op_definition
class Torch_AtenItemOp(IRDLOperation):
    name = "torch.aten.item"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenKaiserWindowBetaOutOp(IRDLOperation):
    name = "torch.aten.kaiser_window.beta_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    beta = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $beta `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($beta) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenKaiserWindowPeriodicOutOp(IRDLOperation):
    name = "torch.aten.kaiser_window.periodic_out"
    window_length = operand_def(BaseAttr(IntegerType))
    periodic = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$window_length `,` $periodic `,` $out attr-dict `:` type($window_length) `,` type($periodic) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenKlDivOp(IRDLOperation):
    name = "torch.aten.kl_div"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    log_target = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $log_target attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($log_target) `->` type($result)"


@irdl_op_definition
class Torch_AtenKronOp(IRDLOperation):
    name = "torch.aten.kron"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenKthvalueOp(IRDLOperation):
    name = "torch.aten.kthvalue"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenL1LossOp(IRDLOperation):
    name = "torch.aten.l1_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenLayerNormOp(IRDLOperation):
    name = "torch.aten.layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    cudnn_enable = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps `,` $cudnn_enable attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($cudnn_enable) `->` type($result)"


@irdl_op_definition
class Torch_AtenLcmOp(IRDLOperation):
    name = "torch.aten.lcm"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLcm_Op(IRDLOperation):
    name = "torch.aten.lcm_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLdexp_Op(IRDLOperation):
    name = "torch.aten.ldexp_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeFloatIntOp(IRDLOperation):
    name = "torch.aten.le.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeFloatOp(IRDLOperation):
    name = "torch.aten.le.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntFloatOp(IRDLOperation):
    name = "torch.aten.le.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntOp(IRDLOperation):
    name = "torch.aten.le.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeOp(IRDLOperation):
    name = "torch.aten.le"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeScalarOp(IRDLOperation):
    name = "torch.aten.le.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeScalarOutOp(IRDLOperation):
    name = "torch.aten.le.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeTensorOp(IRDLOperation):
    name = "torch.aten.le.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeTensorOutOp(IRDLOperation):
    name = "torch.aten.le.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLe_ScalarOp(IRDLOperation):
    name = "torch.aten.le_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLe_TensorOp(IRDLOperation):
    name = "torch.aten.le_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeakyReluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.leaky_relu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    self_is_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $negative_slope `,` $self_is_result `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($negative_slope) `,` type($self_is_result) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeakyReluBackwardOp(IRDLOperation):
    name = "torch.aten.leaky_relu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    self_is_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $negative_slope `,` $self_is_result attr-dict `:` type($grad_output) `,` type($self) `,` type($negative_slope) `,` type($self_is_result) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeakyReluOp(IRDLOperation):
    name = "torch.aten.leaky_relu"
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $negative_slope attr-dict `:` type($self) `,` type($negative_slope) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeakyRelu_Op(IRDLOperation):
    name = "torch.aten.leaky_relu_"
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $negative_slope attr-dict `:` type($self) `,` type($negative_slope) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerpScalarOp(IRDLOperation):
    name = "torch.aten.lerp.Scalar"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerpScalarOutOp(IRDLOperation):
    name = "torch.aten.lerp.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight `,` $out attr-dict `:` type($self) `,` type($end) `,` type($weight) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerpTensorOp(IRDLOperation):
    name = "torch.aten.lerp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerpTensorOutOp(IRDLOperation):
    name = "torch.aten.lerp.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight `,` $out attr-dict `:` type($self) `,` type($end) `,` type($weight) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerp_ScalarOp(IRDLOperation):
    name = "torch.aten.lerp_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerp_TensorOp(IRDLOperation):
    name = "torch.aten.lerp_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessEqualScalarOp(IRDLOperation):
    name = "torch.aten.less_equal.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessEqualScalarOutOp(IRDLOperation):
    name = "torch.aten.less_equal.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessEqualTensorOp(IRDLOperation):
    name = "torch.aten.less_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessEqualTensorOutOp(IRDLOperation):
    name = "torch.aten.less_equal.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessEqual_ScalarOp(IRDLOperation):
    name = "torch.aten.less_equal_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessEqual_TensorOp(IRDLOperation):
    name = "torch.aten.less_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessScalarOp(IRDLOperation):
    name = "torch.aten.less.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessScalarOutOp(IRDLOperation):
    name = "torch.aten.less.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessTensorOp(IRDLOperation):
    name = "torch.aten.less.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessTensorOutOp(IRDLOperation):
    name = "torch.aten.less.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLess_ScalarOp(IRDLOperation):
    name = "torch.aten.less_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLess_TensorOp(IRDLOperation):
    name = "torch.aten.less_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLgammaFloatOp(IRDLOperation):
    name = "torch.aten.lgamma.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaIntOp(IRDLOperation):
    name = "torch.aten.lgamma.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaOp(IRDLOperation):
    name = "torch.aten.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaScalarOp(IRDLOperation):
    name = "torch.aten.lgamma.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgamma_Op(IRDLOperation):
    name = "torch.aten.lgamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshCopyOp(IRDLOperation):
    name = "torch.aten.lift_fresh_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshOp(IRDLOperation):
    name = "torch.aten.lift_fresh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftOp(IRDLOperation):
    name = "torch.aten.lift"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgCholeskyExOp(IRDLOperation):
    name = "torch.aten.linalg_cholesky_ex"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    L = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upper `,` $check_errors attr-dict `:` type($self) `,` type($upper) `,` type($check_errors) `->` type($L) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgCholeskyOp(IRDLOperation):
    name = "torch.aten.linalg_cholesky"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgCondOp(IRDLOperation):
    name = "torch.aten.linalg_cond"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgCrossOp(IRDLOperation):
    name = "torch.aten.linalg_cross"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dim attr-dict `:` type($self) `,` type($other) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgDetOp(IRDLOperation):
    name = "torch.aten.linalg_det"
    A = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgDiagonalOp(IRDLOperation):
    name = "torch.aten.linalg_diagonal"
    A = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($A) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgEigOp(IRDLOperation):
    name = "torch.aten.linalg_eig"
    self = operand_def(BaseAttr(TensorType))
    eigenvalues = result_def(BaseAttr(TensorType))
    eigenvectors = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($eigenvalues) `,` type($eigenvectors)"


@irdl_op_definition
class Torch_AtenLinalgEigvalsOp(IRDLOperation):
    name = "torch.aten.linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgHouseholderProductOp(IRDLOperation):
    name = "torch.aten.linalg_householder_product"
    input = operand_def(BaseAttr(TensorType))
    tau = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$input `,` $tau attr-dict `:` type($input) `,` type($tau) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgInvExOp(IRDLOperation):
    name = "torch.aten.linalg_inv_ex"
    A = operand_def(BaseAttr(TensorType))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    inverse = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $check_errors attr-dict `:` type($A) `,` type($check_errors) `->` type($inverse) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgInvOp(IRDLOperation):
    name = "torch.aten.linalg_inv"
    A = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgLdlFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_factor_ex"
    self = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LD = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $hermitian `,` $check_errors attr-dict `:` type($self) `,` type($hermitian) `,` type($check_errors) `->` type($LD) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLdlFactorOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_factor"
    self = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    LD = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $hermitian attr-dict `:` type($self) `,` type($hermitian) `->` type($LD) `,` type($pivots)"


@irdl_op_definition
class Torch_AtenLinalgLdlSolveOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_solve"
    LD = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LD `,` $pivots `,` $B `,` $hermitian attr-dict `:` type($LD) `,` type($pivots) `,` type($B) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgLuFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_lu_factor_ex"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot `,` $check_errors attr-dict `:` type($A) `,` type($pivot) `,` type($check_errors) `->` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLuFactorOp(IRDLOperation):
    name = "torch.aten.linalg_lu_factor"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot attr-dict `:` type($A) `,` type($pivot) `->` type($LU) `,` type($pivots)"


@irdl_op_definition
class Torch_AtenLinalgLuOp(IRDLOperation):
    name = "torch.aten.linalg_lu"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot attr-dict `:` type($A) `,` type($pivot) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenLinalgLuSolveOp(IRDLOperation):
    name = "torch.aten.linalg_lu_solve"
    LU = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    adjoint = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LU `,` $pivots `,` $B `,` $left `,` $adjoint attr-dict `:` type($LU) `,` type($pivots) `,` type($B) `,` type($left) `,` type($adjoint) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatmulOp(IRDLOperation):
    name = "torch.aten.linalg_matmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgMatrixExpOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixNormOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_norm"
    self = operand_def(BaseAttr(TensorType))
    ord = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $ord `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($ord) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixPowerOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_power"
    self = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $n attr-dict `:` type($self) `,` type($n) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgMatrixRankAtolRtolFloatOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.atol_rtol_float"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankAtolRtolFloatOutOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.atol_rtol_float_out"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian `,` $out attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankAtolRtolTensorOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.atol_rtol_tensor"
    input = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $atol `,` $rtol `,` $hermitian attr-dict `:` type($input) `,` type($atol) `,` type($rtol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankAtolRtolTensorOutOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.atol_rtol_tensor_out"
    input = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $atol `,` $rtol `,` $hermitian `,` $out attr-dict `:` type($input) `,` type($atol) `,` type($rtol) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank"
    self = operand_def(BaseAttr(TensorType))
    tol = operand_def(BaseAttr(Float64Type))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tol `,` $hermitian attr-dict `:` type($self) `,` type($tol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankOutTolTensorOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.out_tol_tensor"
    input = operand_def(BaseAttr(TensorType))
    tol = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $tol `,` $hermitian `,` $out attr-dict `:` type($input) `,` type($tol) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixRankTolTensorOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_rank.tol_tensor"
    input = operand_def(BaseAttr(TensorType))
    tol = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $tol `,` $hermitian attr-dict `:` type($input) `,` type($tol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMultiDotOp(IRDLOperation):
    name = "torch.aten.linalg_multi_dot"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgNormOp(IRDLOperation):
    name = "torch.aten.linalg_norm"
    self = operand_def(BaseAttr(TensorType))
    ord = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $ord `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($ord) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvAtolRtolFloatOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.atol_rtol_float"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvAtolRtolFloatOutOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.atol_rtol_float_out"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian `,` $out attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvAtolRtolTensorOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.atol_rtol_tensor"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvAtolRtolTensorOutOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.atol_rtol_tensor_out"
    self = operand_def(BaseAttr(TensorType))
    atol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    rtol = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $atol `,` $rtol `,` $hermitian `,` $out attr-dict `:` type($self) `,` type($atol) `,` type($rtol) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvOp(IRDLOperation):
    name = "torch.aten.linalg_pinv"
    self = operand_def(BaseAttr(TensorType))
    rcond = operand_def(BaseAttr(Float64Type))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $rcond `,` $hermitian attr-dict `:` type($self) `,` type($rcond) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvOutRcondTensorOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.out_rcond_tensor"
    self = operand_def(BaseAttr(TensorType))
    rcond = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $rcond `,` $hermitian `,` $out attr-dict `:` type($self) `,` type($rcond) `,` type($hermitian) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgPinvRcondTensorOp(IRDLOperation):
    name = "torch.aten.linalg_pinv.rcond_tensor"
    self = operand_def(BaseAttr(TensorType))
    rcond = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $rcond `,` $hermitian attr-dict `:` type($self) `,` type($rcond) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgSlogdetOp(IRDLOperation):
    name = "torch.aten.linalg_slogdet"
    A = operand_def(BaseAttr(TensorType))
    sign = result_def(BaseAttr(TensorType))
    logabsdet = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($sign) `,` type($logabsdet)"


@irdl_op_definition
class Torch_AtenLinalgSolveExOp(IRDLOperation):
    name = "torch.aten.linalg_solve_ex"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left `,` $check_errors attr-dict `:` type($A) `,` type($B) `,` type($left) `,` type($check_errors) `->` type($result) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgSolveOp(IRDLOperation):
    name = "torch.aten.linalg_solve"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left attr-dict `:` type($A) `,` type($B) `,` type($left) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgSolveTriangularOp(IRDLOperation):
    name = "torch.aten.linalg_solve_triangular"
    self = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $B `,` $upper `,` $left `,` $unitriangular attr-dict `:` type($self) `,` type($B) `,` type($upper) `,` type($left) `,` type($unitriangular) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgTensorinvOp(IRDLOperation):
    name = "torch.aten.linalg_tensorinv"
    self = operand_def(BaseAttr(TensorType))
    ind = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $ind attr-dict `:` type($self) `,` type($ind) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgTensorsolveOp(IRDLOperation):
    name = "torch.aten.linalg_tensorsolve"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dims attr-dict `:` type($self) `,` type($other) `,` type($dims) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgVanderOp(IRDLOperation):
    name = "torch.aten.linalg_vander"
    x = operand_def(BaseAttr(TensorType))
    N = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $N attr-dict `:` type($x) `,` type($N) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgVecdotOp(IRDLOperation):
    name = "torch.aten.linalg_vecdot"
    x = operand_def(BaseAttr(TensorType))
    y = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $y `,` $dim attr-dict `:` type($x) `,` type($y) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgVectorNormOp(IRDLOperation):
    name = "torch.aten.linalg_vector_norm"
    self = operand_def(BaseAttr(TensorType))
    ord = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $ord `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($ord) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinearBackwardOp(IRDLOperation):
    name = "torch.aten.linear_backward"
    self = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grad_output `,` $weight `,` $output_mask attr-dict `:` type($self) `,` type($grad_output) `,` type($weight) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLinearOp(IRDLOperation):
    name = "torch.aten.linear"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias attr-dict `:` type($input) `,` type($weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinspaceScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.linspace.Scalar_Tensor_out"
    start = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    end = operand_def(BaseAttr(TensorType))
    steps = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinspaceTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.linspace.Tensor_Scalar_out"
    start = operand_def(BaseAttr(TensorType))
    end = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    steps = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinspaceTensorTensorOutOp(IRDLOperation):
    name = "torch.aten.linspace.Tensor_Tensor_out"
    start = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    steps = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10FloatOp(IRDLOperation):
    name = "torch.aten.log10.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10IntOp(IRDLOperation):
    name = "torch.aten.log10.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10Op(IRDLOperation):
    name = "torch.aten.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10ScalarOp(IRDLOperation):
    name = "torch.aten.log10.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10_Op(IRDLOperation):
    name = "torch.aten.log10_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PFloatOp(IRDLOperation):
    name = "torch.aten.log1p.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PIntOp(IRDLOperation):
    name = "torch.aten.log1p.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1POp(IRDLOperation):
    name = "torch.aten.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PScalarOp(IRDLOperation):
    name = "torch.aten.log1p.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1P_Op(IRDLOperation):
    name = "torch.aten.log1p_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2Op(IRDLOperation):
    name = "torch.aten.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2_Op(IRDLOperation):
    name = "torch.aten.log2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatFloatOp(IRDLOperation):
    name = "torch.aten.log.float_float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatIntOp(IRDLOperation):
    name = "torch.aten.log.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatOp(IRDLOperation):
    name = "torch.aten.log.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntFloatOp(IRDLOperation):
    name = "torch.aten.log.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntIntOp(IRDLOperation):
    name = "torch.aten.log.int_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntOp(IRDLOperation):
    name = "torch.aten.log.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogOp(IRDLOperation):
    name = "torch.aten.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogScalarOp(IRDLOperation):
    name = "torch.aten.log.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogScalarScalarOp(IRDLOperation):
    name = "torch.aten.log.Scalar_Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidForwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_forward"
    self = operand_def(BaseAttr(TensorType))
    output = result_def(BaseAttr(TensorType))
    buffer = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($output) `,` type($buffer)"
    )


@irdl_op_definition
class Torch_AtenLogSigmoidForwardOutputOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_forward.output"
    self = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output `,` $buffer attr-dict `:` type($self) `,` type($output) `,` type($buffer) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenLogSigmoidOp(IRDLOperation):
    name = "torch.aten.log_sigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog_Op(IRDLOperation):
    name = "torch.aten.log_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogaddexp2Op(IRDLOperation):
    name = "torch.aten.logaddexp2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogaddexpOp(IRDLOperation):
    name = "torch.aten.logaddexp"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogcumsumexpOp(IRDLOperation):
    name = "torch.aten.logcumsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogdetOp(IRDLOperation):
    name = "torch.aten.logdet"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalAndOp(IRDLOperation):
    name = "torch.aten.logical_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalAnd_Op(IRDLOperation):
    name = "torch.aten.logical_and_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalNotOp(IRDLOperation):
    name = "torch.aten.logical_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalNot_Op(IRDLOperation):
    name = "torch.aten.logical_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalOrOp(IRDLOperation):
    name = "torch.aten.logical_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalOr_Op(IRDLOperation):
    name = "torch.aten.logical_or_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXorOp(IRDLOperation):
    name = "torch.aten.logical_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXor_Op(IRDLOperation):
    name = "torch.aten.logical_xor_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogitBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.logit_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $eps `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($eps) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogitBackwardOp(IRDLOperation):
    name = "torch.aten.logit_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $eps attr-dict `:` type($grad_output) `,` type($self) `,` type($eps) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogitOp(IRDLOperation):
    name = "torch.aten.logit"
    self = operand_def(BaseAttr(TensorType))
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $eps attr-dict `:` type($self) `,` type($eps) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogit_Op(IRDLOperation):
    name = "torch.aten.logit_"
    self = operand_def(BaseAttr(TensorType))
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $eps attr-dict `:` type($self) `,` type($eps) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogspaceScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.logspace.Scalar_Tensor_out"
    start = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    end = operand_def(BaseAttr(TensorType))
    steps = operand_def(BaseAttr(IntegerType))
    base = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $base `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($base) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogspaceTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.logspace.Tensor_Scalar_out"
    start = operand_def(BaseAttr(TensorType))
    end = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    steps = operand_def(BaseAttr(IntegerType))
    base = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $base `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($base) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogspaceTensorTensorOutOp(IRDLOperation):
    name = "torch.aten.logspace.Tensor_Tensor_out"
    start = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    steps = operand_def(BaseAttr(IntegerType))
    base = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $steps `,` $base `,` $out attr-dict `:` type($start) `,` type($end) `,` type($steps) `,` type($base) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogsumexpOp(IRDLOperation):
    name = "torch.aten.logsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLstmCellOp(IRDLOperation):
    name = "torch.aten.lstm_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    b_hh = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenLstmDataOp(IRDLOperation):
    name = "torch.aten.lstm.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLstmInputOp(IRDLOperation):
    name = "torch.aten.lstm.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLstmMpsBackwardOp(IRDLOperation):
    name = "torch.aten.lstm_mps_backward"
    grad_y = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    z_state = operand_def(BaseAttr(TensorType))
    cell_state_fwd = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    layersOutputs = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result2 = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$grad_y `,` $grad_hy `,` $grad_cy `,` $z_state `,` $cell_state_fwd `,` $input `,` $layersOutputs `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($grad_y) `,` type($grad_hy) `,` type($grad_cy) `,` type($z_state) `,` type($cell_state_fwd) `,` type($input) `,` type($layersOutputs) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLtFloatIntOp(IRDLOperation):
    name = "torch.aten.lt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtFloatOp(IRDLOperation):
    name = "torch.aten.lt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntFloatOp(IRDLOperation):
    name = "torch.aten.lt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntOp(IRDLOperation):
    name = "torch.aten.lt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtOp(IRDLOperation):
    name = "torch.aten.lt"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtScalarOp(IRDLOperation):
    name = "torch.aten.lt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtScalarOutOp(IRDLOperation):
    name = "torch.aten.lt.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtTensorOp(IRDLOperation):
    name = "torch.aten.lt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtTensorOutOp(IRDLOperation):
    name = "torch.aten.lt.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenLt_ScalarOp(IRDLOperation):
    name = "torch.aten.lt_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLt_TensorOp(IRDLOperation):
    name = "torch.aten.lt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLuSolveOp(IRDLOperation):
    name = "torch.aten.lu_solve"
    self = operand_def(BaseAttr(TensorType))
    LU_data = operand_def(BaseAttr(TensorType))
    LU_pivots = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $LU_data `,` $LU_pivots attr-dict `:` type($self) `,` type($LU_data) `,` type($LU_pivots) `->` type($result)"


@irdl_op_definition
class Torch_AtenLuUnpackOp(IRDLOperation):
    name = "torch.aten.lu_unpack"
    LU_data = operand_def(BaseAttr(TensorType))
    LU_pivots = operand_def(BaseAttr(TensorType))
    unpack_data = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    unpack_pivots = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$LU_data `,` $LU_pivots `,` $unpack_data `,` $unpack_pivots attr-dict `:` type($LU_data) `,` type($LU_pivots) `,` type($unpack_data) `,` type($unpack_pivots) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenMarginRankingLossOp(IRDLOperation):
    name = "torch.aten.margin_ranking_loss"
    input1 = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input1 `,` $input2 `,` $target `,` $margin `,` $reduction attr-dict `:` type($input1) `,` type($input2) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillScalarOp(IRDLOperation):
    name = "torch.aten.masked_fill.Scalar"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillScalarOutOp(IRDLOperation):
    name = "torch.aten.masked_fill.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value `,` $out attr-dict `:` type($self) `,` type($mask) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillTensorOp(IRDLOperation):
    name = "torch.aten.masked_fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillTensorOutOp(IRDLOperation):
    name = "torch.aten.masked_fill.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value `,` $out attr-dict `:` type($self) `,` type($mask) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFill_ScalarOp(IRDLOperation):
    name = "torch.aten.masked_fill_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFill_TensorOp(IRDLOperation):
    name = "torch.aten.masked_fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatterBackwardOp(IRDLOperation):
    name = "torch.aten.masked_scatter_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $mask `,` $sizes attr-dict `:` type($grad_output) `,` type($mask) `,` type($sizes) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatterOp(IRDLOperation):
    name = "torch.aten.masked_scatter"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatter_Op(IRDLOperation):
    name = "torch.aten.masked_scatter_"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedSelectBackwardOp(IRDLOperation):
    name = "torch.aten.masked_select_backward"
    grad = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $input `,` $mask attr-dict `:` type($grad) `,` type($input) `,` type($mask) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedSelectOp(IRDLOperation):
    name = "torch.aten.masked_select"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mask attr-dict `:` type($self) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMatmulBackwardOp(IRDLOperation):
    name = "torch.aten.matmul_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $other `,` $mask attr-dict `:` type($grad) `,` type($self) `,` type($other) `,` type($mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMatmulOp(IRDLOperation):
    name = "torch.aten.matmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMatrixExpBackwardOp(IRDLOperation):
    name = "torch.aten.matrix_exp_backward"
    self = operand_def(BaseAttr(TensorType))
    grad = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $grad attr-dict `:` type($self) `,` type($grad) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMatrixExpOp(IRDLOperation):
    name = "torch.aten.matrix_exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMatrixHAOp(IRDLOperation):
    name = "torch.aten.matrix_H.a"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMatrixHOp(IRDLOperation):
    name = "torch.aten.matrix_H"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMatrixPowerOp(IRDLOperation):
    name = "torch.aten.matrix_power"
    self = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $n attr-dict `:` type($self) `,` type($n) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxDimMaxOp(IRDLOperation):
    name = "torch.aten.max.dim_max"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    max = operand_def(BaseAttr(TensorType))
    max_values = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $max `,` $max_values attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($max) `,` type($max_values) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxDimOp(IRDLOperation):
    name = "torch.aten.max.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxOp(IRDLOperation):
    name = "torch.aten.max"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxOtherOp(IRDLOperation):
    name = "torch.aten.max.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxPool1DOp(IRDLOperation):
    name = "torch.aten.max_pool1d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool1DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool1d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DOp(IRDLOperation):
    name = "torch.aten.max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxPool3DOp(IRDLOperation):
    name = "torch.aten.max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxUnaryOutOp(IRDLOperation):
    name = "torch.aten.max.unary_out"
    self = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $out attr-dict `:` type($self) `,` type($out) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxUnpool2DOp(IRDLOperation):
    name = "torch.aten.max_unpool2d"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $output_size attr-dict `:` type($self) `,` type($indices) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxUnpool3DOp(IRDLOperation):
    name = "torch.aten.max_unpool3d"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $output_size `,` $stride `,` $padding attr-dict `:` type($self) `,` type($indices) `,` type($output_size) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaximumOp(IRDLOperation):
    name = "torch.aten.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMeanDimOp(IRDLOperation):
    name = "torch.aten.mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeanDtypeOutOp(IRDLOperation):
    name = "torch.aten.mean.dtype_out"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $out attr-dict `:` type($self) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeanOp(IRDLOperation):
    name = "torch.aten.mean"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMedianDimOp(IRDLOperation):
    name = "torch.aten.median.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMedianOp(IRDLOperation):
    name = "torch.aten.median"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeshgridOp(IRDLOperation):
    name = "torch.aten.meshgrid"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenMhAOp(IRDLOperation):
    name = "torch.aten.mH.a"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMhOp(IRDLOperation):
    name = "torch.aten.mH"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinDimMinOp(IRDLOperation):
    name = "torch.aten.min.dim_min"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    min = operand_def(BaseAttr(TensorType))
    min_indices = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $min `,` $min_indices attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($min) `,` type($min_indices) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinDimOp(IRDLOperation):
    name = "torch.aten.min.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinOp(IRDLOperation):
    name = "torch.aten.min"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinOtherOp(IRDLOperation):
    name = "torch.aten.min.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMinUnaryOutOp(IRDLOperation):
    name = "torch.aten.min.unary_out"
    self = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $out attr-dict `:` type($self) `,` type($out) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMinimumOp(IRDLOperation):
    name = "torch.aten.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMiopenBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.miopen_batch_norm_backward"
    input = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grad_output `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $epsilon attr-dict `:` type($input) `,` type($grad_output) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMiopenBatchNormOp(IRDLOperation):
    name = "torch.aten.miopen_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    exponential_average_factor = operand_def(BaseAttr(Float64Type))
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $exponential_average_factor `,` $epsilon attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($exponential_average_factor) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMiopenConvolutionAddReluOp(IRDLOperation):
    name = "torch.aten.miopen_convolution_add_relu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    z = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $z `,` $alpha `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($z) `,` type($alpha) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenMiopenConvolutionOp(IRDLOperation):
    name = "torch.aten.miopen_convolution"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $padding `,` $stride `,` $dilation `,` $groups `,` $benchmark `,` $deterministic attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `->` type($result)"


@irdl_op_definition
class Torch_AtenMiopenConvolutionReluOp(IRDLOperation):
    name = "torch.aten.miopen_convolution_relu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenMiopenConvolutionTransposeOp(IRDLOperation):
    name = "torch.aten.miopen_convolution_transpose"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $padding `,` $output_padding `,` $stride `,` $dilation `,` $groups `,` $benchmark `,` $deterministic attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($output_padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `->` type($result)"


@irdl_op_definition
class Torch_AtenMiopenDepthwiseConvolutionOp(IRDLOperation):
    name = "torch.aten.miopen_depthwise_convolution"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $padding `,` $stride `,` $dilation `,` $groups `,` $benchmark `,` $deterministic attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `->` type($result)"


@irdl_op_definition
class Torch_AtenMiopenRnnBackwardOp(IRDLOperation):
    name = "torch.aten.miopen_rnn_backward"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    weight_buf = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    cx = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dropout_state = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reserve = operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$input `,` $weight `,` $weight_stride0 `,` $weight_buf `,` $hx `,` $cx `,` $output `,` $grad_output `,` $grad_hy `,` $grad_cy `,` $mode `,` $hidden_size `,` $num_layers `,` $batch_first `,` $dropout `,` $train `,` $bidirectional `,` $batch_sizes `,` $dropout_state `,` $reserve `,` $output_mask attr-dict `:` type($input) `,` type($weight) `,` type($weight_stride0) `,` type($weight_buf) `,` type($hx) `,` type($cx) `,` type($output) `,` type($grad_output) `,` type($grad_hy) `,` type($grad_cy) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($batch_first) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($dropout_state) `,` type($reserve) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenMiopenRnnOp(IRDLOperation):
    name = "torch.aten.miopen_rnn"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    hx = operand_def(BaseAttr(TensorType))
    cx = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dropout_state = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $weight_stride0 `,` $hx `,` $cx `,` $mode `,` $hidden_size `,` $num_layers `,` $batch_first `,` $dropout `,` $train `,` $bidirectional `,` $batch_sizes `,` $dropout_state attr-dict `:` type($input) `,` type($weight) `,` type($weight_stride0) `,` type($hx) `,` type($cx) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($batch_first) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($dropout_state) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_AtenMishBackwardOp(IRDLOperation):
    name = "torch.aten.mish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMishOp(IRDLOperation):
    name = "torch.aten.mish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMish_Op(IRDLOperation):
    name = "torch.aten.mish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnAdaptiveAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_adaptive_avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnAdaptiveAvgPool2DOp(IRDLOperation):
    name = "torch.aten.mkldnn_adaptive_avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnConvolutionOp(IRDLOperation):
    name = "torch.aten.mkldnn_convolution"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $padding `,` $stride `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnLinearBackwardInputOp(IRDLOperation):
    name = "torch.aten.mkldnn_linear_backward_input"
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input_size `,` $grad_output `,` $weight attr-dict `:` type($input_size) `,` type($grad_output) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnLinearBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_linear_backward"
    self = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grad_output `,` $weight `,` $output_mask attr-dict `:` type($self) `,` type($grad_output) `,` type($weight) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMkldnnLinearBackwardWeightsOp(IRDLOperation):
    name = "torch.aten.mkldnn_linear_backward_weights"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias_defined = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $bias_defined attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($bias_defined) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMkldnnLinearOp(IRDLOperation):
    name = "torch.aten.mkldnn_linear"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias attr-dict `:` type($self) `,` type($weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $input `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($grad_output) `,` type($output) `,` type($input) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnMaxPool2DOp(IRDLOperation):
    name = "torch.aten.mkldnn_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnMaxPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_max_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $input `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($grad_output) `,` type($output) `,` type($input) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnMaxPool3DOp(IRDLOperation):
    name = "torch.aten.mkldnn_max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnReorderConv2DWeightOp(IRDLOperation):
    name = "torch.aten.mkldnn_reorder_conv2d_weight"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    input_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding `,` $stride `,` $dilation `,` $groups `,` $input_size attr-dict `:` type($self) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($input_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnReorderConv3DWeightOp(IRDLOperation):
    name = "torch.aten.mkldnn_reorder_conv3d_weight"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    input_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding `,` $stride `,` $dilation `,` $groups `,` $input_size attr-dict `:` type($self) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($input_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnRnnLayerBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_rnn_layer_backward"
    input = operand_def(BaseAttr(TensorType))
    weight1 = operand_def(BaseAttr(TensorType))
    weight2 = operand_def(BaseAttr(TensorType))
    weight3 = operand_def(BaseAttr(TensorType))
    weight4 = operand_def(BaseAttr(TensorType))
    hx_ = operand_def(BaseAttr(TensorType))
    cx_tmp = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    hy_ = operand_def(BaseAttr(TensorType))
    cy_ = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    workspace = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))
    result5 = result_def(BaseAttr(TensorType))
    result6 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight1 `,` $weight2 `,` $weight3 `,` $weight4 `,` $hx_ `,` $cx_tmp `,` $output `,` $hy_ `,` $cy_ `,` $grad_output `,` $grad_hy `,` $grad_cy `,` $reverse `,` $mode `,` $hidden_size `,` $num_layers `,` $has_biases `,` $train `,` $bidirectional `,` $batch_sizes `,` $batch_first `,` $workspace attr-dict `:` type($input) `,` type($weight1) `,` type($weight2) `,` type($weight3) `,` type($weight4) `,` type($hx_) `,` type($cx_tmp) `,` type($output) `,` type($hy_) `,` type($cy_) `,` type($grad_output) `,` type($grad_hy) `,` type($grad_cy) `,` type($reverse) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($has_biases) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($batch_first) `,` type($workspace) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4) `,` type($result5) `,` type($result6)"


@irdl_op_definition
class Torch_AtenMkldnnRnnLayerOp(IRDLOperation):
    name = "torch.aten.mkldnn_rnn_layer"
    input = operand_def(BaseAttr(TensorType))
    weight0 = operand_def(BaseAttr(TensorType))
    weight1 = operand_def(BaseAttr(TensorType))
    weight2 = operand_def(BaseAttr(TensorType))
    weight3 = operand_def(BaseAttr(TensorType))
    hx_ = operand_def(BaseAttr(TensorType))
    cx_ = operand_def(BaseAttr(TensorType))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight0 `,` $weight1 `,` $weight2 `,` $weight3 `,` $hx_ `,` $cx_ `,` $reverse `,` $batch_sizes `,` $mode `,` $hidden_size `,` $num_layers `,` $has_biases `,` $bidirectional `,` $batch_first `,` $train attr-dict `:` type($input) `,` type($weight0) `,` type($weight1) `,` type($weight2) `,` type($weight3) `,` type($hx_) `,` type($cx_) `,` type($reverse) `,` type($batch_sizes) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($has_biases) `,` type($bidirectional) `,` type($batch_first) `,` type($train) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenMmOp(IRDLOperation):
    name = "torch.aten.mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenModeOp(IRDLOperation):
    name = "torch.aten.mode"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMpsConvolutionBackwardOp(IRDLOperation):
    name = "torch.aten.mps_convolution_backward"
    self = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grad_output `,` $weight `,` $padding `,` $stride `,` $dilation `,` $groups `,` $output_mask attr-dict `:` type($self) `,` type($grad_output) `,` type($weight) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMpsConvolutionTransposeBackwardOp(IRDLOperation):
    name = "torch.aten.mps_convolution_transpose_backward"
    self = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grad_output `,` $weight `,` $padding `,` $output_padding `,` $stride `,` $dilation `,` $groups `,` $output_mask attr-dict `:` type($self) `,` type($grad_output) `,` type($weight) `,` type($padding) `,` type($output_padding) `,` type($stride) `,` type($dilation) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMseLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossBackwardOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossOp(IRDLOperation):
    name = "torch.aten.mse_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMsortOp(IRDLOperation):
    name = "torch.aten.msort"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMtAOp(IRDLOperation):
    name = "torch.aten.mT.a"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMtOp(IRDLOperation):
    name = "torch.aten.mT"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatIntOp(IRDLOperation):
    name = "torch.aten.mul.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatOp(IRDLOperation):
    name = "torch.aten.mul.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntFloatOp(IRDLOperation):
    name = "torch.aten.mul.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntOp(IRDLOperation):
    name = "torch.aten.mul.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulOp(IRDLOperation):
    name = "torch.aten.mul"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulScalarOp(IRDLOperation):
    name = "torch.aten.mul.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMulScalarOutOp(IRDLOperation):
    name = "torch.aten.mul.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulTensorOp(IRDLOperation):
    name = "torch.aten.mul.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMul_ScalarOp(IRDLOperation):
    name = "torch.aten.mul_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMul_TensorOp(IRDLOperation):
    name = "torch.aten.mul_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiMarginLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.multi_margin_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    margin = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $p `,` $margin `,` $weight `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($p) `,` type($margin) `,` type($weight) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultiMarginLossBackwardOp(IRDLOperation):
    name = "torch.aten.multi_margin_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    margin = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $p `,` $margin `,` $weight `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($p) `,` type($margin) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultiMarginLossOp(IRDLOperation):
    name = "torch.aten.multi_margin_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    margin = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $p `,` $margin `,` $weight `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($p) `,` type($margin) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultilabelMarginLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    is_target = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $is_target `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($is_target) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultilabelMarginLossBackwardOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    is_target = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $is_target attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($is_target) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultilabelMarginLossForwardOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    is_target = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($output) `,` type($is_target)"


@irdl_op_definition
class Torch_AtenMultilabelMarginLossForwardOutputOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_forward.output"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    output = operand_def(BaseAttr(TensorType))
    is_target = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $output `,` $is_target attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($output) `,` type($is_target) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMultilabelMarginLossOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMultiplyScalarOp(IRDLOperation):
    name = "torch.aten.multiply.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiplyTensorOp(IRDLOperation):
    name = "torch.aten.multiply.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiply_ScalarOp(IRDLOperation):
    name = "torch.aten.multiply_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiply_TensorOp(IRDLOperation):
    name = "torch.aten.multiply_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvOp(IRDLOperation):
    name = "torch.aten.mv"
    self = operand_def(BaseAttr(TensorType))
    vec = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $vec attr-dict `:` type($self) `,` type($vec) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgammaOp(IRDLOperation):
    name = "torch.aten.mvlgamma"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgamma_Op(IRDLOperation):
    name = "torch.aten.mvlgamma_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNanToNumOp(IRDLOperation):
    name = "torch.aten.nan_to_num"
    self = operand_def(BaseAttr(TensorType))
    nan = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    posinf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    neginf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nan `,` $posinf `,` $neginf attr-dict `:` type($self) `,` type($nan) `,` type($posinf) `,` type($neginf) `->` type($result)"


@irdl_op_definition
class Torch_AtenNanToNum_Op(IRDLOperation):
    name = "torch.aten.nan_to_num_"
    self = operand_def(BaseAttr(TensorType))
    nan = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    posinf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    neginf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nan `,` $posinf `,` $neginf attr-dict `:` type($self) `,` type($nan) `,` type($posinf) `,` type($neginf) `->` type($result)"


@irdl_op_definition
class Torch_AtenNanmeanOp(IRDLOperation):
    name = "torch.aten.nanmean"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNanmedianDimOp(IRDLOperation):
    name = "torch.aten.nanmedian.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenNanmedianOp(IRDLOperation):
    name = "torch.aten.nanmedian"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNansumOp(IRDLOperation):
    name = "torch.aten.nansum"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowCopyOp(IRDLOperation):
    name = "torch.aten.narrow_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowOp(IRDLOperation):
    name = "torch.aten.narrow"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowTensorOp(IRDLOperation):
    name = "torch.aten.narrow.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(TensorType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNativeBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_batch_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_invstd = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_invstd `,` $train `,` $eps `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_invstd) `,` type($train) `,` type($eps) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeBatchNormOp(IRDLOperation):
    name = "torch.aten.native_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeChannelShuffleOp(IRDLOperation):
    name = "torch.aten.native_channel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $groups attr-dict `:` type($self) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenNativeDropoutBackwardOp(IRDLOperation):
    name = "torch.aten.native_dropout_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $mask `,` $scale attr-dict `:` type($grad_output) `,` type($mask) `,` type($scale) `->` type($result)"


@irdl_op_definition
class Torch_AtenNativeDropoutOp(IRDLOperation):
    name = "torch.aten.native_dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenNativeGroupNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_group_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $rstd `,` $weight `,` $N `,` $C `,` $HxW `,` $group `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeGroupNormOp(IRDLOperation):
    name = "torch.aten.native_group_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $N `,` $C `,` $HxW `,` $group `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_layer_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $normalized_shape `,` $mean `,` $rstd `,` $weight `,` $bias `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($normalized_shape) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($bias) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormOp(IRDLOperation):
    name = "torch.aten.native_layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeNormOp(IRDLOperation):
    name = "torch.aten.native_norm"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNativeNormScalaroptDimDtypeOp(IRDLOperation):
    name = "torch.aten.native_norm.ScalarOpt_dim_dtype"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNativeNormScalaroptDimDtypeOutOp(IRDLOperation):
    name = "torch.aten.native_norm.ScalarOpt_dim_dtype_out"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $keepdim `,` $dtype `,` $out attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($keepdim) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeBoolListOp(IRDLOperation):
    name = "torch.aten.ne.bool_list"
    a = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    b = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeBoolOp(IRDLOperation):
    name = "torch.aten.ne.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatIntOp(IRDLOperation):
    name = "torch.aten.ne.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatListOp(IRDLOperation):
    name = "torch.aten.ne.float_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatOp(IRDLOperation):
    name = "torch.aten.ne.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntFloatOp(IRDLOperation):
    name = "torch.aten.ne.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntListOp(IRDLOperation):
    name = "torch.aten.ne.int_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntOp(IRDLOperation):
    name = "torch.aten.ne.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeOp(IRDLOperation):
    name = "torch.aten.ne"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeScalarOp(IRDLOperation):
    name = "torch.aten.ne.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNeScalarOutOp(IRDLOperation):
    name = "torch.aten.ne.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeTensorListOp(IRDLOperation):
    name = "torch.aten.ne.Tensor_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeTensorOp(IRDLOperation):
    name = "torch.aten.ne.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNeTensorOutOp(IRDLOperation):
    name = "torch.aten.ne.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNe_ScalarOp(IRDLOperation):
    name = "torch.aten.ne_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNe_TensorOp(IRDLOperation):
    name = "torch.aten.ne_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNegFloatOp(IRDLOperation):
    name = "torch.aten.neg.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegIntOp(IRDLOperation):
    name = "torch.aten.neg.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegOp(IRDLOperation):
    name = "torch.aten.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegScalarOp(IRDLOperation):
    name = "torch.aten.neg.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeg_Op(IRDLOperation):
    name = "torch.aten.neg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegativeOp(IRDLOperation):
    name = "torch.aten.negative"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegative_Op(IRDLOperation):
    name = "torch.aten.negative_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNestedToPaddedTensorOp(IRDLOperation):
    name = "torch.aten.nested_to_padded_tensor"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(BaseAttr(Float64Type))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding `,` $output_size attr-dict `:` type($self) `,` type($padding) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenNextafterOp(IRDLOperation):
    name = "torch.aten.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNextafter_Op(IRDLOperation):
    name = "torch.aten.nextafter_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNllLoss2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLoss2DBackwardOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLoss2DForwardOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    total_weight = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($output) `,` type($total_weight)"


@irdl_op_definition
class Torch_AtenNllLoss2DForwardOutputOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_forward.output"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = operand_def(BaseAttr(TensorType))
    total_weight = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $output `,` $total_weight attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($output) `,` type($total_weight) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenNllLoss2DOp(IRDLOperation):
    name = "torch.aten.nll_loss2d"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.nll_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossBackwardOp(IRDLOperation):
    name = "torch.aten.nll_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossForwardOp(IRDLOperation):
    name = "torch.aten.nll_loss_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    total_weight = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($output) `,` type($total_weight)"


@irdl_op_definition
class Torch_AtenNllLossForwardOutputOp(IRDLOperation):
    name = "torch.aten.nll_loss_forward.output"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = operand_def(BaseAttr(TensorType))
    total_weight = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $output `,` $total_weight attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($output) `,` type($total_weight) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenNllLossNdOp(IRDLOperation):
    name = "torch.aten.nll_loss_nd"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossOp(IRDLOperation):
    name = "torch.aten.nll_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroNumpyOp(IRDLOperation):
    name = "torch.aten.nonzero_numpy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroOp(IRDLOperation):
    name = "torch.aten.nonzero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroStaticOp(IRDLOperation):
    name = "torch.aten.nonzero_static"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(BaseAttr(IntegerType))
    fill_value = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $fill_value attr-dict `:` type($self) `,` type($size) `,` type($fill_value) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormDtypeOutOp(IRDLOperation):
    name = "torch.aten.norm.dtype_out"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $keepdim `,` $dtype `,` $out attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($keepdim) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormExceptDimOp(IRDLOperation):
    name = "torch.aten.norm_except_dim"
    v = operand_def(BaseAttr(TensorType))
    pow = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$v `,` $pow `,` $dim attr-dict `:` type($v) `,` type($pow) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormScalarOp(IRDLOperation):
    name = "torch.aten.norm.Scalar"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNormScalarOutOp(IRDLOperation):
    name = "torch.aten.norm.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $out attr-dict `:` type($self) `,` type($p) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormScalaroptDimDtypeOp(IRDLOperation):
    name = "torch.aten.norm.ScalarOpt_dim_dtype"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormScalaroptDimOp(IRDLOperation):
    name = "torch.aten.norm.ScalarOpt_dim"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormScalaroptDtypeOp(IRDLOperation):
    name = "torch.aten.norm.ScalarOpt_dtype"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dtype attr-dict `:` type($self) `,` type($p) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNormScalaroptDtypeOutOp(IRDLOperation):
    name = "torch.aten.norm.ScalarOpt_dtype_out"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dtype = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dtype `,` $out attr-dict `:` type($self) `,` type($p) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNotEqualScalarOp(IRDLOperation):
    name = "torch.aten.not_equal.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNotEqualScalarOutOp(IRDLOperation):
    name = "torch.aten.not_equal.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNotEqualTensorOp(IRDLOperation):
    name = "torch.aten.not_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNotEqualTensorOutOp(IRDLOperation):
    name = "torch.aten.not_equal.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNotEqual_ScalarOp(IRDLOperation):
    name = "torch.aten.not_equal_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNotEqual_TensorOp(IRDLOperation):
    name = "torch.aten.not_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNuclearNormDimOp(IRDLOperation):
    name = "torch.aten.nuclear_norm.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenNuclearNormDimOutOp(IRDLOperation):
    name = "torch.aten.nuclear_norm.dim_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenNuclearNormOp(IRDLOperation):
    name = "torch.aten.nuclear_norm"
    self = operand_def(BaseAttr(TensorType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $keepdim attr-dict `:` type($self) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenNumelOp(IRDLOperation):
    name = "torch.aten.numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNumpyTAOp(IRDLOperation):
    name = "torch.aten.numpy_T.a"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNumpyTOp(IRDLOperation):
    name = "torch.aten.numpy_T"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenOneHotOp(IRDLOperation):
    name = "torch.aten.one_hot"
    self = operand_def(BaseAttr(TensorType))
    num_classes = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $num_classes attr-dict `:` type($self) `,` type($num_classes) `->` type($result)"


@irdl_op_definition
class Torch_AtenOrgqrOp(IRDLOperation):
    name = "torch.aten.orgqr"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 attr-dict `:` type($self) `,` type($input2) `->` type($result)"


@irdl_op_definition
class Torch_AtenOrmqrOp(IRDLOperation):
    name = "torch.aten.ormqr"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    input3 = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $input3 `,` $left `,` $transpose attr-dict `:` type($self) `,` type($input2) `,` type($input3) `,` type($left) `,` type($transpose) `->` type($result)"


@irdl_op_definition
class Torch_AtenOuterOp(IRDLOperation):
    name = "torch.aten.outer"
    self = operand_def(BaseAttr(TensorType))
    vec2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $vec2 attr-dict `:` type($self) `,` type($vec2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenOutputNrOp(IRDLOperation):
    name = "torch.aten.output_nr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPairwiseDistanceOp(IRDLOperation):
    name = "torch.aten.pairwise_distance"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $eps `,` $keepdim attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($eps) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenPdistOp(IRDLOperation):
    name = "torch.aten.pdist"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPermuteCopyOp(IRDLOperation):
    name = "torch.aten.permute_copy"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPermuteOp(IRDLOperation):
    name = "torch.aten.permute"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPinverseOp(IRDLOperation):
    name = "torch.aten.pinverse"
    self = operand_def(BaseAttr(TensorType))
    rcond = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $rcond attr-dict `:` type($self) `,` type($rcond) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPixelShuffleOp(IRDLOperation):
    name = "torch.aten.pixel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    upscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upscale_factor attr-dict `:` type($self) `,` type($upscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPixelUnshuffleOp(IRDLOperation):
    name = "torch.aten.pixel_unshuffle"
    self = operand_def(BaseAttr(TensorType))
    downscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $downscale_factor attr-dict `:` type($self) `,` type($downscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPoissonNllLossOp(IRDLOperation):
    name = "torch.aten.poisson_nll_loss"
    input = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    log_input = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    full = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $target `,` $log_input `,` $full `,` $eps `,` $reduction attr-dict `:` type($input) `,` type($target) `,` type($log_input) `,` type($full) `,` type($eps) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenPolarOp(IRDLOperation):
    name = "torch.aten.polar"
    abs = operand_def(BaseAttr(TensorType))
    angle = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$abs `,` $angle attr-dict `:` type($abs) `,` type($angle) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPolarScalarScalarOp(IRDLOperation):
    name = "torch.aten.polar.Scalar_Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPolygammaOp(IRDLOperation):
    name = "torch.aten.polygamma"
    n = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$n `,` $self attr-dict `:` type($n) `,` type($self) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPolygamma_Op(IRDLOperation):
    name = "torch.aten.polygamma_"
    self = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $n attr-dict `:` type($self) `,` type($n) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPositiveOp(IRDLOperation):
    name = "torch.aten.positive"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatIntOp(IRDLOperation):
    name = "torch.aten.pow.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatOp(IRDLOperation):
    name = "torch.aten.pow.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntFloatOp(IRDLOperation):
    name = "torch.aten.pow.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntOp(IRDLOperation):
    name = "torch.aten.pow.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntToIntOp(IRDLOperation):
    name = "torch.aten.pow.int_to_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowScalarOp(IRDLOperation):
    name = "torch.aten.pow.Scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowScalarOutOp(IRDLOperation):
    name = "torch.aten.pow.Scalar_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    exponent = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent `,` $out attr-dict `:` type($self) `,` type($exponent) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowScalarScalarOp(IRDLOperation):
    name = "torch.aten.pow.Scalar_Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorScalarOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorScalarOutOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent `,` $out attr-dict `:` type($self) `,` type($exponent) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOutOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent `,` $out attr-dict `:` type($self) `,` type($exponent) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenPow_ScalarOp(IRDLOperation):
    name = "torch.aten.pow_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPow_TensorOp(IRDLOperation):
    name = "torch.aten.pow_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPreluOp(IRDLOperation):
    name = "torch.aten.prelu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdDimIntOp(IRDLOperation):
    name = "torch.aten.prod.dim_int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdIntOutOp(IRDLOperation):
    name = "torch.aten.prod.int_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdOp(IRDLOperation):
    name = "torch.aten.prod"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPromoteTypesOp(IRDLOperation):
    name = "torch.aten.promote_types"
    type1 = operand_def(BaseAttr(IntegerType))
    type2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$type1 `,` $type2 attr-dict `:` type($type1) `,` type($type2) `->` type($result)"


@irdl_op_definition
class Torch_AtenPutOp(IRDLOperation):
    name = "torch.aten.put"
    self = operand_def(BaseAttr(TensorType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $index `,` $source `,` $accumulate attr-dict `:` type($self) `,` type($index) `,` type($source) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenPut_Op(IRDLOperation):
    name = "torch.aten.put_"
    self = operand_def(BaseAttr(TensorType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $index `,` $source `,` $accumulate attr-dict `:` type($self) `,` type($index) `,` type($source) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenQPerChannelAxisOp(IRDLOperation):
    name = "torch.aten.q_per_channel_axis"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenQPerChannelScalesOp(IRDLOperation):
    name = "torch.aten.q_per_channel_scales"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenQPerChannelZeroPointsOp(IRDLOperation):
    name = "torch.aten.q_per_channel_zero_points"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenQScaleOp(IRDLOperation):
    name = "torch.aten.q_scale"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenQZeroPointOp(IRDLOperation):
    name = "torch.aten.q_zero_point"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenQrOp(IRDLOperation):
    name = "torch.aten.qr"
    self = operand_def(BaseAttr(TensorType))
    some = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    Q = result_def(BaseAttr(TensorType))
    R = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $some attr-dict `:` type($self) `,` type($some) `->` type($Q) `,` type($R)"


@irdl_op_definition
class Torch_AtenQuantizePerChannelOp(IRDLOperation):
    name = "torch.aten.quantize_per_channel"
    self = operand_def(BaseAttr(TensorType))
    scales = operand_def(BaseAttr(TensorType))
    zero_points = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scales `,` $zero_points `,` $axis `,` $dtype attr-dict `:` type($self) `,` type($scales) `,` type($zero_points) `,` type($axis) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorDynamicOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor_dynamic"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    reduce_range = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $reduce_range attr-dict `:` type($self) `,` type($dtype) `,` type($reduce_range) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    zero_point = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $dtype attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorTensorQparamsOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor.tensor_qparams"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $dtype attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorTensorQparamsOutOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor.tensor_qparams_out"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $dtype `,` $out attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorTensorsOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor.tensors"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    scales = operand_def(BaseAttr(TensorType))
    zero_points = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors `,` $scales `,` $zero_points `,` $dtype attr-dict `:` type($tensors) `,` type($scales) `,` type($zero_points) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizePerTensorTensorsOutOp(IRDLOperation):
    name = "torch.aten.quantize_per_tensor.tensors_out"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    scales = operand_def(BaseAttr(TensorType))
    zero_points = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    out = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors `,` $scales `,` $zero_points `,` $dtype `,` $out attr-dict `:` type($tensors) `,` type($scales) `,` type($zero_points) `,` type($dtype) `,` type($out)"


@irdl_op_definition
class Torch_AtenQuantizedBatchNormOp(IRDLOperation):
    name = "torch.aten.quantized_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mean = operand_def(BaseAttr(TensorType))
    var = operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $mean `,` $var `,` $eps `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($mean) `,` type($var) `,` type($eps) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedGruCellOp(IRDLOperation):
    name = "torch.aten.quantized_gru_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(BaseAttr(TensorType))
    b_hh = operand_def(BaseAttr(TensorType))
    packed_ih = operand_def(BaseAttr(TensorType))
    packed_hh = operand_def(BaseAttr(TensorType))
    col_offsets_ih = operand_def(BaseAttr(TensorType))
    col_offsets_hh = operand_def(BaseAttr(TensorType))
    scale_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh `,` $packed_ih `,` $packed_hh `,` $col_offsets_ih `,` $col_offsets_hh `,` $scale_ih `,` $scale_hh `,` $zero_point_ih `,` $zero_point_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `,` type($packed_ih) `,` type($packed_hh) `,` type($col_offsets_ih) `,` type($col_offsets_hh) `,` type($scale_ih) `,` type($scale_hh) `,` type($zero_point_ih) `,` type($zero_point_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedGruDataLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_gru.data_legacy"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenQuantizedGruInputLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_gru.input_legacy"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenQuantizedLstmCellOp(IRDLOperation):
    name = "torch.aten.quantized_lstm_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(BaseAttr(TensorType))
    b_hh = operand_def(BaseAttr(TensorType))
    packed_ih = operand_def(BaseAttr(TensorType))
    packed_hh = operand_def(BaseAttr(TensorType))
    col_offsets_ih = operand_def(BaseAttr(TensorType))
    col_offsets_hh = operand_def(BaseAttr(TensorType))
    scale_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh `,` $packed_ih `,` $packed_hh `,` $col_offsets_ih `,` $col_offsets_hh `,` $scale_ih `,` $scale_hh `,` $zero_point_ih `,` $zero_point_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `,` type($packed_ih) `,` type($packed_hh) `,` type($col_offsets_ih) `,` type($col_offsets_hh) `,` type($scale_ih) `,` type($scale_hh) `,` type($zero_point_ih) `,` type($zero_point_hh) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenQuantizedLstmDataLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_lstm.data_legacy"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    use_dynamic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $dtype `,` $use_dynamic attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($dtype) `,` type($use_dynamic) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenQuantizedLstmInputLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_lstm.input_legacy"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    use_dynamic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first `,` $dtype `,` $use_dynamic attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `,` type($dtype) `,` type($use_dynamic) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenQuantizedMaxPool1DOp(IRDLOperation):
    name = "torch.aten.quantized_max_pool1d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedMaxPool2DOp(IRDLOperation):
    name = "torch.aten.quantized_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedMaxPool3DOp(IRDLOperation):
    name = "torch.aten.quantized_max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedRnnReluCellOp(IRDLOperation):
    name = "torch.aten.quantized_rnn_relu_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(BaseAttr(TensorType))
    b_hh = operand_def(BaseAttr(TensorType))
    packed_ih = operand_def(BaseAttr(TensorType))
    packed_hh = operand_def(BaseAttr(TensorType))
    col_offsets_ih = operand_def(BaseAttr(TensorType))
    col_offsets_hh = operand_def(BaseAttr(TensorType))
    scale_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh `,` $packed_ih `,` $packed_hh `,` $col_offsets_ih `,` $col_offsets_hh `,` $scale_ih `,` $scale_hh `,` $zero_point_ih `,` $zero_point_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `,` type($packed_ih) `,` type($packed_hh) `,` type($col_offsets_ih) `,` type($col_offsets_hh) `,` type($scale_ih) `,` type($scale_hh) `,` type($zero_point_ih) `,` type($zero_point_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenQuantizedRnnTanhCellOp(IRDLOperation):
    name = "torch.aten.quantized_rnn_tanh_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(BaseAttr(TensorType))
    b_hh = operand_def(BaseAttr(TensorType))
    packed_ih = operand_def(BaseAttr(TensorType))
    packed_hh = operand_def(BaseAttr(TensorType))
    col_offsets_ih = operand_def(BaseAttr(TensorType))
    col_offsets_hh = operand_def(BaseAttr(TensorType))
    scale_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_ih = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    zero_point_hh = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh `,` $packed_ih `,` $packed_hh `,` $col_offsets_ih `,` $col_offsets_hh `,` $scale_ih `,` $scale_hh `,` $zero_point_ih `,` $zero_point_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `,` type($packed_ih) `,` type($packed_hh) `,` type($col_offsets_ih) `,` type($col_offsets_hh) `,` type($scale_ih) `,` type($scale_hh) `,` type($zero_point_ih) `,` type($zero_point_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenRad2DegOp(IRDLOperation):
    name = "torch.aten.rad2deg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRad2Deg_Op(IRDLOperation):
    name = "torch.aten.rad2deg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRandintLikeLowDtypeOutOp(IRDLOperation):
    name = "torch.aten.randint_like.low_dtype_out"
    self = operand_def(BaseAttr(TensorType))
    low = operand_def(BaseAttr(IntegerType))
    high = operand_def(BaseAttr(IntegerType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $low `,` $high `,` $memory_format `,` $out attr-dict `:` type($self) `,` type($low) `,` type($high) `,` type($memory_format) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRandintLowOutOp(IRDLOperation):
    name = "torch.aten.randint.low_out"
    low = operand_def(BaseAttr(IntegerType))
    high = operand_def(BaseAttr(IntegerType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$low `,` $high `,` $size `,` $out attr-dict `:` type($low) `,` type($high) `,` type($size) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRangeOut_Op(IRDLOperation):
    name = "torch.aten.range.out_"
    start = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    end = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$start `,` $end `,` $out attr-dict `:` type($start) `,` type($end) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRavelOp(IRDLOperation):
    name = "torch.aten.ravel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRealOp(IRDLOperation):
    name = "torch.aten.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocalOp(IRDLOperation):
    name = "torch.aten.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocal_Op(IRDLOperation):
    name = "torch.aten.reciprocal_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu6Op(IRDLOperation):
    name = "torch.aten.relu6"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu6_Op(IRDLOperation):
    name = "torch.aten.relu6_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReluOp(IRDLOperation):
    name = "torch.aten.relu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu_Op(IRDLOperation):
    name = "torch.aten.relu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatIntOp(IRDLOperation):
    name = "torch.aten.remainder.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatOp(IRDLOperation):
    name = "torch.aten.remainder.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntFloatOp(IRDLOperation):
    name = "torch.aten.remainder.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntOp(IRDLOperation):
    name = "torch.aten.remainder.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderOp(IRDLOperation):
    name = "torch.aten.remainder"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderScalarOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainderScalarOutOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderScalarTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar_Tensor"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainderScalarTensorOutOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar_Tensor_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainderTensorOutOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainder_ScalarOp(IRDLOperation):
    name = "torch.aten.remainder_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainder_TensorOp(IRDLOperation):
    name = "torch.aten.remainder_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRenormOp(IRDLOperation):
    name = "torch.aten.renorm"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    dim = operand_def(BaseAttr(IntegerType))
    maxnorm = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $maxnorm attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($maxnorm) `->` type($result)"


@irdl_op_definition
class Torch_AtenRenorm_Op(IRDLOperation):
    name = "torch.aten.renorm_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    dim = operand_def(BaseAttr(IntegerType))
    maxnorm = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $p `,` $dim `,` $maxnorm attr-dict `:` type($self) `,` type($p) `,` type($dim) `,` type($maxnorm) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveSelfIntOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.self_int"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(BaseAttr(IntegerType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats `,` $dim `,` $output_size attr-dict `:` type($self) `,` type($repeats) `,` type($dim) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveSelfTensorOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.self_Tensor"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats `,` $dim `,` $output_size attr-dict `:` type($self) `,` type($repeats) `,` type($dim) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveTensorOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.Tensor"
    repeats = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$repeats `,` $output_size attr-dict `:` type($repeats) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveTensorOutOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.Tensor_out"
    repeats = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$repeats `,` $output_size `,` $out attr-dict `:` type($repeats) `,` type($output_size) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatOp(IRDLOperation):
    name = "torch.aten.repeat"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats attr-dict `:` type($self) `,` type($repeats) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DOp(IRDLOperation):
    name = "torch.aten.replication_pad1d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DOp(IRDLOperation):
    name = "torch.aten.replication_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DOp(IRDLOperation):
    name = "torch.aten.replication_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenRequiresGrad_Op(IRDLOperation):
    name = "torch.aten.requires_grad_"
    self = operand_def(BaseAttr(TensorType))
    requires_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $requires_grad attr-dict `:` type($self) `,` type($requires_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenReshapeAsOp(IRDLOperation):
    name = "torch.aten.reshape_as"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenReshapeOp(IRDLOperation):
    name = "torch.aten.reshape"
    self = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $shape attr-dict `:` type($self) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenResizeAsOp(IRDLOperation):
    name = "torch.aten.resize_as"
    self = operand_def(BaseAttr(TensorType))
    the_template = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $the_template `,` $memory_format attr-dict `:` type($self) `,` type($the_template) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResizeAsSparse_Op(IRDLOperation):
    name = "torch.aten.resize_as_sparse_"
    self = operand_def(BaseAttr(TensorType))
    the_template = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $the_template attr-dict `:` type($self) `,` type($the_template) `->` type($result)"


@irdl_op_definition
class Torch_AtenResizeAs_Op(IRDLOperation):
    name = "torch.aten.resize_as_"
    self = operand_def(BaseAttr(TensorType))
    the_template = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $the_template `,` $memory_format attr-dict `:` type($self) `,` type($the_template) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResizeOp(IRDLOperation):
    name = "torch.aten.resize"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $memory_format attr-dict `:` type($self) `,` type($size) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResize_Op(IRDLOperation):
    name = "torch.aten.resize_"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $memory_format attr-dict `:` type($self) `,` type($size) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResolveConjOp(IRDLOperation):
    name = "torch.aten.resolve_conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenResolveNegOp(IRDLOperation):
    name = "torch.aten.resolve_neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRetainGradOp(IRDLOperation):
    name = "torch.aten.retain_grad"
    self = operand_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_AtenRetainsGradOp(IRDLOperation):
    name = "torch.aten.retains_grad"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRmsNormOp(IRDLOperation):
    name = "torch.aten.rms_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $eps attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($eps) `->` type($result)"


@irdl_op_definition
class Torch_AtenRnnReluCellOp(IRDLOperation):
    name = "torch.aten.rnn_relu_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    b_hh = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenRnnReluDataOp(IRDLOperation):
    name = "torch.aten.rnn_relu.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnReluInputOp(IRDLOperation):
    name = "torch.aten.rnn_relu.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnTanhCellOp(IRDLOperation):
    name = "torch.aten.rnn_tanh_cell"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    w_ih = operand_def(BaseAttr(TensorType))
    w_hh = operand_def(BaseAttr(TensorType))
    b_ih = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    b_hh = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $w_ih `,` $w_hh `,` $b_ih `,` $b_hh attr-dict `:` type($input) `,` type($hx) `,` type($w_ih) `,` type($w_hh) `,` type($b_ih) `,` type($b_hh) `->` type($result)"


@irdl_op_definition
class Torch_AtenRnnTanhDataOp(IRDLOperation):
    name = "torch.aten.rnn_tanh.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnTanhInputOp(IRDLOperation):
    name = "torch.aten.rnn_tanh.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRollOp(IRDLOperation):
    name = "torch.aten.roll"
    self = operand_def(BaseAttr(TensorType))
    shifts = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $shifts `,` $dims attr-dict `:` type($self) `,` type($shifts) `,` type($dims) `->` type($result)"


@irdl_op_definition
class Torch_AtenRot90Op(IRDLOperation):
    name = "torch.aten.rot90"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dims attr-dict `:` type($self) `,` type($k) `,` type($dims) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundDecimalsOp(IRDLOperation):
    name = "torch.aten.round.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundDecimalsOutOp(IRDLOperation):
    name = "torch.aten.round.decimals_out"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals `,` $out attr-dict `:` type($self) `,` type($decimals) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundFloatOp(IRDLOperation):
    name = "torch.aten.round.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundIntOp(IRDLOperation):
    name = "torch.aten.round.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundOp(IRDLOperation):
    name = "torch.aten.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundScalarOp(IRDLOperation):
    name = "torch.aten.round.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_DecimalsOp(IRDLOperation):
    name = "torch.aten.round_.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_Op(IRDLOperation):
    name = "torch.aten.round_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRowIndicesCopyOp(IRDLOperation):
    name = "torch.aten.row_indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRowIndicesOp(IRDLOperation):
    name = "torch.aten.row_indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRowStackOp(IRDLOperation):
    name = "torch.aten.row_stack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenRreluWithNoiseBackwardOp(IRDLOperation):
    name = "torch.aten.rrelu_with_noise_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    noise = operand_def(BaseAttr(TensorType))
    lower = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    upper = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    self_is_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $noise `,` $lower `,` $upper `,` $training `,` $self_is_result attr-dict `:` type($grad_output) `,` type($self) `,` type($noise) `,` type($lower) `,` type($upper) `,` type($training) `,` type($self_is_result) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrtOp(IRDLOperation):
    name = "torch.aten.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrt_Op(IRDLOperation):
    name = "torch.aten.rsqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsubScalarOp(IRDLOperation):
    name = "torch.aten.rsub.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsubScalarOutOp(IRDLOperation):
    name = "torch.aten.rsub.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha `,` $out attr-dict `:` type($self) `,` type($other) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsubTensorOp(IRDLOperation):
    name = "torch.aten.rsub.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsubTensorOutOp(IRDLOperation):
    name = "torch.aten.rsub.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha `,` $out attr-dict `:` type($self) `,` type($other) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenScaledDotProductAttentionOp(IRDLOperation):
    name = "torch.aten.scaled_dot_product_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    enable_gqa = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_mask `,` $dropout_p `,` $is_causal `,` $scale `,` $enable_gqa attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_mask) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `,` type($enable_gqa) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAddOp(IRDLOperation):
    name = "torch.aten.scatter_add"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAdd_Op(IRDLOperation):
    name = "torch.aten.scatter_add_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOp(IRDLOperation):
    name = "torch.aten.scatter.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOutOp(IRDLOperation):
    name = "torch.aten.scatter.src_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterValueOp(IRDLOperation):
    name = "torch.aten.scatter.value"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterValueOutOp(IRDLOperation):
    name = "torch.aten.scatter.value_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatter_SrcOp(IRDLOperation):
    name = "torch.aten.scatter_.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatter_ValueOp(IRDLOperation):
    name = "torch.aten.scatter_.value"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectBackwardOp(IRDLOperation):
    name = "torch.aten.select_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $dim `,` $index attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectIntOp(IRDLOperation):
    name = "torch.aten.select.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectScatterOp(IRDLOperation):
    name = "torch.aten.select_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $index attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSeluOp(IRDLOperation):
    name = "torch.aten.selu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelu_Op(IRDLOperation):
    name = "torch.aten.selu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSetDataOp(IRDLOperation):
    name = "torch.aten.set_data"
    self = operand_def(BaseAttr(TensorType))
    new_data = operand_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $new_data attr-dict `:` type($self) `,` type($new_data)"
    )


@irdl_op_definition
class Torch_AtenSet_Op(IRDLOperation):
    name = "torch.aten.set_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_SourceTensorOp(IRDLOperation):
    name = "torch.aten.set_.source_Tensor"
    self = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $source attr-dict `:` type($self) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_SourceTensorStorageOffsetOp(IRDLOperation):
    name = "torch.aten.set_.source_Tensor_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    storage_offset = operand_def(BaseAttr(IntegerType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $source `,` $storage_offset `,` $size `,` $stride attr-dict `:` type($self) `,` type($source) `,` type($storage_offset) `,` type($size) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgnOp(IRDLOperation):
    name = "torch.aten.sgn"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgn_Op(IRDLOperation):
    name = "torch.aten.sgn_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidOp(IRDLOperation):
    name = "torch.aten.sigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoid_Op(IRDLOperation):
    name = "torch.aten.sigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignOp(IRDLOperation):
    name = "torch.aten.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSign_Op(IRDLOperation):
    name = "torch.aten.sign_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignbitOp(IRDLOperation):
    name = "torch.aten.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.silu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardOp(IRDLOperation):
    name = "torch.aten.silu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluOp(IRDLOperation):
    name = "torch.aten.silu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSilu_Op(IRDLOperation):
    name = "torch.aten.silu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinFloatOp(IRDLOperation):
    name = "torch.aten.sin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinIntOp(IRDLOperation):
    name = "torch.aten.sin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinOp(IRDLOperation):
    name = "torch.aten.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinScalarOp(IRDLOperation):
    name = "torch.aten.sin.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSin_Op(IRDLOperation):
    name = "torch.aten.sin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSincOp(IRDLOperation):
    name = "torch.aten.sinc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinc_Op(IRDLOperation):
    name = "torch.aten.sinc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhFloatOp(IRDLOperation):
    name = "torch.aten.sinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhIntOp(IRDLOperation):
    name = "torch.aten.sinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhOp(IRDLOperation):
    name = "torch.aten.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhScalarOp(IRDLOperation):
    name = "torch.aten.sinh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinh_Op(IRDLOperation):
    name = "torch.aten.sinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSizeIntOp(IRDLOperation):
    name = "torch.aten.size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSizeOp(IRDLOperation):
    name = "torch.aten.size"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceBackwardOp(IRDLOperation):
    name = "torch.aten.slice_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceInverseOp(IRDLOperation):
    name = "torch.aten.slice_inverse"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceScatterOp(IRDLOperation):
    name = "torch.aten.slice_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceTensorOp(IRDLOperation):
    name = "torch.aten.slice.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlogdetOp(IRDLOperation):
    name = "torch.aten.slogdet"
    self = operand_def(BaseAttr(TensorType))
    sign = result_def(BaseAttr(TensorType))
    logabsdet = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($sign) `,` type($logabsdet)"
    )


@irdl_op_definition
class Torch_AtenSlowConv3DForwardOp(IRDLOperation):
    name = "torch.aten.slow_conv3d_forward"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConv3DForwardOutputOp(IRDLOperation):
    name = "torch.aten.slow_conv3d_forward.output"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $output attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConv3DOp(IRDLOperation):
    name = "torch.aten.slow_conv3d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConvDilated2DOp(IRDLOperation):
    name = "torch.aten.slow_conv_dilated2d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConvDilated3DOp(IRDLOperation):
    name = "torch.aten.slow_conv_dilated3d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConvTranspose2DOp(IRDLOperation):
    name = "torch.aten.slow_conv_transpose2d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $output_padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($output_padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenSlowConvTranspose3DOp(IRDLOperation):
    name = "torch.aten.slow_conv_transpose3d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $output_padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($output_padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmmOp(IRDLOperation):
    name = "torch.aten.smm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $beta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftplusBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.softplus_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $beta `,` $threshold `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($beta) `,` type($threshold) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftplusBackwardOp(IRDLOperation):
    name = "torch.aten.softplus_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $beta `,` $threshold attr-dict `:` type($grad_output) `,` type($self) `,` type($beta) `,` type($threshold) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftplusOp(IRDLOperation):
    name = "torch.aten.softplus"
    self = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $beta `,` $threshold attr-dict `:` type($self) `,` type($beta) `,` type($threshold) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftshrinkBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.softshrink_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $lambd `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($lambd) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftshrinkBackwardOp(IRDLOperation):
    name = "torch.aten.softshrink_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $lambd attr-dict `:` type($grad_output) `,` type($self) `,` type($lambd) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftshrinkOp(IRDLOperation):
    name = "torch.aten.softshrink"
    self = operand_def(BaseAttr(TensorType))
    lambd = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $lambd attr-dict `:` type($self) `,` type($lambd) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSortBoolOp(IRDLOperation):
    name = "torch.aten.sort.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortFloatOp(IRDLOperation):
    name = "torch.aten.sort.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortIntOp(IRDLOperation):
    name = "torch.aten.sort.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortOp(IRDLOperation):
    name = "torch.aten.sort"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSortStableOp(IRDLOperation):
    name = "torch.aten.sort.stable"
    self = operand_def(BaseAttr(TensorType))
    stable = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $stable `,` $dim `,` $descending attr-dict `:` type($self) `,` type($stable) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSortTensorOp(IRDLOperation):
    name = "torch.aten.sort.Tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSparseDimOp(IRDLOperation):
    name = "torch.aten.sparse_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSparseMaskOp(IRDLOperation):
    name = "torch.aten.sparse_mask"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mask attr-dict `:` type($self) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSparseResizeAndClear_Op(IRDLOperation):
    name = "torch.aten.sparse_resize_and_clear_"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    sparse_dim = operand_def(BaseAttr(IntegerType))
    dense_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $sparse_dim `,` $dense_dim attr-dict `:` type($self) `,` type($size) `,` type($sparse_dim) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSparseResize_Op(IRDLOperation):
    name = "torch.aten.sparse_resize_"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    sparse_dim = operand_def(BaseAttr(IntegerType))
    dense_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $sparse_dim `,` $dense_dim attr-dict `:` type($self) `,` type($size) `,` type($sparse_dim) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSparseSampledAddmmOp(IRDLOperation):
    name = "torch.aten.sparse_sampled_addmm"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialAiryAiOp(IRDLOperation):
    name = "torch.aten.special_airy_ai"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ1Op(IRDLOperation):
    name = "torch.aten.special_bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY0Op(IRDLOperation):
    name = "torch.aten.special_bessel_y0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY1Op(IRDLOperation):
    name = "torch.aten.special_bessel_y1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTNScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTXScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUNScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUXScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVNScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVXScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWNScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWXScalarOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialDigammaOp(IRDLOperation):
    name = "torch.aten.special_digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialEntrOp(IRDLOperation):
    name = "torch.aten.special_entr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfOp(IRDLOperation):
    name = "torch.aten.special_erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfcOp(IRDLOperation):
    name = "torch.aten.special_erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfcxOp(IRDLOperation):
    name = "torch.aten.special_erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfinvOp(IRDLOperation):
    name = "torch.aten.special_erfinv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialExp2Op(IRDLOperation):
    name = "torch.aten.special_exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialExpitOp(IRDLOperation):
    name = "torch.aten.special_expit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialExpm1Op(IRDLOperation):
    name = "torch.aten.special_expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialGammaincOp(IRDLOperation):
    name = "torch.aten.special_gammainc"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialGammainccOp(IRDLOperation):
    name = "torch.aten.special_gammaincc"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialGammalnOp(IRDLOperation):
    name = "torch.aten.special_gammaln"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHNScalarOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHXScalarOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeNScalarOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeXScalarOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI0EOp(IRDLOperation):
    name = "torch.aten.special_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI0Op(IRDLOperation):
    name = "torch.aten.special_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1EOp(IRDLOperation):
    name = "torch.aten.special_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1Op(IRDLOperation):
    name = "torch.aten.special_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLNScalarOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLXScalarOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPNScalarOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPXScalarOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLog1POp(IRDLOperation):
    name = "torch.aten.special_log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLogNdtrOp(IRDLOperation):
    name = "torch.aten.special_log_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLogSoftmaxOp(IRDLOperation):
    name = "torch.aten.special_log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLogitOp(IRDLOperation):
    name = "torch.aten.special_logit"
    self = operand_def(BaseAttr(TensorType))
    eps = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $eps attr-dict `:` type($self) `,` type($eps) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialLogsumexpOp(IRDLOperation):
    name = "torch.aten.special_logsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialMultigammalnOp(IRDLOperation):
    name = "torch.aten.special_multigammaln"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialNdtrOp(IRDLOperation):
    name = "torch.aten.special_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialNdtriOp(IRDLOperation):
    name = "torch.aten.special_ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialPolygammaOp(IRDLOperation):
    name = "torch.aten.special_polygamma"
    n = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$n `,` $self attr-dict `:` type($n) `,` type($self) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialPsiOp(IRDLOperation):
    name = "torch.aten.special_psi"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialRoundOp(IRDLOperation):
    name = "torch.aten.special_round"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k1"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTNScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTXScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUNScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUXScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVNScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVXScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWNScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w.n_scalar"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWNScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w.n_scalar_out"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWXScalarOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w.x_scalar"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWXScalarOutOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w.x_scalar_out"
    x = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    n = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n `,` $out attr-dict `:` type($x) `,` type($n) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialSincOp(IRDLOperation):
    name = "torch.aten.special_sinc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialSoftmaxOp(IRDLOperation):
    name = "torch.aten.special_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialSphericalBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_spherical_bessel_j0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlog1PyOp(IRDLOperation):
    name = "torch.aten.special_xlog1py"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlog1PyOtherScalarOp(IRDLOperation):
    name = "torch.aten.special_xlog1py.other_scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlog1PyOtherScalarOutOp(IRDLOperation):
    name = "torch.aten.special_xlog1py.other_scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlog1PySelfScalarOp(IRDLOperation):
    name = "torch.aten.special_xlog1py.self_scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlog1PySelfScalarOutOp(IRDLOperation):
    name = "torch.aten.special_xlog1py.self_scalar_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlogyOp(IRDLOperation):
    name = "torch.aten.special_xlogy"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlogyOtherScalarOp(IRDLOperation):
    name = "torch.aten.special_xlogy.other_scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlogyOtherScalarOutOp(IRDLOperation):
    name = "torch.aten.special_xlogy.other_scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlogySelfScalarOp(IRDLOperation):
    name = "torch.aten.special_xlogy.self_scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialXlogySelfScalarOutOp(IRDLOperation):
    name = "torch.aten.special_xlogy.self_scalar_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialZetaOp(IRDLOperation):
    name = "torch.aten.special_zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialZetaOtherScalarOp(IRDLOperation):
    name = "torch.aten.special_zeta.other_scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialZetaOtherScalarOutOp(IRDLOperation):
    name = "torch.aten.special_zeta.other_scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialZetaSelfScalarOp(IRDLOperation):
    name = "torch.aten.special_zeta.self_scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialZetaSelfScalarOutOp(IRDLOperation):
    name = "torch.aten.special_zeta.self_scalar_out"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitOp(IRDLOperation):
    name = "torch.aten.split"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitSizesOp(IRDLOperation):
    name = "torch.aten.split.sizes"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitTensorOp(IRDLOperation):
    name = "torch.aten.split.Tensor"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitWithSizesCopyOp(IRDLOperation):
    name = "torch.aten.split_with_sizes_copy"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitWithSizesOp(IRDLOperation):
    name = "torch.aten.split_with_sizes"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtFloatOp(IRDLOperation):
    name = "torch.aten.sqrt.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtIntOp(IRDLOperation):
    name = "torch.aten.sqrt.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtOp(IRDLOperation):
    name = "torch.aten.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtScalarOp(IRDLOperation):
    name = "torch.aten.sqrt.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrt_Op(IRDLOperation):
    name = "torch.aten.sqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquareOp(IRDLOperation):
    name = "torch.aten.square"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquare_Op(IRDLOperation):
    name = "torch.aten.square_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeCopyDimOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeCopyDimOutOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dim_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeCopyDimsOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeCopyDimsOutOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dims_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeCopyOp(IRDLOperation):
    name = "torch.aten.squeeze_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeDimOp(IRDLOperation):
    name = "torch.aten.squeeze.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeDimsOp(IRDLOperation):
    name = "torch.aten.squeeze.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeOp(IRDLOperation):
    name = "torch.aten.squeeze"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueeze_DimOp(IRDLOperation):
    name = "torch.aten.squeeze_.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueeze_DimsOp(IRDLOperation):
    name = "torch.aten.squeeze_.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueeze_Op(IRDLOperation):
    name = "torch.aten.squeeze_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSspaddmmOp(IRDLOperation):
    name = "torch.aten.sspaddmm"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenStackOp(IRDLOperation):
    name = "torch.aten.stack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdCorrectionOp(IRDLOperation):
    name = "torch.aten.std.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdCorrectionOutOp(IRDLOperation):
    name = "torch.aten.std.correction_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdDimOp(IRDLOperation):
    name = "torch.aten.std.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdMeanCorrectionOp(IRDLOperation):
    name = "torch.aten.std_mean.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdMeanCorrectionOutOp(IRDLOperation):
    name = "torch.aten.std_mean.correction_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out0 = operand_def(BaseAttr(TensorType))
    out1 = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim `,` $out0 `,` $out1 attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `,` type($out0) `,` type($out1) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdMeanDimOp(IRDLOperation):
    name = "torch.aten.std_mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdMeanOp(IRDLOperation):
    name = "torch.aten.std_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdOp(IRDLOperation):
    name = "torch.aten.std"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenStftOp(IRDLOperation):
    name = "torch.aten.stft"
    self = operand_def(BaseAttr(TensorType))
    n_fft = operand_def(BaseAttr(IntegerType))
    hop_length = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    win_length = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    normalized = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    onesided = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    return_complex = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $n_fft `,` $hop_length `,` $win_length `,` $window `,` $normalized `,` $onesided `,` $return_complex attr-dict `:` type($self) `,` type($n_fft) `,` type($hop_length) `,` type($win_length) `,` type($window) `,` type($normalized) `,` type($onesided) `,` type($return_complex) `->` type($result)"


@irdl_op_definition
class Torch_AtenStorageOffsetOp(IRDLOperation):
    name = "torch.aten.storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenStrideIntOp(IRDLOperation):
    name = "torch.aten.stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenStrideOp(IRDLOperation):
    name = "torch.aten.stride"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubFloatIntOp(IRDLOperation):
    name = "torch.aten.sub.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubFloatOp(IRDLOperation):
    name = "torch.aten.sub.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntFloatOp(IRDLOperation):
    name = "torch.aten.sub.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntOp(IRDLOperation):
    name = "torch.aten.sub.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubOp(IRDLOperation):
    name = "torch.aten.sub"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    b = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubScalarOp(IRDLOperation):
    name = "torch.aten.sub.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubScalarOutOp(IRDLOperation):
    name = "torch.aten.sub.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha `,` $out attr-dict `:` type($self) `,` type($other) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubTensorOp(IRDLOperation):
    name = "torch.aten.sub.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSub_ScalarOp(IRDLOperation):
    name = "torch.aten.sub_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSub_TensorOp(IRDLOperation):
    name = "torch.aten.sub_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubtractScalarOp(IRDLOperation):
    name = "torch.aten.subtract.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubtractTensorOp(IRDLOperation):
    name = "torch.aten.subtract.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubtract_ScalarOp(IRDLOperation):
    name = "torch.aten.subtract_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubtract_TensorOp(IRDLOperation):
    name = "torch.aten.subtract_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumBoolOp(IRDLOperation):
    name = "torch.aten.sum.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumDimIntlistOp(IRDLOperation):
    name = "torch.aten.sum.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumFloatOp(IRDLOperation):
    name = "torch.aten.sum.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumIntOp(IRDLOperation):
    name = "torch.aten.sum.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumIntlistOutOp(IRDLOperation):
    name = "torch.aten.sum.IntList_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumOp(IRDLOperation):
    name = "torch.aten.sum"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSumToSizeOp(IRDLOperation):
    name = "torch.aten.sum_to_size"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSvdOp(IRDLOperation):
    name = "torch.aten.svd"
    self = operand_def(BaseAttr(TensorType))
    some = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    compute_uv = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    V = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $some `,` $compute_uv attr-dict `:` type($self) `,` type($some) `,` type($compute_uv) `->` type($U) `,` type($S) `,` type($V)"


@irdl_op_definition
class Torch_AtenSwapaxesOp(IRDLOperation):
    name = "torch.aten.swapaxes"
    self = operand_def(BaseAttr(TensorType))
    axis0 = operand_def(BaseAttr(IntegerType))
    axis1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $axis0 `,` $axis1 attr-dict `:` type($self) `,` type($axis0) `,` type($axis1) `->` type($result)"


@irdl_op_definition
class Torch_AtenSwapaxes_Op(IRDLOperation):
    name = "torch.aten.swapaxes_"
    self = operand_def(BaseAttr(TensorType))
    axis0 = operand_def(BaseAttr(IntegerType))
    axis1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $axis0 `,` $axis1 attr-dict `:` type($self) `,` type($axis0) `,` type($axis1) `->` type($result)"


@irdl_op_definition
class Torch_AtenSwapdimsOp(IRDLOperation):
    name = "torch.aten.swapdims"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenSwapdims_Op(IRDLOperation):
    name = "torch.aten.swapdims_"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymConstrainRangeForSizeOp(IRDLOperation):
    name = "torch.aten.sym_constrain_range_for_size"
    size = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$size `,` $min `,` $max attr-dict `:` type($size) `,` type($min) `,` type($max)"


@irdl_op_definition
class Torch_AtenSymConstrainRangeOp(IRDLOperation):
    name = "torch.aten.sym_constrain_range"
    size = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$size `,` $min `,` $max attr-dict `:` type($size) `,` type($min) `,` type($max)"


@irdl_op_definition
class Torch_AtenSymNumelOp(IRDLOperation):
    name = "torch.aten.sym_numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymSizeIntOp(IRDLOperation):
    name = "torch.aten.sym_size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSymSizeOp(IRDLOperation):
    name = "torch.aten.sym_size"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStorageOffsetOp(IRDLOperation):
    name = "torch.aten.sym_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStrideIntOp(IRDLOperation):
    name = "torch.aten.sym_stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSymStrideOp(IRDLOperation):
    name = "torch.aten.sym_stride"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTCopyOp(IRDLOperation):
    name = "torch.aten.t_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTOp(IRDLOperation):
    name = "torch.aten.t"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenT_Op(IRDLOperation):
    name = "torch.aten.t_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTakeAlongDimOp(IRDLOperation):
    name = "torch.aten.take_along_dim"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $dim attr-dict `:` type($self) `,` type($indices) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTakeOp(IRDLOperation):
    name = "torch.aten.take"
    self = operand_def(BaseAttr(TensorType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $index attr-dict `:` type($self) `,` type($index) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTanFloatOp(IRDLOperation):
    name = "torch.aten.tan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanIntOp(IRDLOperation):
    name = "torch.aten.tan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanOp(IRDLOperation):
    name = "torch.aten.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanScalarOp(IRDLOperation):
    name = "torch.aten.tan.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTan_Op(IRDLOperation):
    name = "torch.aten.tan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.tanh_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardOp(IRDLOperation):
    name = "torch.aten.tanh_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhFloatOp(IRDLOperation):
    name = "torch.aten.tanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhIntOp(IRDLOperation):
    name = "torch.aten.tanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhOp(IRDLOperation):
    name = "torch.aten.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhScalarOp(IRDLOperation):
    name = "torch.aten.tanh.Scalar"
    a = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanh_Op(IRDLOperation):
    name = "torch.aten.tanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitIndicesOp(IRDLOperation):
    name = "torch.aten.tensor_split.indices"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $indices `,` $dim attr-dict `:` type($self) `,` type($indices) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitSectionsOp(IRDLOperation):
    name = "torch.aten.tensor_split.sections"
    self = operand_def(BaseAttr(TensorType))
    sections = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $sections `,` $dim attr-dict `:` type($self) `,` type($sections) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitTensorIndicesOrSectionsOp(IRDLOperation):
    name = "torch.aten.tensor_split.tensor_indices_or_sections"
    self = operand_def(BaseAttr(TensorType))
    tensor_indices_or_sections = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $tensor_indices_or_sections `,` $dim attr-dict `:` type($self) `,` type($tensor_indices_or_sections) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensordotOp(IRDLOperation):
    name = "torch.aten.tensordot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dims_self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dims_other = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dims_self `,` $dims_other attr-dict `:` type($self) `,` type($other) `,` type($dims_self) `,` type($dims_other) `->` type($result)"


@irdl_op_definition
class Torch_AtenThnnConv2DOp(IRDLOperation):
    name = "torch.aten.thnn_conv2d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenThresholdBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.threshold_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $threshold `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($threshold) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenThresholdBackwardOp(IRDLOperation):
    name = "torch.aten.threshold_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $threshold attr-dict `:` type($grad_output) `,` type($self) `,` type($threshold) `->` type($result)"


@irdl_op_definition
class Torch_AtenThresholdOp(IRDLOperation):
    name = "torch.aten.threshold"
    self = operand_def(BaseAttr(TensorType))
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $threshold `,` $value attr-dict `:` type($self) `,` type($threshold) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenThreshold_Op(IRDLOperation):
    name = "torch.aten.threshold_"
    self = operand_def(BaseAttr(TensorType))
    threshold = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $threshold `,` $value attr-dict `:` type($self) `,` type($threshold) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenTileOp(IRDLOperation):
    name = "torch.aten.tile"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenToDenseBackwardOp(IRDLOperation):
    name = "torch.aten.to_dense_backward"
    grad = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    masked_grad = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $input `,` $masked_grad attr-dict `:` type($grad) `,` type($input) `,` type($masked_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenToDenseOp(IRDLOperation):
    name = "torch.aten.to_dense"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    masked_grad = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $masked_grad attr-dict `:` type($self) `,` type($dtype) `,` type($masked_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenToDtypeOp(IRDLOperation):
    name = "torch.aten.to.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $non_blocking `,` $copy `,` $memory_format attr-dict `:` type($self) `,` type($dtype) `,` type($non_blocking) `,` type($copy) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenToMkldnnBackwardOp(IRDLOperation):
    name = "torch.aten.to_mkldnn_backward"
    grad = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$grad `,` $input attr-dict `:` type($grad) `,` type($input) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenToMkldnnOp(IRDLOperation):
    name = "torch.aten.to_mkldnn"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenToOtherOp(IRDLOperation):
    name = "torch.aten.to.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $non_blocking `,` $copy `,` $memory_format attr-dict `:` type($self) `,` type($other) `,` type($non_blocking) `,` type($copy) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPaddedTensorOp(IRDLOperation):
    name = "torch.aten.to_padded_tensor"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(BaseAttr(Float64Type))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding `,` $output_size attr-dict `:` type($self) `,` type($padding) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPrimDtypeOp(IRDLOperation):
    name = "torch.aten.to.prim_dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $non_blocking `,` $copy attr-dict `:` type($self) `,` type($dtype) `,` type($non_blocking) `,` type($copy) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPrimOtherOp(IRDLOperation):
    name = "torch.aten.to.prim_other"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking `,` $copy attr-dict `:` type($self) `,` type($non_blocking) `,` type($copy) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseBscOp(IRDLOperation):
    name = "torch.aten.to_sparse_bsc"
    self = operand_def(BaseAttr(TensorType))
    blocksize = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseBsrOp(IRDLOperation):
    name = "torch.aten.to_sparse_bsr"
    self = operand_def(BaseAttr(TensorType))
    blocksize = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseCscOp(IRDLOperation):
    name = "torch.aten.to_sparse_csc"
    self = operand_def(BaseAttr(TensorType))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dense_dim attr-dict `:` type($self) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseCsrOp(IRDLOperation):
    name = "torch.aten.to_sparse_csr"
    self = operand_def(BaseAttr(TensorType))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dense_dim attr-dict `:` type($self) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseOp(IRDLOperation):
    name = "torch.aten.to_sparse"
    self = operand_def(BaseAttr(TensorType))
    layout = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    blocksize = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $layout `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($layout) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToSparseSparseDimOp(IRDLOperation):
    name = "torch.aten.to_sparse.sparse_dim"
    self = operand_def(BaseAttr(TensorType))
    sparse_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sparse_dim attr-dict `:` type($self) `,` type($sparse_dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTopkOp(IRDLOperation):
    name = "torch.aten.topk"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTraceBackwardOp(IRDLOperation):
    name = "torch.aten.trace_backward"
    grad = operand_def(BaseAttr(TensorType))
    sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$grad `,` $sizes attr-dict `:` type($grad) `,` type($sizes) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTraceOp(IRDLOperation):
    name = "torch.aten.trace"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeCopyIntOp(IRDLOperation):
    name = "torch.aten.transpose_copy.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeCopyIntOutOp(IRDLOperation):
    name = "torch.aten.transpose_copy.int_out"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 `,` $out attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeIntOp(IRDLOperation):
    name = "torch.aten.transpose.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTranspose_Op(IRDLOperation):
    name = "torch.aten.transpose_"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriangularSolveOp(IRDLOperation):
    name = "torch.aten.triangular_solve"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTriangularSolveXOp(IRDLOperation):
    name = "torch.aten.triangular_solve.X"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    X = operand_def(BaseAttr(TensorType))
    M = operand_def(BaseAttr(TensorType))
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular `,` $X `,` $M attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `,` type($X) `,` type($M) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTrilOp(IRDLOperation):
    name = "torch.aten.tril"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTril_Op(IRDLOperation):
    name = "torch.aten.tril_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTripletMarginLossOp(IRDLOperation):
    name = "torch.aten.triplet_margin_loss"
    anchor = operand_def(BaseAttr(TensorType))
    positive = operand_def(BaseAttr(TensorType))
    negative = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    p = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    swap = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$anchor `,` $positive `,` $negative `,` $margin `,` $p `,` $eps `,` $swap `,` $reduction attr-dict `:` type($anchor) `,` type($positive) `,` type($negative) `,` type($margin) `,` type($p) `,` type($eps) `,` type($swap) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriuOp(IRDLOperation):
    name = "torch.aten.triu"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriu_Op(IRDLOperation):
    name = "torch.aten.triu_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrueDivideScalarOp(IRDLOperation):
    name = "torch.aten.true_divide.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTrueDivideTensorOp(IRDLOperation):
    name = "torch.aten.true_divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTrueDivide_ScalarOp(IRDLOperation):
    name = "torch.aten.true_divide_.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTrueDivide_TensorOp(IRDLOperation):
    name = "torch.aten.true_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTruncOp(IRDLOperation):
    name = "torch.aten.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrunc_Op(IRDLOperation):
    name = "torch.aten.trunc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTypeAsOp(IRDLOperation):
    name = "torch.aten.type_as"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnbindIntOp(IRDLOperation):
    name = "torch.aten.unbind.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnflattenDenseTensorsOp(IRDLOperation):
    name = "torch.aten.unflatten_dense_tensors"
    flat = operand_def(BaseAttr(TensorType))
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$flat `,` $tensors attr-dict `:` type($flat) `,` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldBackwardOp(IRDLOperation):
    name = "torch.aten.unfold_backward"
    grad_in = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_in `,` $input_sizes `,` $dim `,` $size `,` $step attr-dict `:` type($grad_in) `,` type($input_sizes) `,` type($dim) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldCopyOp(IRDLOperation):
    name = "torch.aten.unfold_copy"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldOp(IRDLOperation):
    name = "torch.aten.unfold"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUniqueConsecutiveOp(IRDLOperation):
    name = "torch.aten.unique_consecutive"
    self = operand_def(BaseAttr(TensorType))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $return_inverse `,` $return_counts `,` $dim attr-dict `:` type($self) `,` type($return_inverse) `,` type($return_counts) `,` type($dim) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenUniqueDimConsecutiveOp(IRDLOperation):
    name = "torch.aten.unique_dim_consecutive"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($dim) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenUniqueDimOp(IRDLOperation):
    name = "torch.aten.unique_dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($dim) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenUnsafeChunkOp(IRDLOperation):
    name = "torch.aten.unsafe_chunk"
    self = operand_def(BaseAttr(TensorType))
    chunks = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $chunks `,` $dim attr-dict `:` type($self) `,` type($chunks) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsafeSplitTensorOp(IRDLOperation):
    name = "torch.aten.unsafe_split.Tensor"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsafeSplitTensorOutOp(IRDLOperation):
    name = "torch.aten.unsafe_split.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    out = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim `,` $out attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `,` type($out)"


@irdl_op_definition
class Torch_AtenUnsafeSplitWithSizesOp(IRDLOperation):
    name = "torch.aten.unsafe_split_with_sizes"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsqueezeCopyOp(IRDLOperation):
    name = "torch.aten.unsqueeze_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueezeOp(IRDLOperation):
    name = "torch.aten.unsqueeze"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueeze_Op(IRDLOperation):
    name = "torch.aten.unsqueeze_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DVecOutOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d.vec_out"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors `,` $out attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DVecOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DVecOutOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d.vec_out"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors `,` $out attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_d `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_d `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DVecOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenValueSelectingReductionBackwardOp(IRDLOperation):
    name = "torch.aten.value_selecting_reduction_backward"
    grad = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    indices = operand_def(BaseAttr(TensorType))
    sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $dim `,` $indices `,` $sizes `,` $keepdim attr-dict `:` type($grad) `,` type($dim) `,` type($indices) `,` type($sizes) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenValuesCopyOp(IRDLOperation):
    name = "torch.aten.values_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenValuesOp(IRDLOperation):
    name = "torch.aten.values"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenVanderOp(IRDLOperation):
    name = "torch.aten.vander"
    x = operand_def(BaseAttr(TensorType))
    N = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    increasing = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $N `,` $increasing attr-dict `:` type($x) `,` type($N) `,` type($increasing) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarCorrectionOp(IRDLOperation):
    name = "torch.aten.var.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarCorrectionOutOp(IRDLOperation):
    name = "torch.aten.var.correction_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarDimOp(IRDLOperation):
    name = "torch.aten.var.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarMeanCorrectionOp(IRDLOperation):
    name = "torch.aten.var_mean.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarMeanCorrectionOutOp(IRDLOperation):
    name = "torch.aten.var_mean.correction_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out0 = operand_def(BaseAttr(TensorType))
    out1 = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim `,` $out0 `,` $out1 attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `,` type($out0) `,` type($out1) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarMeanDimOp(IRDLOperation):
    name = "torch.aten.var_mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarMeanOp(IRDLOperation):
    name = "torch.aten.var_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarOp(IRDLOperation):
    name = "torch.aten.var"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenVdotOp(IRDLOperation):
    name = "torch.aten.vdot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewAsComplexCopyOp(IRDLOperation):
    name = "torch.aten.view_as_complex_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewAsComplexOp(IRDLOperation):
    name = "torch.aten.view_as_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewAsOp(IRDLOperation):
    name = "torch.aten.view_as"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewAsRealCopyOp(IRDLOperation):
    name = "torch.aten.view_as_real_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewAsRealOp(IRDLOperation):
    name = "torch.aten.view_as_real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewCopyDtypeOp(IRDLOperation):
    name = "torch.aten.view_copy.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewCopyDtypeOutOp(IRDLOperation):
    name = "torch.aten.view_copy.dtype_out"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $out attr-dict `:` type($self) `,` type($dtype) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewCopyOp(IRDLOperation):
    name = "torch.aten.view_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewDtypeOp(IRDLOperation):
    name = "torch.aten.view.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewOp(IRDLOperation):
    name = "torch.aten.view"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenVstackOp(IRDLOperation):
    name = "torch.aten.vstack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereOp(IRDLOperation):
    name = "torch.aten.where"
    condition = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$condition attr-dict `:` type($condition) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereScalarOp(IRDLOperation):
    name = "torch.aten.where.Scalar"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereScalarotherOp(IRDLOperation):
    name = "torch.aten.where.ScalarOther"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereScalarselfOp(IRDLOperation):
    name = "torch.aten.where.ScalarSelf"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereSelfOp(IRDLOperation):
    name = "torch.aten.where.self"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereSelfOutOp(IRDLOperation):
    name = "torch.aten.where.self_out"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other `,` $out attr-dict `:` type($condition) `,` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyOutscalarOtherOp(IRDLOperation):
    name = "torch.aten.xlogy.OutScalar_Other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyOutscalarSelfOp(IRDLOperation):
    name = "torch.aten.xlogy.OutScalar_Self"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyOuttensorOp(IRDLOperation):
    name = "torch.aten.xlogy.OutTensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyScalarOtherOp(IRDLOperation):
    name = "torch.aten.xlogy.Scalar_Other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogyScalarSelfOp(IRDLOperation):
    name = "torch.aten.xlogy.Scalar_Self"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogyTensorOp(IRDLOperation):
    name = "torch.aten.xlogy.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogy_ScalarOtherOp(IRDLOperation):
    name = "torch.aten.xlogy_.Scalar_Other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogy_TensorOp(IRDLOperation):
    name = "torch.aten.xlogy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenZeroOp(IRDLOperation):
    name = "torch.aten.zero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenZero_Op(IRDLOperation):
    name = "torch.aten.zero_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AddBatchDimOp(IRDLOperation):
    name = "torch.aten._add_batch_dim"
    self = operand_def(BaseAttr(TensorType))
    batch_dim = operand_def(BaseAttr(IntegerType))
    level = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $batch_dim `,` $level attr-dict `:` type($self) `,` type($batch_dim) `,` type($level) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AddReluScalarOp(IRDLOperation):
    name = "torch.aten._add_relu.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AddReluScalarOutOp(IRDLOperation):
    name = "torch.aten._add_relu.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha `,` $out attr-dict `:` type($self) `,` type($other) `,` type($alpha) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AddReluTensorOp(IRDLOperation):
    name = "torch.aten._add_relu.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AddmmActivationOp(IRDLOperation):
    name = "torch.aten._addmm_activation"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    use_gelu = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha `,` $use_gelu attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `,` type($use_gelu) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AminmaxDimOp(IRDLOperation):
    name = "torch.aten._aminmax.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_AminmaxDimOutOp(IRDLOperation):
    name = "torch.aten._aminmax.dim_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    out0 = operand_def(BaseAttr(TensorType))
    out1 = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $out0 `,` $out1 attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($out0) `,` type($out1) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_AminmaxOp(IRDLOperation):
    name = "torch.aten._aminmax"
    self = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($result0) `,` type($result1)"
    )


@irdl_op_definition
class Torch_Aten_AmpForeachNonFiniteCheckAndUnscale_Op(IRDLOperation):
    name = "torch.aten._amp_foreach_non_finite_check_and_unscale_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    found_inf = operand_def(BaseAttr(TensorType))
    inv_scale = operand_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $found_inf `,` $inv_scale attr-dict `:` type($self) `,` type($found_inf) `,` type($inv_scale)"


@irdl_op_definition
class Torch_Aten_AmpUpdateScale_Op(IRDLOperation):
    name = "torch.aten._amp_update_scale_"
    self = operand_def(BaseAttr(TensorType))
    growth_tracker = operand_def(BaseAttr(TensorType))
    found_inf = operand_def(BaseAttr(TensorType))
    scale_growth_factor = operand_def(BaseAttr(Float64Type))
    scale_backoff_factor = operand_def(BaseAttr(Float64Type))
    growth_interval = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $growth_tracker `,` $found_inf `,` $scale_growth_factor `,` $scale_backoff_factor `,` $growth_interval attr-dict `:` type($self) `,` type($growth_tracker) `,` type($found_inf) `,` type($scale_growth_factor) `,` type($scale_backoff_factor) `,` type($growth_interval) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_BoolOp(IRDLOperation):
    name = "torch.aten.__and__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_IntOp(IRDLOperation):
    name = "torch.aten.__and__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_ScalarOp(IRDLOperation):
    name = "torch.aten.__and__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_And_TensorOp(IRDLOperation):
    name = "torch.aten.__and__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_AssertAsyncOp(IRDLOperation):
    name = "torch.aten._assert_async"
    self = operand_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_AutocastToFullPrecisionOp(IRDLOperation):
    name = "torch.aten._autocast_to_full_precision"
    self = operand_def(BaseAttr(TensorType))
    cuda_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    cpu_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $cuda_enabled `,` $cpu_enabled attr-dict `:` type($self) `,` type($cuda_enabled) `,` type($cpu_enabled) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AutocastToReducedPrecisionOp(IRDLOperation):
    name = "torch.aten._autocast_to_reduced_precision"
    self = operand_def(BaseAttr(TensorType))
    cuda_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    cpu_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    cuda_dtype = operand_def(BaseAttr(IntegerType))
    cpu_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $cuda_enabled `,` $cpu_enabled `,` $cuda_dtype `,` $cpu_dtype attr-dict `:` type($self) `,` type($cuda_enabled) `,` type($cpu_enabled) `,` type($cuda_dtype) `,` type($cpu_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_BackwardOp(IRDLOperation):
    name = "torch.aten._backward"
    self = operand_def(BaseAttr(TensorType))
    inputs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    gradient = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    retain_graph = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    create_graph = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )

    assembly_format = "$self `,` $inputs `,` $gradient `,` $retain_graph `,` $create_graph attr-dict `:` type($self) `,` type($inputs) `,` type($gradient) `,` type($retain_graph) `,` type($create_graph)"


@irdl_op_definition
class Torch_Aten_BatchNormImplIndexBackwardOp(IRDLOperation):
    name = "torch.aten._batch_norm_impl_index_backward"
    impl_index = operand_def(BaseAttr(IntegerType))
    input = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    save_var_transform = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    reservedSpace = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$impl_index `,` $input `,` $grad_output `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var_transform `,` $train `,` $eps `,` $output_mask `,` $reservedSpace attr-dict `:` type($impl_index) `,` type($input) `,` type($grad_output) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var_transform) `,` type($train) `,` type($eps) `,` type($output_mask) `,` type($reservedSpace) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_BatchNormImplIndexOp(IRDLOperation):
    name = "torch.aten._batch_norm_impl_index"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(IntegerType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps `,` $cudnn_enabled attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `,` type($cudnn_enabled) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_BatchNormNoUpdateOp(IRDLOperation):
    name = "torch.aten._batch_norm_no_update"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_var = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_BatchNormWithUpdateFunctionalOp(IRDLOperation):
    name = "torch.aten._batch_norm_with_update_functional"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    running_mean_out = result_def(BaseAttr(TensorType))
    running_var_out = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($running_mean_out) `,` type($running_var_out)"


@irdl_op_definition
class Torch_Aten_BatchNormWithUpdateOp(IRDLOperation):
    name = "torch.aten._batch_norm_with_update"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_CastByteOp(IRDLOperation):
    name = "torch.aten._cast_Byte"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastCharOp(IRDLOperation):
    name = "torch.aten._cast_Char"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastDoubleOp(IRDLOperation):
    name = "torch.aten._cast_Double"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastFloatOp(IRDLOperation):
    name = "torch.aten._cast_Float"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastHalfOp(IRDLOperation):
    name = "torch.aten._cast_Half"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastIntOp(IRDLOperation):
    name = "torch.aten._cast_Int"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastLongOp(IRDLOperation):
    name = "torch.aten._cast_Long"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CastShortOp(IRDLOperation):
    name = "torch.aten._cast_Short"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking attr-dict `:` type($self) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CdistBackwardOp(IRDLOperation):
    name = "torch.aten._cdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    cdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $x1 `,` $x2 `,` $p `,` $cdist attr-dict `:` type($grad) `,` type($x1) `,` type($x2) `,` type($p) `,` type($cdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CdistForwardOp(IRDLOperation):
    name = "torch.aten._cdist_forward"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    compute_mode = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $compute_mode attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($compute_mode) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CholeskySolveHelperOp(IRDLOperation):
    name = "torch.aten._cholesky_solve_helper"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper attr-dict `:` type($self) `,` type($A) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ChooseQparamsPerTensorOp(IRDLOperation):
    name = "torch.aten._choose_qparams_per_tensor"
    self = operand_def(BaseAttr(TensorType))
    reduce_range = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(Float64Type))
    result1 = result_def(BaseAttr(IntegerType))

    assembly_format = "$self `,` $reduce_range attr-dict `:` type($self) `,` type($reduce_range) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_ChunkCatOp(IRDLOperation):
    name = "torch.aten._chunk_cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    num_chunks = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim `,` $num_chunks attr-dict `:` type($tensors) `,` type($dim) `,` type($num_chunks) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CoalesceOp(IRDLOperation):
    name = "torch.aten._coalesce"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Coalesced_Op(IRDLOperation):
    name = "torch.aten._coalesced_"
    self = operand_def(BaseAttr(TensorType))
    coalesced = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $coalesced attr-dict `:` type($self) `,` type($coalesced) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ComputeLinearCombinationOp(IRDLOperation):
    name = "torch.aten._compute_linear_combination"
    input = operand_def(BaseAttr(TensorType))
    coefficients = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $coefficients attr-dict `:` type($input) `,` type($coefficients) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConjCopyOp(IRDLOperation):
    name = "torch.aten._conj_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConjOp(IRDLOperation):
    name = "torch.aten._conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConjPhysicalOp(IRDLOperation):
    name = "torch.aten._conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvDepthwise2DOp(IRDLOperation):
    name = "torch.aten._conv_depthwise2d"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $dilation attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertIndicesFromCooToCsrOp(IRDLOperation):
    name = "torch.aten._convert_indices_from_coo_to_csr"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(BaseAttr(IntegerType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $out_int32 attr-dict `:` type($self) `,` type($size) `,` type($out_int32) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertIndicesFromCsrToCooOp(IRDLOperation):
    name = "torch.aten._convert_indices_from_csr_to_coo"
    crow_indices = operand_def(BaseAttr(TensorType))
    col_indices = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$crow_indices `,` $col_indices `,` $out_int32 `,` $transpose attr-dict `:` type($crow_indices) `,` type($col_indices) `,` type($out_int32) `,` type($transpose) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackForCpuOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvolutionDeprecatedOp(IRDLOperation):
    name = "torch.aten._convolution.deprecated"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $benchmark `,` $deterministic `,` $cudnn_enabled attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `,` type($cudnn_enabled) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvolutionDoubleBackwardOp(IRDLOperation):
    name = "torch.aten._convolution_double_backward"
    ggI = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    ggW = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    ggb = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    gO = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$ggI `,` $ggW `,` $ggb `,` $gO `,` $weight `,` $self `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($ggI) `,` type($ggW) `,` type($ggb) `,` type($gO) `,` type($weight) `,` type($self) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ConvolutionOp(IRDLOperation):
    name = "torch.aten._convolution"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    benchmark = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    cudnn_enabled = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    allow_tf32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $benchmark `,` $deterministic `,` $cudnn_enabled `,` $allow_tf32 attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($benchmark) `,` type($deterministic) `,` type($cudnn_enabled) `,` type($allow_tf32) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CopyFromAndResizeOp(IRDLOperation):
    name = "torch.aten._copy_from_and_resize"
    self = operand_def(BaseAttr(TensorType))
    dst = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dst attr-dict `:` type($self) `,` type($dst) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_CopyFromOp(IRDLOperation):
    name = "torch.aten._copy_from"
    self = operand_def(BaseAttr(TensorType))
    dst = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dst `,` $non_blocking attr-dict `:` type($self) `,` type($dst) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CsltCompressOp(IRDLOperation):
    name = "torch.aten._cslt_compress"
    input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input attr-dict `:` type($input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CsltSparseMmOp(IRDLOperation):
    name = "torch.aten._cslt_sparse_mm"
    compressed_A = operand_def(BaseAttr(TensorType))
    dense_B = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    alpha = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    transpose_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    alg_id = operand_def(BaseAttr(IntegerType))
    split_k = operand_def(BaseAttr(IntegerType))
    split_k_one_kernel = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$compressed_A `,` $dense_B `,` $bias `,` $alpha `,` $out_dtype `,` $transpose_result `,` $alg_id `,` $split_k `,` $split_k_one_kernel attr-dict `:` type($compressed_A) `,` type($dense_B) `,` type($bias) `,` type($alpha) `,` type($out_dtype) `,` type($transpose_result) `,` type($alg_id) `,` type($split_k) `,` type($split_k_one_kernel) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CsltSparseMmSearchOp(IRDLOperation):
    name = "torch.aten._cslt_sparse_mm_search"
    compressed_A = operand_def(BaseAttr(TensorType))
    dense_B = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    alpha = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    transpose_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$compressed_A `,` $dense_B `,` $bias `,` $alpha `,` $out_dtype `,` $transpose_result attr-dict `:` type($compressed_A) `,` type($dense_B) `,` type($bias) `,` type($alpha) `,` type($out_dtype) `,` type($transpose_result) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CtcLossBackwardOp(IRDLOperation):
    name = "torch.aten._ctc_loss_backward"
    grad = operand_def(BaseAttr(TensorType))
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    target_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    neg_log_likelihood = operand_def(BaseAttr(TensorType))
    log_alpha = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $neg_log_likelihood `,` $log_alpha `,` $blank `,` $zero_infinity attr-dict `:` type($grad) `,` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($neg_log_likelihood) `,` type($log_alpha) `,` type($blank) `,` type($zero_infinity) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CtcLossBackwardTensorOp(IRDLOperation):
    name = "torch.aten._ctc_loss_backward.Tensor"
    grad = operand_def(BaseAttr(TensorType))
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(BaseAttr(TensorType))
    target_lengths = operand_def(BaseAttr(TensorType))
    neg_log_likelihood = operand_def(BaseAttr(TensorType))
    log_alpha = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $neg_log_likelihood `,` $log_alpha `,` $blank `,` $zero_infinity attr-dict `:` type($grad) `,` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($neg_log_likelihood) `,` type($log_alpha) `,` type($blank) `,` type($zero_infinity) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CtcLossOp(IRDLOperation):
    name = "torch.aten._ctc_loss"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    target_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    blank = operand_def(BaseAttr(IntegerType))
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank `,` $zero_infinity attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `,` type($zero_infinity) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_CtcLossTensorOp(IRDLOperation):
    name = "torch.aten._ctc_loss.Tensor"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(BaseAttr(TensorType))
    target_lengths = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank `,` $zero_infinity attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `,` type($zero_infinity) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_CtcLossTensorOutOp(IRDLOperation):
    name = "torch.aten._ctc_loss.Tensor_out"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(BaseAttr(TensorType))
    target_lengths = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    out0 = operand_def(BaseAttr(TensorType))
    out1 = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank `,` $zero_infinity `,` $out0 `,` $out1 attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `,` type($zero_infinity) `,` type($out0) `,` type($out1) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_CudnnCtcLossOp(IRDLOperation):
    name = "torch.aten._cudnn_ctc_loss"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    target_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    blank = operand_def(BaseAttr(IntegerType))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank `,` $deterministic `,` $zero_infinity attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `,` type($deterministic) `,` type($zero_infinity) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_CudnnCtcLossTensorOp(IRDLOperation):
    name = "torch.aten._cudnn_ctc_loss.Tensor"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(BaseAttr(TensorType))
    target_lengths = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    deterministic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    zero_infinity = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank `,` $deterministic `,` $zero_infinity attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `,` type($deterministic) `,` type($zero_infinity) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_CudnnRnnBackwardOp(IRDLOperation):
    name = "torch.aten._cudnn_rnn_backward"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    weight_buf = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    cx = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    proj_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dropout_state = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    reserve = operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$input `,` $weight `,` $weight_stride0 `,` $weight_buf `,` $hx `,` $cx `,` $output `,` $grad_output `,` $grad_hy `,` $grad_cy `,` $mode `,` $hidden_size `,` $proj_size `,` $num_layers `,` $batch_first `,` $dropout `,` $train `,` $bidirectional `,` $batch_sizes `,` $dropout_state `,` $reserve `,` $output_mask attr-dict `:` type($input) `,` type($weight) `,` type($weight_stride0) `,` type($weight_buf) `,` type($hx) `,` type($cx) `,` type($output) `,` type($grad_output) `,` type($grad_hy) `,` type($grad_cy) `,` type($mode) `,` type($hidden_size) `,` type($proj_size) `,` type($num_layers) `,` type($batch_first) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($dropout_state) `,` type($reserve) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_CudnnRnnFlattenWeightOp(IRDLOperation):
    name = "torch.aten._cudnn_rnn_flatten_weight"
    weight_arr = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    input_size = operand_def(BaseAttr(IntegerType))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    proj_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight_arr `,` $weight_stride0 `,` $input_size `,` $mode `,` $hidden_size `,` $proj_size `,` $num_layers `,` $batch_first `,` $bidirectional attr-dict `:` type($weight_arr) `,` type($weight_stride0) `,` type($input_size) `,` type($mode) `,` type($hidden_size) `,` type($proj_size) `,` type($num_layers) `,` type($batch_first) `,` type($bidirectional) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CudnnRnnOp(IRDLOperation):
    name = "torch.aten._cudnn_rnn"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    weight_buf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hx = operand_def(BaseAttr(TensorType))
    cx = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    proj_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dropout_state = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $weight_stride0 `,` $weight_buf `,` $hx `,` $cx `,` $mode `,` $hidden_size `,` $proj_size `,` $num_layers `,` $batch_first `,` $dropout `,` $train `,` $bidirectional `,` $batch_sizes `,` $dropout_state attr-dict `:` type($input) `,` type($weight) `,` type($weight_stride0) `,` type($weight_buf) `,` type($hx) `,` type($cx) `,` type($mode) `,` type($hidden_size) `,` type($proj_size) `,` type($num_layers) `,` type($batch_first) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($dropout_state) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_CufftClearPlanCacheOp(IRDLOperation):
    name = "torch.aten._cufft_clear_plan_cache"
    device_index = operand_def(BaseAttr(IntegerType))

    assembly_format = "$device_index attr-dict `:` type($device_index)"


@irdl_op_definition
class Torch_Aten_CufftGetPlanCacheMaxSizeOp(IRDLOperation):
    name = "torch.aten._cufft_get_plan_cache_max_size"
    device_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$device_index attr-dict `:` type($device_index) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_CufftGetPlanCacheSizeOp(IRDLOperation):
    name = "torch.aten._cufft_get_plan_cache_size"
    device_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$device_index attr-dict `:` type($device_index) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_CufftSetPlanCacheMaxSizeOp(IRDLOperation):
    name = "torch.aten._cufft_set_plan_cache_max_size"
    device_index = operand_def(BaseAttr(IntegerType))
    max_size = operand_def(BaseAttr(IntegerType))

    assembly_format = "$device_index `,` $max_size attr-dict `:` type($device_index) `,` type($max_size)"


@irdl_op_definition
class Torch_Aten_CummaxHelperOp(IRDLOperation):
    name = "torch.aten._cummax_helper"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))

    assembly_format = "$self `,` $values `,` $indices `,` $dim attr-dict `:` type($self) `,` type($values) `,` type($indices) `,` type($dim)"


@irdl_op_definition
class Torch_Aten_CumminHelperOp(IRDLOperation):
    name = "torch.aten._cummin_helper"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))

    assembly_format = "$self `,` $values `,` $indices `,` $dim attr-dict `:` type($self) `,` type($values) `,` type($indices) `,` type($dim)"


@irdl_op_definition
class Torch_Aten_DebugHasInternalOverlapOp(IRDLOperation):
    name = "torch.aten._debug_has_internal_overlap"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_DimArangeOp(IRDLOperation):
    name = "torch.aten._dim_arange"
    like = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$like `,` $dim attr-dict `:` type($like) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_DimiOp(IRDLOperation):
    name = "torch.aten._dimI"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_DimvOp(IRDLOperation):
    name = "torch.aten._dimV"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_DirichletGradOp(IRDLOperation):
    name = "torch.aten._dirichlet_grad"
    x = operand_def(BaseAttr(TensorType))
    alpha = operand_def(BaseAttr(TensorType))
    total = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $alpha `,` $total attr-dict `:` type($x) `,` type($alpha) `,` type($total) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EfficientAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._efficient_attention_backward"
    grad_out_ = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(BaseAttr(TensorType))
    cu_seqlens_q = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cu_seqlens_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen_q = operand_def(BaseAttr(IntegerType))
    max_seqlen_k = operand_def(BaseAttr(IntegerType))
    logsumexp = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    custom_mask_type = operand_def(BaseAttr(IntegerType))
    bias_requires_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    num_splits_key = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    shared_storage_dqdkdv = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out_ `,` $query `,` $key `,` $value `,` $bias `,` $out `,` $cu_seqlens_q `,` $cu_seqlens_k `,` $max_seqlen_q `,` $max_seqlen_k `,` $logsumexp `,` $dropout_p `,` $philox_seed `,` $philox_offset `,` $custom_mask_type `,` $bias_requires_grad `,` $scale `,` $num_splits_key `,` $window_size `,` $shared_storage_dqdkdv attr-dict `:` type($grad_out_) `,` type($query) `,` type($key) `,` type($value) `,` type($bias) `,` type($out) `,` type($cu_seqlens_q) `,` type($cu_seqlens_k) `,` type($max_seqlen_q) `,` type($max_seqlen_k) `,` type($logsumexp) `,` type($dropout_p) `,` type($philox_seed) `,` type($philox_offset) `,` type($custom_mask_type) `,` type($bias_requires_grad) `,` type($scale) `,` type($num_splits_key) `,` type($window_size) `,` type($shared_storage_dqdkdv) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EfficientAttentionForwardOp(IRDLOperation):
    name = "torch.aten._efficient_attention_forward"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cu_seqlens_q = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cu_seqlens_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen_q = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    custom_mask_type = operand_def(BaseAttr(IntegerType))
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    seqlen_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    max_seqlen_batch_q = result_def(BaseAttr(IntegerType))
    max_seqlen_batch_k = result_def(BaseAttr(IntegerType))

    assembly_format = "$query `,` $key `,` $value `,` $bias `,` $cu_seqlens_q `,` $cu_seqlens_k `,` $max_seqlen_q `,` $max_seqlen_k `,` $dropout_p `,` $custom_mask_type `,` $compute_log_sumexp `,` $scale `,` $seqlen_k `,` $window_size attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($bias) `,` type($cu_seqlens_q) `,` type($cu_seqlens_k) `,` type($max_seqlen_q) `,` type($max_seqlen_k) `,` type($dropout_p) `,` type($custom_mask_type) `,` type($compute_log_sumexp) `,` type($scale) `,` type($seqlen_k) `,` type($window_size) `->` type($output) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($max_seqlen_batch_q) `,` type($max_seqlen_batch_k)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    bag_size = operand_def(BaseAttr(TensorType))
    maximum_indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $offsets `,` $offset2bag `,` $bag_size `,` $maximum_indices `,` $num_weights `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $padding_idx attr-dict `:` type($grad) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($bag_size) `,` type($maximum_indices) `,` type($num_weights) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagDenseBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_dense_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    bag_size = operand_def(BaseAttr(TensorType))
    maximum_indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $offset2bag `,` $bag_size `,` $maximum_indices `,` $num_weights `,` $scale_grad_by_freq `,` $mode `,` $per_sample_weights `,` $padding_idx attr-dict `:` type($grad) `,` type($indices) `,` type($offset2bag) `,` type($bag_size) `,` type($maximum_indices) `,` type($num_weights) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($per_sample_weights) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagForwardOnlyOp(IRDLOperation):
    name = "torch.aten._embedding_bag_forward_only"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagOp(IRDLOperation):
    name = "torch.aten._embedding_bag"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_per_sample_weights_backward"
    grad = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    mode = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $weight `,` $indices `,` $offsets `,` $offset2bag `,` $mode `,` $padding_idx attr-dict `:` type($grad) `,` type($weight) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($mode) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagSparseBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_sparse_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    bag_size = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $offsets `,` $offset2bag `,` $bag_size `,` $num_weights `,` $scale_grad_by_freq `,` $mode `,` $per_sample_weights `,` $padding_idx attr-dict `:` type($grad) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($bag_size) `,` type($num_weights) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($per_sample_weights) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EuclideanDistOp(IRDLOperation):
    name = "torch.aten._euclidean_dist"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$x1 `,` $x2 attr-dict `:` type($x1) `,` type($x2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_FakeQuantizeLearnablePerChannelAffineBackwardOp(IRDLOperation):
    name = "torch.aten._fake_quantize_learnable_per_channel_affine_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    grad_factor = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $scale `,` $zero_point `,` $axis `,` $quant_min `,` $quant_max `,` $grad_factor attr-dict `:` type($grad) `,` type($self) `,` type($scale) `,` type($zero_point) `,` type($axis) `,` type($quant_min) `,` type($quant_max) `,` type($grad_factor) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_FakeQuantizeLearnablePerChannelAffineOp(IRDLOperation):
    name = "torch.aten._fake_quantize_learnable_per_channel_affine"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    grad_factor = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $axis `,` $quant_min `,` $quant_max `,` $grad_factor attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($axis) `,` type($quant_min) `,` type($quant_max) `,` type($grad_factor) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FakeQuantizeLearnablePerTensorAffineBackwardOp(IRDLOperation):
    name = "torch.aten._fake_quantize_learnable_per_tensor_affine_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    grad_factor = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $scale `,` $zero_point `,` $quant_min `,` $quant_max `,` $grad_factor attr-dict `:` type($grad) `,` type($self) `,` type($scale) `,` type($zero_point) `,` type($quant_min) `,` type($quant_max) `,` type($grad_factor) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_FakeQuantizeLearnablePerTensorAffineOp(IRDLOperation):
    name = "torch.aten._fake_quantize_learnable_per_tensor_affine"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    grad_factor = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $quant_min `,` $quant_max `,` $grad_factor attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($quant_min) `,` type($quant_max) `,` type($grad_factor) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FakeQuantizePerTensorAffineCachemaskTensorQparamsOp(IRDLOperation):
    name = "torch.aten._fake_quantize_per_tensor_affine_cachemask_tensor_qparams"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    fake_quant_enabled = operand_def(BaseAttr(TensorType))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $fake_quant_enabled `,` $quant_min `,` $quant_max attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($fake_quant_enabled) `,` type($quant_min) `,` type($quant_max) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_Aten_FftC2COp(IRDLOperation):
    name = "torch.aten._fft_c2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    forward = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $forward attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($forward) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FftC2ROp(IRDLOperation):
    name = "torch.aten._fft_c2r"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    last_dim_size = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $last_dim_size attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($last_dim_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FftR2COp(IRDLOperation):
    name = "torch.aten._fft_r2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    onesided = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $onesided attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($onesided) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FillMemEffDropoutMask_Op(IRDLOperation):
    name = "torch.aten._fill_mem_eff_dropout_mask_"
    self = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    seed = operand_def(BaseAttr(IntegerType))
    offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dropout_p `,` $seed `,` $offset attr-dict `:` type($self) `,` type($dropout_p) `,` type($seed) `,` type($offset) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FlashAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._flash_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size_left = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size_right = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $philox_seed `,` $philox_offset `,` $scale `,` $window_size_left `,` $window_size_right attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($philox_seed) `,` type($philox_offset) `,` type($scale) `,` type($window_size_left) `,` type($window_size_right) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_FlashAttentionForwardOp(IRDLOperation):
    name = "torch.aten._flash_attention_forward"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cum_seq_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size_left = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    window_size_right = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    seqused_k = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    alibi_slopes = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    softmax_logsumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale `,` $window_size_left `,` $window_size_right `,` $seqused_k `,` $alibi_slopes attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `,` type($window_size_left) `,` type($window_size_right) `,` type($seqused_k) `,` type($alibi_slopes) `->` type($output) `,` type($softmax_logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_FoobarOp(IRDLOperation):
    name = "torch.aten._foobar"
    self = operand_def(BaseAttr(TensorType))
    arg1 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    arg2 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    arg3 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $arg1 `,` $arg2 `,` $arg3 attr-dict `:` type($self) `,` type($arg1) `,` type($arg2) `,` type($arg3) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachAbsOp(IRDLOperation):
    name = "torch.aten._foreach_abs"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachAbs_Op(IRDLOperation):
    name = "torch.aten._foreach_abs_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachAcosOp(IRDLOperation):
    name = "torch.aten._foreach_acos"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachAcos_Op(IRDLOperation):
    name = "torch.aten._foreach_acos_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachAsinOp(IRDLOperation):
    name = "torch.aten._foreach_asin"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachAsin_Op(IRDLOperation):
    name = "torch.aten._foreach_asin_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachAtanOp(IRDLOperation):
    name = "torch.aten._foreach_atan"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachAtan_Op(IRDLOperation):
    name = "torch.aten._foreach_atan_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachCeilOp(IRDLOperation):
    name = "torch.aten._foreach_ceil"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachCeil_Op(IRDLOperation):
    name = "torch.aten._foreach_ceil_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachCopyOp(IRDLOperation):
    name = "torch.aten._foreach_copy"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    src = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    self_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($self_out)"


@irdl_op_definition
class Torch_Aten_ForeachCopy_Op(IRDLOperation):
    name = "torch.aten._foreach_copy_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    src = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking)"


@irdl_op_definition
class Torch_Aten_ForeachCosOp(IRDLOperation):
    name = "torch.aten._foreach_cos"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachCos_Op(IRDLOperation):
    name = "torch.aten._foreach_cos_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachCoshOp(IRDLOperation):
    name = "torch.aten._foreach_cosh"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachCosh_Op(IRDLOperation):
    name = "torch.aten._foreach_cosh_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachErfOp(IRDLOperation):
    name = "torch.aten._foreach_erf"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachErf_Op(IRDLOperation):
    name = "torch.aten._foreach_erf_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachErfcOp(IRDLOperation):
    name = "torch.aten._foreach_erfc"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachErfc_Op(IRDLOperation):
    name = "torch.aten._foreach_erfc_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachExpOp(IRDLOperation):
    name = "torch.aten._foreach_exp"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachExp_Op(IRDLOperation):
    name = "torch.aten._foreach_exp_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachExpm1Op(IRDLOperation):
    name = "torch.aten._foreach_expm1"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachExpm1_Op(IRDLOperation):
    name = "torch.aten._foreach_expm1_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachFloorOp(IRDLOperation):
    name = "torch.aten._foreach_floor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachFloor_Op(IRDLOperation):
    name = "torch.aten._foreach_floor_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachFracOp(IRDLOperation):
    name = "torch.aten._foreach_frac"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachFrac_Op(IRDLOperation):
    name = "torch.aten._foreach_frac_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachLgammaOp(IRDLOperation):
    name = "torch.aten._foreach_lgamma"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachLgamma_Op(IRDLOperation):
    name = "torch.aten._foreach_lgamma_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachLog10Op(IRDLOperation):
    name = "torch.aten._foreach_log10"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachLog10_Op(IRDLOperation):
    name = "torch.aten._foreach_log10_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachLog1POp(IRDLOperation):
    name = "torch.aten._foreach_log1p"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachLog1P_Op(IRDLOperation):
    name = "torch.aten._foreach_log1p_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachLog2Op(IRDLOperation):
    name = "torch.aten._foreach_log2"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachLog2_Op(IRDLOperation):
    name = "torch.aten._foreach_log2_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachLogOp(IRDLOperation):
    name = "torch.aten._foreach_log"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachLog_Op(IRDLOperation):
    name = "torch.aten._foreach_log_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachMaxOp(IRDLOperation):
    name = "torch.aten._foreach_max"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachNegOp(IRDLOperation):
    name = "torch.aten._foreach_neg"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachNeg_Op(IRDLOperation):
    name = "torch.aten._foreach_neg_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachReciprocalOp(IRDLOperation):
    name = "torch.aten._foreach_reciprocal"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachReciprocal_Op(IRDLOperation):
    name = "torch.aten._foreach_reciprocal_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachRoundOp(IRDLOperation):
    name = "torch.aten._foreach_round"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachRound_Op(IRDLOperation):
    name = "torch.aten._foreach_round_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachRsqrtOp(IRDLOperation):
    name = "torch.aten._foreach_rsqrt"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachRsqrt_Op(IRDLOperation):
    name = "torch.aten._foreach_rsqrt_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachSigmoidOp(IRDLOperation):
    name = "torch.aten._foreach_sigmoid"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachSigmoid_Op(IRDLOperation):
    name = "torch.aten._foreach_sigmoid_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachSignOp(IRDLOperation):
    name = "torch.aten._foreach_sign"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachSign_Op(IRDLOperation):
    name = "torch.aten._foreach_sign_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachSinOp(IRDLOperation):
    name = "torch.aten._foreach_sin"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachSin_Op(IRDLOperation):
    name = "torch.aten._foreach_sin_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachSinhOp(IRDLOperation):
    name = "torch.aten._foreach_sinh"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachSinh_Op(IRDLOperation):
    name = "torch.aten._foreach_sinh_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachSqrtOp(IRDLOperation):
    name = "torch.aten._foreach_sqrt"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachSqrt_Op(IRDLOperation):
    name = "torch.aten._foreach_sqrt_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachTanOp(IRDLOperation):
    name = "torch.aten._foreach_tan"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachTan_Op(IRDLOperation):
    name = "torch.aten._foreach_tan_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachTanhOp(IRDLOperation):
    name = "torch.aten._foreach_tanh"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachTanh_Op(IRDLOperation):
    name = "torch.aten._foreach_tanh_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachTruncOp(IRDLOperation):
    name = "torch.aten._foreach_trunc"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ForeachTrunc_Op(IRDLOperation):
    name = "torch.aten._foreach_trunc_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_ForeachZero_Op(IRDLOperation):
    name = "torch.aten._foreach_zero_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_FunctionalSymConstrainRangeForSizeOp(IRDLOperation):
    name = "torch.aten._functional_sym_constrain_range_for_size"
    size = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dep_token = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$size `,` $min `,` $max `,` $dep_token attr-dict `:` type($size) `,` type($min) `,` type($max) `,` type($dep_token) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FunctionalSymConstrainRangeOp(IRDLOperation):
    name = "torch.aten._functional_sym_constrain_range"
    size = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dep_token = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$size `,` $min `,` $max `,` $dep_token attr-dict `:` type($size) `,` type($min) `,` type($max) `,` type($dep_token) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FusedAdagrad_Op(IRDLOperation):
    name = "torch.aten._fused_adagrad_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_sums = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    lr_decay = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $state_sums `,` $state_steps `,` $lr `,` $lr_decay `,` $weight_decay `,` $eps `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($state_sums) `,` type($state_steps) `,` type($lr) `,` type($lr_decay) `,` type($weight_decay) `,` type($eps) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdamOp(IRDLOperation):
    name = "torch.aten._fused_adam"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    self_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf) `->` type($self_out) `,` type($grads_out) `,` type($exp_avgs_out) `,` type($exp_avg_sqs_out) `,` type($max_exp_avg_sqs_out)"


@irdl_op_definition
class Torch_Aten_FusedAdamTensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adam.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    self_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf) `->` type($self_out) `,` type($grads_out) `,` type($exp_avgs_out) `,` type($exp_avg_sqs_out) `,` type($max_exp_avg_sqs_out)"


@irdl_op_definition
class Torch_Aten_FusedAdamTensorLrOutOp(IRDLOperation):
    name = "torch.aten._fused_adam.tensor_lr_out"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf `,` $out attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf) `,` type($out)"


@irdl_op_definition
class Torch_Aten_FusedAdam_Op(IRDLOperation):
    name = "torch.aten._fused_adam_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdam_TensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adam_.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdamw_Op(IRDLOperation):
    name = "torch.aten._fused_adamw_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdamw_TensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adamw_.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedMovingAvgObsFqHelperOp(IRDLOperation):
    name = "torch.aten._fused_moving_avg_obs_fq_helper"
    self = operand_def(BaseAttr(TensorType))
    observer_on = operand_def(BaseAttr(TensorType))
    fake_quant_on = operand_def(BaseAttr(TensorType))
    running_min = operand_def(BaseAttr(TensorType))
    running_max = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    averaging_const = operand_def(BaseAttr(Float64Type))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    ch_axis = operand_def(BaseAttr(IntegerType))
    per_row_fake_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    symmetric_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $observer_on `,` $fake_quant_on `,` $running_min `,` $running_max `,` $scale `,` $zero_point `,` $averaging_const `,` $quant_min `,` $quant_max `,` $ch_axis `,` $per_row_fake_quant `,` $symmetric_quant attr-dict `:` type($self) `,` type($observer_on) `,` type($fake_quant_on) `,` type($running_min) `,` type($running_max) `,` type($scale) `,` type($zero_point) `,` type($averaging_const) `,` type($quant_min) `,` type($quant_max) `,` type($ch_axis) `,` type($per_row_fake_quant) `,` type($symmetric_quant) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_Aten_FusedSdpChoiceOp(IRDLOperation):
    name = "torch.aten._fused_sdp_choice"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    enable_gqa = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_mask `,` $dropout_p `,` $is_causal `,` $scale `,` $enable_gqa attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_mask) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `,` type($enable_gqa) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FusedSgd_Op(IRDLOperation):
    name = "torch.aten._fused_sgd_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    momentum_buffer_list = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_decay = operand_def(BaseAttr(Float64Type))
    momentum = operand_def(BaseAttr(Float64Type))
    lr = operand_def(BaseAttr(Float64Type))
    dampening = operand_def(BaseAttr(Float64Type))
    nesterov = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    is_first_step = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $momentum_buffer_list `,` $weight_decay `,` $momentum `,` $lr `,` $dampening `,` $nesterov `,` $maximize `,` $is_first_step `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($momentum_buffer_list) `,` type($weight_decay) `,` type($momentum) `,` type($lr) `,` type($dampening) `,` type($nesterov) `,` type($maximize) `,` type($is_first_step) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedSgd_TensorLrOp(IRDLOperation):
    name = "torch.aten._fused_sgd_.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    momentum_buffer_list = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_decay = operand_def(BaseAttr(Float64Type))
    momentum = operand_def(BaseAttr(Float64Type))
    lr = operand_def(BaseAttr(TensorType))
    dampening = operand_def(BaseAttr(Float64Type))
    nesterov = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    is_first_step = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    grad_scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    found_inf = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$self `,` $grads `,` $momentum_buffer_list `,` $weight_decay `,` $momentum `,` $lr `,` $dampening `,` $nesterov `,` $maximize `,` $is_first_step `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($momentum_buffer_list) `,` type($weight_decay) `,` type($momentum) `,` type($lr) `,` type($dampening) `,` type($nesterov) `,` type($maximize) `,` type($is_first_step) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FwPrimalCopyOp(IRDLOperation):
    name = "torch.aten._fw_primal_copy"
    self = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $level attr-dict `:` type($self) `,` type($level) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_FwPrimalOp(IRDLOperation):
    name = "torch.aten._fw_primal"
    self = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $level attr-dict `:` type($self) `,` type($level) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_GatherSparseBackwardOp(IRDLOperation):
    name = "torch.aten._gather_sparse_backward"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    grad = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($grad) `->` type($result)"


@irdl_op_definition
class Torch_Aten_GridSampler2DCpuFallbackBackwardOp(IRDLOperation):
    name = "torch.aten._grid_sampler_2d_cpu_fallback_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($grad_output) `,` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_GridSampler2DCpuFallbackOp(IRDLOperation):
    name = "torch.aten._grid_sampler_2d_cpu_fallback"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_Aten_HasSameStorageNumelOp(IRDLOperation):
    name = "torch.aten._has_same_storage_numel"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_HistogramddBinEdgesOp(IRDLOperation):
    name = "torch.aten._histogramdd_bin_edges"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    range = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $bins `,` $range `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($range) `,` type($weight) `,` type($density) `->` type($result)"


@irdl_op_definition
class Torch_Aten_HistogramddFromBinCtsOp(IRDLOperation):
    name = "torch.aten._histogramdd_from_bin_cts"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    range = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $bins `,` $range `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($range) `,` type($weight) `,` type($density) `->` type($result)"


@irdl_op_definition
class Torch_Aten_HistogramddFromBinTensorsOp(IRDLOperation):
    name = "torch.aten._histogramdd_from_bin_tensors"
    self = operand_def(BaseAttr(TensorType))
    bins = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    density = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $bins `,` $weight `,` $density attr-dict `:` type($self) `,` type($bins) `,` type($weight) `,` type($density) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Iand_ScalarOp(IRDLOperation):
    name = "torch.aten.__iand__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Iand_TensorOp(IRDLOperation):
    name = "torch.aten.__iand__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ilshift_ScalarOp(IRDLOperation):
    name = "torch.aten.__ilshift__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ilshift_TensorOp(IRDLOperation):
    name = "torch.aten.__ilshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_IndexPutImpl_HackedTwinOp(IRDLOperation):
    name = "torch.aten._index_put_impl_.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unsafe = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate `,` $unsafe attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `,` type($unsafe) `->` type($result)"


@irdl_op_definition
class Torch_Aten_IndicesCopyOp(IRDLOperation):
    name = "torch.aten._indices_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_IndicesOp(IRDLOperation):
    name = "torch.aten._indices"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_IntMmOp(IRDLOperation):
    name = "torch.aten._int_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ior_ScalarOp(IRDLOperation):
    name = "torch.aten.__ior__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ior_TensorOp(IRDLOperation):
    name = "torch.aten.__ior__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Irshift_ScalarOp(IRDLOperation):
    name = "torch.aten.__irshift__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Irshift_TensorOp(IRDLOperation):
    name = "torch.aten.__irshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_IsAllTrueOp(IRDLOperation):
    name = "torch.aten._is_all_true"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_IsAnyTrueOp(IRDLOperation):
    name = "torch.aten._is_any_true"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_IsZerotensorOp(IRDLOperation):
    name = "torch.aten._is_zerotensor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Ixor_ScalarOp(IRDLOperation):
    name = "torch.aten.__ixor__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ixor_TensorOp(IRDLOperation):
    name = "torch.aten.__ixor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_JaggedToPaddedDenseForwardOp(IRDLOperation):
    name = "torch.aten._jagged_to_padded_dense_forward"
    values = operand_def(BaseAttr(TensorType))
    offsets = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding_value = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$values `,` $offsets `,` $max_lengths `,` $padding_value attr-dict `:` type($values) `,` type($offsets) `,` type($max_lengths) `,` type($padding_value) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LazyCloneOp(IRDLOperation):
    name = "torch.aten._lazy_clone"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LinalgDetOp(IRDLOperation):
    name = "torch.aten._linalg_det"
    A = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$A attr-dict `:` type($A) `->` type($result) `,` type($LU) `,` type($pivots)"
    )


@irdl_op_definition
class Torch_Aten_LinalgEigvalsOp(IRDLOperation):
    name = "torch.aten._linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LinalgSlogdetOp(IRDLOperation):
    name = "torch.aten._linalg_slogdet"
    A = operand_def(BaseAttr(TensorType))
    sign = result_def(BaseAttr(TensorType))
    logabsdet = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($sign) `,` type($logabsdet) `,` type($LU) `,` type($pivots)"


@irdl_op_definition
class Torch_Aten_LinalgSolveExOp(IRDLOperation):
    name = "torch.aten._linalg_solve_ex"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left `,` $check_errors attr-dict `:` type($A) `,` type($B) `,` type($left) `,` type($check_errors) `->` type($result) `,` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_Aten_ListToTensorOp(IRDLOperation):
    name = "torch.aten._list_to_tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LocalScalarDenseOp(IRDLOperation):
    name = "torch.aten._local_scalar_dense"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._log_softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxOp(IRDLOperation):
    name = "torch.aten._log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogcumsumexpOp(IRDLOperation):
    name = "torch.aten._logcumsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Lshift_IntOp(IRDLOperation):
    name = "torch.aten.__lshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_ScalarOp(IRDLOperation):
    name = "torch.aten.__lshift__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Lshift_ScalarOutOp(IRDLOperation):
    name = "torch.aten.__lshift__.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_TensorOp(IRDLOperation):
    name = "torch.aten.__lshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Lshift_TensorOutOp(IRDLOperation):
    name = "torch.aten.__lshift__.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LstmMpsOp(IRDLOperation):
    name = "torch.aten._lstm_mps"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))
    result5 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4) `,` type($result5)"


@irdl_op_definition
class Torch_Aten_LuWithInfoOp(IRDLOperation):
    name = "torch.aten._lu_with_info"
    self = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $pivot `,` $check_errors attr-dict `:` type($self) `,` type($pivot) `,` type($check_errors) `->` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_Aten_MakeDualCopyOp(IRDLOperation):
    name = "torch.aten._make_dual_copy"
    primal = operand_def(BaseAttr(TensorType))
    tangent = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$primal `,` $tangent `,` $level attr-dict `:` type($primal) `,` type($tangent) `,` type($level) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MakeDualOp(IRDLOperation):
    name = "torch.aten._make_dual"
    primal = operand_def(BaseAttr(TensorType))
    tangent = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$primal `,` $tangent `,` $level attr-dict `:` type($primal) `,` type($tangent) `,` type($level) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MakePerChannelQuantizedTensorOp(IRDLOperation):
    name = "torch.aten._make_per_channel_quantized_tensor"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    axis = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point `,` $axis attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `,` type($axis) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MakePerTensorQuantizedTensorOp(IRDLOperation):
    name = "torch.aten._make_per_tensor_quantized_tensor"
    self = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $scale `,` $zero_point attr-dict `:` type($self) `,` type($scale) `,` type($zero_point) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MaskedScaleOp(IRDLOperation):
    name = "torch.aten._masked_scale"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $scale attr-dict `:` type($self) `,` type($mask) `,` type($scale) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MaskedSoftmaxBackwardOp(IRDLOperation):
    name = "torch.aten._masked_softmax_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $mask `,` $dim attr-dict `:` type($grad_output) `,` type($output) `,` type($mask) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MaskedSoftmaxOp(IRDLOperation):
    name = "torch.aten._masked_softmax"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mask_type = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $dim `,` $mask_type attr-dict `:` type($self) `,` type($mask) `,` type($dim) `,` type($mask_type) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MkldnnReshapeOp(IRDLOperation):
    name = "torch.aten._mkldnn_reshape"
    self = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $shape attr-dict `:` type($self) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_MkldnnTransposeOp(IRDLOperation):
    name = "torch.aten._mkldnn_transpose"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MkldnnTranspose_Op(IRDLOperation):
    name = "torch.aten._mkldnn_transpose_"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MpsConvolutionOp(IRDLOperation):
    name = "torch.aten._mps_convolution"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $bias `,` $padding `,` $stride `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($stride) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_Aten_MpsConvolutionTransposeOp(IRDLOperation):
    name = "torch.aten._mps_convolution_transpose"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $padding `,` $output_padding `,` $stride `,` $dilation `,` $groups attr-dict `:` type($self) `,` type($weight) `,` type($padding) `,` type($output_padding) `,` type($stride) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitFunctionalOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_functional"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    running_mean_out = result_def(BaseAttr(TensorType))
    running_var_out = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($running_mean_out) `,` type($running_var_out)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoStatsOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.no_stats"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoStatsOutOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.no_stats_out"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    out = operand_def(BaseAttr(TensorType))
    save_mean = operand_def(BaseAttr(TensorType))
    save_invstd = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $training `,` $momentum `,` $eps `,` $out `,` $save_mean `,` $save_invstd attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($training) `,` type($momentum) `,` type($eps) `,` type($out) `,` type($save_mean) `,` type($save_invstd) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoTrainingOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_no_training"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeMultiHeadAttentionOp(IRDLOperation):
    name = "torch.aten._native_multi_head_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    embed_dim = operand_def(BaseAttr(IntegerType))
    num_head = operand_def(BaseAttr(IntegerType))
    qkv_weight = operand_def(BaseAttr(TensorType))
    qkv_bias = operand_def(BaseAttr(TensorType))
    proj_weight = operand_def(BaseAttr(TensorType))
    proj_bias = operand_def(BaseAttr(TensorType))
    mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    need_weights = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    average_attn_weights = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mask_type = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $embed_dim `,` $num_head `,` $qkv_weight `,` $qkv_bias `,` $proj_weight `,` $proj_bias `,` $mask `,` $need_weights `,` $average_attn_weights `,` $mask_type attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($embed_dim) `,` type($num_head) `,` type($qkv_weight) `,` type($qkv_bias) `,` type($proj_weight) `,` type($proj_bias) `,` type($mask) `,` type($need_weights) `,` type($average_attn_weights) `,` type($mask_type) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_NegViewCopyOp(IRDLOperation):
    name = "torch.aten._neg_view_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NegViewOp(IRDLOperation):
    name = "torch.aten._neg_view"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedComputeContiguousStridesOffsetsOp(IRDLOperation):
    name = "torch.aten._nested_compute_contiguous_strides_offsets"
    nested_size = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$nested_size attr-dict `:` type($nested_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_NestedFromPaddedAndNestedExampleOp(IRDLOperation):
    name = "torch.aten._nested_from_padded_and_nested_example"
    padded = operand_def(BaseAttr(TensorType))
    nt_example = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$padded `,` $nt_example attr-dict `:` type($padded) `,` type($nt_example) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedFromPaddedOp(IRDLOperation):
    name = "torch.aten._nested_from_padded"
    padded = operand_def(BaseAttr(TensorType))
    cpu_nested_shape_example = operand_def(BaseAttr(TensorType))
    fuse_transform_0213 = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$padded `,` $cpu_nested_shape_example `,` $fuse_transform_0213 attr-dict `:` type($padded) `,` type($cpu_nested_shape_example) `,` type($fuse_transform_0213) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedFromPaddedTensorOp(IRDLOperation):
    name = "torch.aten._nested_from_padded_tensor"
    padded = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    dummy = operand_def(BaseAttr(TensorType))
    ragged_idx = operand_def(BaseAttr(IntegerType))
    min_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    sum_S = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$padded `,` $offsets `,` $dummy `,` $ragged_idx `,` $min_seqlen `,` $max_seqlen `,` $sum_S attr-dict `:` type($padded) `,` type($offsets) `,` type($dummy) `,` type($ragged_idx) `,` type($min_seqlen) `,` type($max_seqlen) `,` type($sum_S) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetJaggedDummyOp(IRDLOperation):
    name = "torch.aten._nested_get_jagged_dummy"
    any = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$any attr-dict `:` type($any) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetLengthsOp(IRDLOperation):
    name = "torch.aten._nested_get_lengths"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetMaxSeqlenOp(IRDLOperation):
    name = "torch.aten._nested_get_max_seqlen"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetMinSeqlenOp(IRDLOperation):
    name = "torch.aten._nested_get_min_seqlen"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetOffsetsOp(IRDLOperation):
    name = "torch.aten._nested_get_offsets"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetRaggedIdxOp(IRDLOperation):
    name = "torch.aten._nested_get_ragged_idx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetValuesCopyOp(IRDLOperation):
    name = "torch.aten._nested_get_values_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedGetValuesOp(IRDLOperation):
    name = "torch.aten._nested_get_values"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedSelectBackwardOp(IRDLOperation):
    name = "torch.aten._nested_select_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim `,` $index attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedSumBackwardOp(IRDLOperation):
    name = "torch.aten._nested_sum_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $dim `,` $keepdim attr-dict `:` type($grad) `,` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedTensorFromMaskLeftAlignedOp(IRDLOperation):
    name = "torch.aten._nested_tensor_from_mask_left_aligned"
    t = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$t `,` $mask attr-dict `:` type($t) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_NestedTensorFromMaskOp(IRDLOperation):
    name = "torch.aten._nested_tensor_from_mask"
    t = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    mask_check = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$t `,` $mask `,` $mask_check attr-dict `:` type($t) `,` type($mask) `,` type($mask_check) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedTensorSizeOp(IRDLOperation):
    name = "torch.aten._nested_tensor_size"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedTensorSoftmaxWithShapeOp(IRDLOperation):
    name = "torch.aten._nested_tensor_softmax_with_shape"
    self = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $query attr-dict `:` type($self) `,` type($query) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_NestedTensorStorageOffsetsOp(IRDLOperation):
    name = "torch.aten._nested_tensor_storage_offsets"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedTensorStridesOp(IRDLOperation):
    name = "torch.aten._nested_tensor_strides"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferCopyOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer_copy"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromJaggedCopyOp(IRDLOperation):
    name = "torch.aten._nested_view_from_jagged_copy"
    self = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    dummy = operand_def(BaseAttr(TensorType))
    lengths = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    ragged_idx = operand_def(BaseAttr(IntegerType))
    min_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offsets `,` $dummy `,` $lengths `,` $ragged_idx `,` $min_seqlen `,` $max_seqlen attr-dict `:` type($self) `,` type($offsets) `,` type($dummy) `,` type($lengths) `,` type($ragged_idx) `,` type($min_seqlen) `,` type($max_seqlen) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromJaggedOp(IRDLOperation):
    name = "torch.aten._nested_view_from_jagged"
    self = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    dummy = operand_def(BaseAttr(TensorType))
    lengths = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    ragged_idx = operand_def(BaseAttr(IntegerType))
    min_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max_seqlen = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offsets `,` $dummy `,` $lengths `,` $ragged_idx `,` $min_seqlen `,` $max_seqlen attr-dict `:` type($self) `,` type($offsets) `,` type($dummy) `,` type($lengths) `,` type($ragged_idx) `,` type($min_seqlen) `,` type($max_seqlen) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NewZerosWithSameFeatureMetaOp(IRDLOperation):
    name = "torch.aten._new_zeros_with_same_feature_meta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    self_num_batch_dims = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $self_num_batch_dims attr-dict `:` type($self) `,` type($other) `,` type($self_num_batch_dims) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NnpackAvailableOp(IRDLOperation):
    name = "torch.aten._nnpack_available"
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_Aten_NnpackSpatialConvolutionOp(IRDLOperation):
    name = "torch.aten._nnpack_spatial_convolution"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $padding `,` $stride attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NnzOp(IRDLOperation):
    name = "torch.aten._nnz"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_BoolOp(IRDLOperation):
    name = "torch.aten.__or__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_IntOp(IRDLOperation):
    name = "torch.aten.__or__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_ScalarOp(IRDLOperation):
    name = "torch.aten.__or__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Or_TensorOp(IRDLOperation):
    name = "torch.aten.__or__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PackPaddedSequenceBackwardOp(IRDLOperation):
    name = "torch.aten._pack_padded_sequence_backward"
    grad = operand_def(BaseAttr(TensorType))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    batch_sizes = operand_def(BaseAttr(TensorType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $input_size `,` $batch_sizes `,` $batch_first attr-dict `:` type($grad) `,` type($input_size) `,` type($batch_sizes) `,` type($batch_first) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PackPaddedSequenceOp(IRDLOperation):
    name = "torch.aten._pack_padded_sequence"
    input = operand_def(BaseAttr(TensorType))
    lengths = operand_def(BaseAttr(TensorType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $lengths `,` $batch_first attr-dict `:` type($input) `,` type($lengths) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PadCircularOp(IRDLOperation):
    name = "torch.aten._pad_circular"
    self = operand_def(BaseAttr(TensorType))
    pad = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $pad attr-dict `:` type($self) `,` type($pad) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PadEnumOp(IRDLOperation):
    name = "torch.aten._pad_enum"
    self = operand_def(BaseAttr(TensorType))
    pad = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mode = operand_def(BaseAttr(IntegerType))
    value = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $pad `,` $mode `,` $value attr-dict `:` type($self) `,` type($pad) `,` type($mode) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PadPackedSequenceOp(IRDLOperation):
    name = "torch.aten._pad_packed_sequence"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    total_length = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $batch_first `,` $padding_value `,` $total_length attr-dict `:` type($data) `,` type($batch_sizes) `,` type($batch_first) `,` type($padding_value) `,` type($total_length) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PaddedDenseToJaggedForwardOp(IRDLOperation):
    name = "torch.aten._padded_dense_to_jagged_forward"
    dense = operand_def(BaseAttr(TensorType))
    offsets = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    total_L = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$dense `,` $offsets `,` $total_L attr-dict `:` type($dense) `,` type($offsets) `,` type($total_L) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PdistBackwardOp(IRDLOperation):
    name = "torch.aten._pdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    pdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $p `,` $pdist attr-dict `:` type($grad) `,` type($self) `,` type($p) `,` type($pdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PdistForwardOp(IRDLOperation):
    name = "torch.aten._pdist_forward"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PreluKernelBackwardOp(IRDLOperation):
    name = "torch.aten._prelu_kernel_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $weight attr-dict `:` type($grad_output) `,` type($self) `,` type($weight) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PreluKernelOp(IRDLOperation):
    name = "torch.aten._prelu_kernel"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PropagateXlaDataOp(IRDLOperation):
    name = "torch.aten._propagate_xla_data"
    input = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output attr-dict `:` type($input) `,` type($output)"


@irdl_op_definition
class Torch_Aten_RemoveBatchDimOp(IRDLOperation):
    name = "torch.aten._remove_batch_dim"
    self = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    batch_size = operand_def(BaseAttr(IntegerType))
    out_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $level `,` $batch_size `,` $out_dim attr-dict `:` type($self) `,` type($level) `,` type($batch_size) `,` type($out_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ReshapeAliasCopyOp(IRDLOperation):
    name = "torch.aten._reshape_alias_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride attr-dict `:` type($self) `,` type($size) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ReshapeAliasOp(IRDLOperation):
    name = "torch.aten._reshape_alias"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride attr-dict `:` type($self) `,` type($size) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ReshapeCopyOp(IRDLOperation):
    name = "torch.aten._reshape_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_ReshapeFromTensorOp(IRDLOperation):
    name = "torch.aten._reshape_from_tensor"
    self = operand_def(BaseAttr(TensorType))
    shape = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $shape attr-dict `:` type($self) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_RowwisePruneOp(IRDLOperation):
    name = "torch.aten._rowwise_prune"
    weight = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    compressed_indices_dtype = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $mask `,` $compressed_indices_dtype attr-dict `:` type($weight) `,` type($mask) `,` type($compressed_indices_dtype) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_Rshift_IntOp(IRDLOperation):
    name = "torch.aten.__rshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_ScalarOp(IRDLOperation):
    name = "torch.aten.__rshift__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Rshift_ScalarOutOp(IRDLOperation):
    name = "torch.aten.__rshift__.Scalar_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_TensorOp(IRDLOperation):
    name = "torch.aten.__rshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Rshift_TensorOutOp(IRDLOperation):
    name = "torch.aten.__rshift__.Tensor_out"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SafeSoftmaxOp(IRDLOperation):
    name = "torch.aten._safe_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SaturateWeightToFp16Op(IRDLOperation):
    name = "torch.aten._saturate_weight_to_fp16"
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight attr-dict `:` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductAttentionMathForMpsOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_attention_math_for_mps"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dropout_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_mask `,` $dropout_p `,` $is_causal `,` $dropout_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_mask) `,` type($dropout_p) `,` type($is_causal) `,` type($dropout_mask) `,` type($scale) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductAttentionMathOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_attention_math"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dropout_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    enable_gqa = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_mask `,` $dropout_p `,` $is_causal `,` $dropout_mask `,` $scale `,` $enable_gqa attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_mask) `,` type($dropout_p) `,` type($is_causal) `,` type($dropout_mask) `,` type($scale) `,` type($enable_gqa) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductCudnnAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_cudnn_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $philox_seed `,` $philox_offset `,` $attn_bias `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($attn_bias) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductCudnnAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_cudnn_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    cum_seq_q = result_def(BaseAttr(TensorType))
    cum_seq_k = result_def(BaseAttr(TensorType))
    max_q = result_def(BaseAttr(IntegerType))
    max_k = result_def(BaseAttr(IntegerType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_bias `,` $compute_log_sumexp `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($compute_log_sumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `->` type($output) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductEfficientAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_efficient_attention_backward"
    grad_out_ = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    grad_input_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out_ `,` $query `,` $key `,` $value `,` $attn_bias `,` $out `,` $logsumexp `,` $philox_seed `,` $philox_offset `,` $dropout_p `,` $grad_input_mask `,` $is_causal `,` $scale attr-dict `:` type($grad_out_) `,` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($out) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($dropout_p) `,` type($grad_input_mask) `,` type($is_causal) `,` type($scale) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductEfficientAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_efficient_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    log_sumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_bias `,` $compute_log_sumexp `,` $dropout_p `,` $is_causal `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($compute_log_sumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `->` type($output) `,` type($log_sumexp) `,` type($philox_seed) `,` type($philox_offset)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_query = result_def(BaseAttr(TensorType))
    grad_key = result_def(BaseAttr(TensorType))
    grad_value = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $philox_seed `,` $philox_offset `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($philox_seed) `,` type($philox_offset) `,` type($scale) `->` type($grad_query) `,` type($grad_key) `,` type($grad_value)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionForCpuBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_for_cpu_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_query = result_def(BaseAttr(TensorType))
    grad_key = result_def(BaseAttr(TensorType))
    grad_value = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $dropout_p `,` $is_causal `,` $attn_mask `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($attn_mask) `,` type($scale) `->` type($grad_query) `,` type($grad_key) `,` type($grad_value)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionForCpuOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_for_cpu"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    attn_mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $dropout_p `,` $is_causal `,` $attn_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($dropout_p) `,` type($is_causal) `,` type($attn_mask) `,` type($scale) `->` type($output) `,` type($logsumexp)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    cum_seq_q = result_def(BaseAttr(TensorType))
    cum_seq_k = result_def(BaseAttr(TensorType))
    max_q = result_def(BaseAttr(IntegerType))
    max_k = result_def(BaseAttr(IntegerType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `->` type($output) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFusedAttentionOverrideableBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_fused_attention_overrideable_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(BaseAttr(TensorType))
    grad_input_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_query = result_def(BaseAttr(TensorType))
    grad_key = result_def(BaseAttr(TensorType))
    grad_value = result_def(BaseAttr(TensorType))
    grad_attn_bias = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $attn_bias `,` $grad_input_mask `,` $out `,` $logsumexp `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $philox_seed `,` $philox_offset `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($grad_input_mask) `,` type($out) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($philox_seed) `,` type($philox_offset) `,` type($scale) `->` type($grad_query) `,` type($grad_key) `,` type($grad_value) `,` type($grad_attn_bias)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFusedAttentionOverrideableOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_fused_attention_overrideable"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    cum_seq_q = result_def(BaseAttr(TensorType))
    cum_seq_k = result_def(BaseAttr(TensorType))
    max_q = result_def(BaseAttr(IntegerType))
    max_k = result_def(BaseAttr(IntegerType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $attn_bias `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `->` type($output) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_ScaledMmOp(IRDLOperation):
    name = "torch.aten._scaled_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    scale_a = operand_def(BaseAttr(TensorType))
    scale_b = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_result = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    out_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    use_fast_accum = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $scale_a `,` $scale_b `,` $bias `,` $scale_result `,` $out_dtype `,` $use_fast_accum attr-dict `:` type($self) `,` type($mat2) `,` type($scale_a) `,` type($scale_b) `,` type($bias) `,` type($scale_result) `,` type($out_dtype) `,` type($use_fast_accum) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ShapeAsTensorOp(IRDLOperation):
    name = "torch.aten._shape_as_tensor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SlowConv2DForwardOp(IRDLOperation):
    name = "torch.aten._slow_conv2d_forward"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SlowConv2DForwardOutputOp(IRDLOperation):
    name = "torch.aten._slow_conv2d_forward.output"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight `,` $kernel_size `,` $bias `,` $stride `,` $padding `,` $output attr-dict `:` type($self) `,` type($weight) `,` type($kernel_size) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SobolEngineDrawOp(IRDLOperation):
    name = "torch.aten._sobol_engine_draw"
    quasi = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    sobolstate = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    num_generated = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$quasi `,` $n `,` $sobolstate `,` $dimension `,` $num_generated `,` $dtype attr-dict `:` type($quasi) `,` type($n) `,` type($sobolstate) `,` type($dimension) `,` type($num_generated) `,` type($dtype) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_SobolEngineFf_Op(IRDLOperation):
    name = "torch.aten._sobol_engine_ff_"
    self = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(IntegerType))
    sobolstate = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    num_generated = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $n `,` $sobolstate `,` $dimension `,` $num_generated attr-dict `:` type($self) `,` type($n) `,` type($sobolstate) `,` type($dimension) `,` type($num_generated) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SobolEngineInitializeState_Op(IRDLOperation):
    name = "torch.aten._sobol_engine_initialize_state_"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension attr-dict `:` type($self) `,` type($dimension) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SobolEngineScramble_Op(IRDLOperation):
    name = "torch.aten._sobol_engine_scramble_"
    self = operand_def(BaseAttr(TensorType))
    ltm = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $ltm `,` $dimension attr-dict `:` type($self) `,` type($ltm) `,` type($dimension) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SoftmaxOp(IRDLOperation):
    name = "torch.aten._softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseAddmmOp(IRDLOperation):
    name = "torch.aten._sparse_addmm"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseBroadcastToCopyOp(IRDLOperation):
    name = "torch.aten._sparse_broadcast_to_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SparseBroadcastToOp(IRDLOperation):
    name = "torch.aten._sparse_broadcast_to"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SparseLogSoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._sparse_log_softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $self attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseLogSoftmaxIntOp(IRDLOperation):
    name = "torch.aten._sparse_log_softmax.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseLogSoftmaxOp(IRDLOperation):
    name = "torch.aten._sparse_log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseMaskProjectionOp(IRDLOperation):
    name = "torch.aten._sparse_mask_projection"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    accumulate_matches = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $accumulate_matches attr-dict `:` type($self) `,` type($mask) `,` type($accumulate_matches) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseMmOp(IRDLOperation):
    name = "torch.aten._sparse_mm"
    sparse = operand_def(BaseAttr(TensorType))
    dense = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$sparse `,` $dense attr-dict `:` type($sparse) `,` type($dense) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSemiStructuredAddmmOp(IRDLOperation):
    name = "torch.aten._sparse_semi_structured_addmm"
    input = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat1_meta = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    out_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $mat1 `,` $mat1_meta `,` $mat2 `,` $alpha `,` $beta `,` $out_dtype attr-dict `:` type($input) `,` type($mat1) `,` type($mat1_meta) `,` type($mat2) `,` type($alpha) `,` type($beta) `,` type($out_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSemiStructuredApplyDenseOp(IRDLOperation):
    name = "torch.aten._sparse_semi_structured_apply_dense"
    input = operand_def(BaseAttr(TensorType))
    thread_masks = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $thread_masks attr-dict `:` type($input) `,` type($thread_masks) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSemiStructuredApplyOp(IRDLOperation):
    name = "torch.aten._sparse_semi_structured_apply"
    input = operand_def(BaseAttr(TensorType))
    thread_masks = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $thread_masks attr-dict `:` type($input) `,` type($thread_masks) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_SparseSemiStructuredMmOp(IRDLOperation):
    name = "torch.aten._sparse_semi_structured_mm"
    mat1 = operand_def(BaseAttr(TensorType))
    mat1_meta = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    out_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$mat1 `,` $mat1_meta `,` $mat2 `,` $out_dtype attr-dict `:` type($mat1) `,` type($mat1_meta) `,` type($mat2) `,` type($out_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._sparse_softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $self attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSoftmaxIntOp(IRDLOperation):
    name = "torch.aten._sparse_softmax.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSoftmaxOp(IRDLOperation):
    name = "torch.aten._sparse_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSparseMatmulOp(IRDLOperation):
    name = "torch.aten._sparse_sparse_matmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SparseSumBackwardOp(IRDLOperation):
    name = "torch.aten._sparse_sum_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $dim attr-dict `:` type($grad) `,` type($self) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSumDimDtypeOp(IRDLOperation):
    name = "torch.aten._sparse_sum.dim_dtype"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSumDimOp(IRDLOperation):
    name = "torch.aten._sparse_sum.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SparseSumDimOutOp(IRDLOperation):
    name = "torch.aten._sparse_sum.dim_out"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $out attr-dict `:` type($self) `,` type($dim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSumDtypeOp(IRDLOperation):
    name = "torch.aten._sparse_sum.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SparseSumOp(IRDLOperation):
    name = "torch.aten._sparse_sum"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SpdiagsOp(IRDLOperation):
    name = "torch.aten._spdiags"
    diagonals = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    layout = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$diagonals `,` $offsets `,` $shape `,` $layout attr-dict `:` type($diagonals) `,` type($offsets) `,` type($shape) `,` type($layout) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SpsolveOp(IRDLOperation):
    name = "torch.aten._spsolve"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left attr-dict `:` type($A) `,` type($B) `,` type($left) `->` type($result)"


@irdl_op_definition
class Torch_Aten_StackOp(IRDLOperation):
    name = "torch.aten._stack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_StandardGammaGradOp(IRDLOperation):
    name = "torch.aten._standard_gamma_grad"
    self = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output attr-dict `:` type($self) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestAutogradMultipleDispatchViewCopyOp(IRDLOperation):
    name = "torch.aten._test_autograd_multiple_dispatch_view_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestAutogradMultipleDispatchViewOp(IRDLOperation):
    name = "torch.aten._test_autograd_multiple_dispatch_view"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestCheckTensorOp(IRDLOperation):
    name = "torch.aten._test_check_tensor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestFunctorchFallbackOp(IRDLOperation):
    name = "torch.aten._test_functorch_fallback"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_TestOptionalFilledIntlistOp(IRDLOperation):
    name = "torch.aten._test_optional_filled_intlist"
    values = operand_def(BaseAttr(TensorType))
    addends = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$values `,` $addends attr-dict `:` type($values) `,` type($addends) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestOptionalFloatlistOp(IRDLOperation):
    name = "torch.aten._test_optional_floatlist"
    values = operand_def(BaseAttr(TensorType))
    addends = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$values `,` $addends attr-dict `:` type($values) `,` type($addends) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestOptionalIntlistOp(IRDLOperation):
    name = "torch.aten._test_optional_intlist"
    values = operand_def(BaseAttr(TensorType))
    addends = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$values `,` $addends attr-dict `:` type($values) `,` type($addends) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestParallelMaterializeOp(IRDLOperation):
    name = "torch.aten._test_parallel_materialize"
    self = operand_def(BaseAttr(TensorType))
    num_parallel = operand_def(BaseAttr(IntegerType))
    skip_first = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $num_parallel `,` $skip_first attr-dict `:` type($self) `,` type($num_parallel) `,` type($skip_first) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestSerializationSubcmulOp(IRDLOperation):
    name = "torch.aten._test_serialization_subcmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TestWarnInAutogradOp(IRDLOperation):
    name = "torch.aten._test_warn_in_autograd"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ThnnDifferentiableGruCellBackwardOp(IRDLOperation):
    name = "torch.aten._thnn_differentiable_gru_cell_backward"
    grad_hy = operand_def(BaseAttr(TensorType))
    input_gates = operand_def(BaseAttr(TensorType))
    hidden_gates = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    input_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hidden_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_hy `,` $input_gates `,` $hidden_gates `,` $hx `,` $input_bias `,` $hidden_bias attr-dict `:` type($grad_hy) `,` type($input_gates) `,` type($hidden_gates) `,` type($hx) `,` type($input_bias) `,` type($hidden_bias) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_ThnnDifferentiableLstmCellBackwardOp(IRDLOperation):
    name = "torch.aten._thnn_differentiable_lstm_cell_backward"
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    input_gates = operand_def(BaseAttr(TensorType))
    hidden_gates = operand_def(BaseAttr(TensorType))
    input_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hidden_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cx = operand_def(BaseAttr(TensorType))
    cy = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_hy `,` $grad_cy `,` $input_gates `,` $hidden_gates `,` $input_bias `,` $hidden_bias `,` $cx `,` $cy attr-dict `:` type($grad_hy) `,` type($grad_cy) `,` type($input_gates) `,` type($hidden_gates) `,` type($input_bias) `,` type($hidden_bias) `,` type($cx) `,` type($cy) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_ThnnFusedGruCellBackwardOp(IRDLOperation):
    name = "torch.aten._thnn_fused_gru_cell_backward"
    grad_hy = operand_def(BaseAttr(TensorType))
    workspace = operand_def(BaseAttr(TensorType))
    has_bias = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_hy `,` $workspace `,` $has_bias attr-dict `:` type($grad_hy) `,` type($workspace) `,` type($has_bias) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_ThnnFusedGruCellOp(IRDLOperation):
    name = "torch.aten._thnn_fused_gru_cell"
    input_gates = operand_def(BaseAttr(TensorType))
    hidden_gates = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    input_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hidden_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input_gates `,` $hidden_gates `,` $hx `,` $input_bias `,` $hidden_bias attr-dict `:` type($input_gates) `,` type($hidden_gates) `,` type($hx) `,` type($input_bias) `,` type($hidden_bias) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_ThnnFusedLstmCellBackwardImplOp(IRDLOperation):
    name = "torch.aten._thnn_fused_lstm_cell_backward_impl"
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cx = operand_def(BaseAttr(TensorType))
    cy = operand_def(BaseAttr(TensorType))
    workspace = operand_def(BaseAttr(TensorType))
    has_bias = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_hy `,` $grad_cy `,` $cx `,` $cy `,` $workspace `,` $has_bias attr-dict `:` type($grad_hy) `,` type($grad_cy) `,` type($cx) `,` type($cy) `,` type($workspace) `,` type($has_bias) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ThnnFusedLstmCellBackwardOp(IRDLOperation):
    name = "torch.aten._thnn_fused_lstm_cell_backward"
    grad_hy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_cy = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    cx = operand_def(BaseAttr(TensorType))
    cy = operand_def(BaseAttr(TensorType))
    workspace = operand_def(BaseAttr(TensorType))
    has_bias = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_hy `,` $grad_cy `,` $cx `,` $cy `,` $workspace `,` $has_bias attr-dict `:` type($grad_hy) `,` type($grad_cy) `,` type($cx) `,` type($cy) `,` type($workspace) `,` type($has_bias) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_ThnnFusedLstmCellOp(IRDLOperation):
    name = "torch.aten._thnn_fused_lstm_cell"
    input_gates = operand_def(BaseAttr(TensorType))
    hidden_gates = operand_def(BaseAttr(TensorType))
    cx = operand_def(BaseAttr(TensorType))
    input_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    hidden_bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input_gates `,` $hidden_gates `,` $cx `,` $input_bias `,` $hidden_bias attr-dict `:` type($input_gates) `,` type($hidden_gates) `,` type($cx) `,` type($input_bias) `,` type($hidden_bias) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ToCpuOp(IRDLOperation):
    name = "torch.aten._to_cpu"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToDenseOp(IRDLOperation):
    name = "torch.aten._to_dense"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    masked_grad = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $masked_grad attr-dict `:` type($self) `,` type($dtype) `,` type($masked_grad) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseBscOp(IRDLOperation):
    name = "torch.aten._to_sparse_bsc"
    self = operand_def(BaseAttr(TensorType))
    blocksize = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseBsrOp(IRDLOperation):
    name = "torch.aten._to_sparse_bsr"
    self = operand_def(BaseAttr(TensorType))
    blocksize = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseCscOp(IRDLOperation):
    name = "torch.aten._to_sparse_csc"
    self = operand_def(BaseAttr(TensorType))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dense_dim attr-dict `:` type($self) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseCsrOp(IRDLOperation):
    name = "torch.aten._to_sparse_csr"
    self = operand_def(BaseAttr(TensorType))
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dense_dim attr-dict `:` type($self) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseOp(IRDLOperation):
    name = "torch.aten._to_sparse"
    self = operand_def(BaseAttr(TensorType))
    layout = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    blocksize = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    dense_dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $layout `,` $blocksize `,` $dense_dim attr-dict `:` type($self) `,` type($layout) `,` type($blocksize) `,` type($dense_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseSemiStructuredOp(IRDLOperation):
    name = "torch.aten._to_sparse_semi_structured"
    dense = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$dense attr-dict `:` type($dense) `->` type($result0) `,` type($result1)"
    )


@irdl_op_definition
class Torch_Aten_ToSparseSparseDimOp(IRDLOperation):
    name = "torch.aten._to_sparse.sparse_dim"
    self = operand_def(BaseAttr(TensorType))
    sparse_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sparse_dim attr-dict `:` type($self) `,` type($sparse_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ToSparseSparseDimOutOp(IRDLOperation):
    name = "torch.aten._to_sparse.sparse_dim_out"
    self = operand_def(BaseAttr(TensorType))
    sparse_dim = operand_def(BaseAttr(IntegerType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sparse_dim `,` $out attr-dict `:` type($self) `,` type($sparse_dim) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TransformBiasRescaleQkvOp(IRDLOperation):
    name = "torch.aten._transform_bias_rescale_qkv"
    qkv = operand_def(BaseAttr(TensorType))
    qkv_bias = operand_def(BaseAttr(TensorType))
    num_heads = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$qkv `,` $qkv_bias `,` $num_heads attr-dict `:` type($qkv) `,` type($qkv_bias) `,` type($num_heads) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_TransformerEncoderLayerFwdOp(IRDLOperation):
    name = "torch.aten._transformer_encoder_layer_fwd"
    src = operand_def(BaseAttr(TensorType))
    embed_dim = operand_def(BaseAttr(IntegerType))
    num_heads = operand_def(BaseAttr(IntegerType))
    qkv_weight = operand_def(BaseAttr(TensorType))
    qkv_bias = operand_def(BaseAttr(TensorType))
    proj_weight = operand_def(BaseAttr(TensorType))
    proj_bias = operand_def(BaseAttr(TensorType))
    use_gelu = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    norm_first = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    norm_weight_1 = operand_def(BaseAttr(TensorType))
    norm_bias_1 = operand_def(BaseAttr(TensorType))
    norm_weight_2 = operand_def(BaseAttr(TensorType))
    norm_bias_2 = operand_def(BaseAttr(TensorType))
    ffn_weight_1 = operand_def(BaseAttr(TensorType))
    ffn_bias_1 = operand_def(BaseAttr(TensorType))
    ffn_weight_2 = operand_def(BaseAttr(TensorType))
    ffn_bias_2 = operand_def(BaseAttr(TensorType))
    mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    mask_type = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$src `,` $embed_dim `,` $num_heads `,` $qkv_weight `,` $qkv_bias `,` $proj_weight `,` $proj_bias `,` $use_gelu `,` $norm_first `,` $eps `,` $norm_weight_1 `,` $norm_bias_1 `,` $norm_weight_2 `,` $norm_bias_2 `,` $ffn_weight_1 `,` $ffn_bias_1 `,` $ffn_weight_2 `,` $ffn_bias_2 `,` $mask `,` $mask_type attr-dict `:` type($src) `,` type($embed_dim) `,` type($num_heads) `,` type($qkv_weight) `,` type($qkv_bias) `,` type($proj_weight) `,` type($proj_bias) `,` type($use_gelu) `,` type($norm_first) `,` type($eps) `,` type($norm_weight_1) `,` type($norm_bias_1) `,` type($norm_weight_2) `,` type($norm_bias_2) `,` type($ffn_weight_1) `,` type($ffn_bias_1) `,` type($ffn_weight_2) `,` type($ffn_bias_2) `,` type($mask) `,` type($mask_type) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TrilinearOp(IRDLOperation):
    name = "torch.aten._trilinear"
    i1 = operand_def(BaseAttr(TensorType))
    i2 = operand_def(BaseAttr(TensorType))
    i3 = operand_def(BaseAttr(TensorType))
    expand1 = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    expand2 = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    expand3 = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    sumdim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    unroll_dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$i1 `,` $i2 `,` $i3 `,` $expand1 `,` $expand2 `,` $expand3 `,` $sumdim `,` $unroll_dim attr-dict `:` type($i1) `,` type($i2) `,` type($i3) `,` type($expand1) `,` type($expand2) `,` type($expand3) `,` type($sumdim) `,` type($unroll_dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TritonMultiHeadAttentionOp(IRDLOperation):
    name = "torch.aten._triton_multi_head_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    embed_dim = operand_def(BaseAttr(IntegerType))
    num_head = operand_def(BaseAttr(IntegerType))
    qkv_weight = operand_def(BaseAttr(TensorType))
    qkv_bias = operand_def(BaseAttr(TensorType))
    proj_weight = operand_def(BaseAttr(TensorType))
    proj_bias = operand_def(BaseAttr(TensorType))
    mask = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $embed_dim `,` $num_head `,` $qkv_weight `,` $qkv_bias `,` $proj_weight `,` $proj_bias `,` $mask attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($embed_dim) `,` type($num_head) `,` type($qkv_weight) `,` type($qkv_bias) `,` type($proj_weight) `,` type($proj_bias) `,` type($mask) `->` type($result)"


@irdl_op_definition
class Torch_Aten_TritonScaledDotAttentionOp(IRDLOperation):
    name = "torch.aten._triton_scaled_dot_attention"
    q = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(TensorType))
    v = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$q `,` $k `,` $v `,` $dropout_p attr-dict `:` type($q) `,` type($k) `,` type($v) `,` type($dropout_p) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Unique2Op(IRDLOperation):
    name = "torch.aten._unique2"
    self = operand_def(BaseAttr(TensorType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_UniqueOp(IRDLOperation):
    name = "torch.aten._unique"
    self = operand_def(BaseAttr(TensorType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sorted `,` $return_inverse attr-dict `:` type($self) `,` type($sorted) `,` type($return_inverse) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_UnpackDualOp(IRDLOperation):
    name = "torch.aten._unpack_dual"
    dual = operand_def(BaseAttr(TensorType))
    level = operand_def(BaseAttr(IntegerType))
    primal = result_def(BaseAttr(TensorType))
    tangent = result_def(BaseAttr(TensorType))

    assembly_format = "$dual `,` $level attr-dict `:` type($dual) `,` type($level) `->` type($primal) `,` type($tangent)"


@irdl_op_definition
class Torch_Aten_UnsafeIndexPutHackedTwinOp(IRDLOperation):
    name = "torch.aten._unsafe_index_put.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UnsafeIndexTensorHackedTwinOp(IRDLOperation):
    name = "torch.aten._unsafe_index.Tensor_hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices attr-dict `:` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UnsafeViewOp(IRDLOperation):
    name = "torch.aten._unsafe_view"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaVecOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaVecOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_d `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_h = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scales_w = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UseCudnnCtcLossOp(IRDLOperation):
    name = "torch.aten._use_cudnn_ctc_loss"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    target_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    blank = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UseCudnnCtcLossTensorOp(IRDLOperation):
    name = "torch.aten._use_cudnn_ctc_loss.Tensor"
    log_probs = operand_def(BaseAttr(TensorType))
    targets = operand_def(BaseAttr(TensorType))
    input_lengths = operand_def(BaseAttr(TensorType))
    target_lengths = operand_def(BaseAttr(TensorType))
    blank = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$log_probs `,` $targets `,` $input_lengths `,` $target_lengths `,` $blank attr-dict `:` type($log_probs) `,` type($targets) `,` type($input_lengths) `,` type($target_lengths) `,` type($blank) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UseCudnnRnnFlattenWeightOp(IRDLOperation):
    name = "torch.aten._use_cudnn_rnn_flatten_weight"
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_Aten_ValidateCompressedSparseIndicesOp(IRDLOperation):
    name = "torch.aten._validate_compressed_sparse_indices"
    is_crow = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    compressed_idx = operand_def(BaseAttr(TensorType))
    plain_idx = operand_def(BaseAttr(TensorType))
    cdim = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    nnz = operand_def(BaseAttr(IntegerType))

    assembly_format = "$is_crow `,` $compressed_idx `,` $plain_idx `,` $cdim `,` $dim `,` $nnz attr-dict `:` type($is_crow) `,` type($compressed_idx) `,` type($plain_idx) `,` type($cdim) `,` type($dim) `,` type($nnz)"


@irdl_op_definition
class Torch_Aten_ValidateSparseBscTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_bsc_tensor_args"
    ccol_indices = operand_def(BaseAttr(TensorType))
    row_indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$ccol_indices `,` $row_indices `,` $values `,` $size attr-dict `:` type($ccol_indices) `,` type($row_indices) `,` type($values) `,` type($size)"


@irdl_op_definition
class Torch_Aten_ValidateSparseBsrTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_bsr_tensor_args"
    crow_indices = operand_def(BaseAttr(TensorType))
    col_indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$crow_indices `,` $col_indices `,` $values `,` $size attr-dict `:` type($crow_indices) `,` type($col_indices) `,` type($values) `,` type($size)"


@irdl_op_definition
class Torch_Aten_ValidateSparseCompressedTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_compressed_tensor_args"
    compressed_indices = operand_def(BaseAttr(TensorType))
    plain_indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    layout = operand_def(BaseAttr(IntegerType))

    assembly_format = "$compressed_indices `,` $plain_indices `,` $values `,` $size `,` $layout attr-dict `:` type($compressed_indices) `,` type($plain_indices) `,` type($values) `,` type($size) `,` type($layout)"


@irdl_op_definition
class Torch_Aten_ValidateSparseCooTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_coo_tensor_args"
    indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    is_coalesced = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )

    assembly_format = "$indices `,` $values `,` $size `,` $is_coalesced attr-dict `:` type($indices) `,` type($values) `,` type($size) `,` type($is_coalesced)"


@irdl_op_definition
class Torch_Aten_ValidateSparseCscTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_csc_tensor_args"
    ccol_indices = operand_def(BaseAttr(TensorType))
    row_indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$ccol_indices `,` $row_indices `,` $values `,` $size attr-dict `:` type($ccol_indices) `,` type($row_indices) `,` type($values) `,` type($size)"


@irdl_op_definition
class Torch_Aten_ValidateSparseCsrTensorArgsOp(IRDLOperation):
    name = "torch.aten._validate_sparse_csr_tensor_args"
    crow_indices = operand_def(BaseAttr(TensorType))
    col_indices = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$crow_indices `,` $col_indices `,` $values `,` $size attr-dict `:` type($crow_indices) `,` type($col_indices) `,` type($values) `,` type($size)"


@irdl_op_definition
class Torch_Aten_ValuesCopyOp(IRDLOperation):
    name = "torch.aten._values_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ValuesOp(IRDLOperation):
    name = "torch.aten._values"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_VersionOp(IRDLOperation):
    name = "torch.aten._version"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmForCpuOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt8PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int8pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    scales = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $scales attr-dict `:` type($self) `,` type($mat2) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightNormDifferentiableBackwardOp(IRDLOperation):
    name = "torch.aten._weight_norm_differentiable_backward"
    grad_w = operand_def(BaseAttr(TensorType))
    saved_v = operand_def(BaseAttr(TensorType))
    saved_g = operand_def(BaseAttr(TensorType))
    saved_norms = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_w `,` $saved_v `,` $saved_g `,` $saved_norms `,` $dim attr-dict `:` type($grad_w) `,` type($saved_v) `,` type($saved_g) `,` type($saved_norms) `,` type($dim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_WeightNormInterfaceBackwardOp(IRDLOperation):
    name = "torch.aten._weight_norm_interface_backward"
    grad_w = operand_def(BaseAttr(TensorType))
    saved_v = operand_def(BaseAttr(TensorType))
    saved_g = operand_def(BaseAttr(TensorType))
    saved_norms = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_w `,` $saved_v `,` $saved_g `,` $saved_norms `,` $dim attr-dict `:` type($grad_w) `,` type($saved_v) `,` type($saved_g) `,` type($saved_norms) `,` type($dim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_WeightNormInterfaceOp(IRDLOperation):
    name = "torch.aten._weight_norm_interface"
    v = operand_def(BaseAttr(TensorType))
    g = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$v `,` $g `,` $dim attr-dict `:` type($v) `,` type($g) `,` type($dim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_WeightNormOp(IRDLOperation):
    name = "torch.aten._weight_norm"
    v = operand_def(BaseAttr(TensorType))
    g = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$v `,` $g `,` $dim attr-dict `:` type($v) `,` type($g) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WrappedLinearPrepackOp(IRDLOperation):
    name = "torch.aten._wrapped_linear_prepack"
    weight = operand_def(BaseAttr(TensorType))
    weight_scale = operand_def(BaseAttr(TensorType))
    weight_zero_point = operand_def(BaseAttr(TensorType))
    bias = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $weight_scale `,` $weight_zero_point `,` $bias attr-dict `:` type($weight) `,` type($weight_scale) `,` type($weight_zero_point) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WrappedQuantizedLinearPrepackedOp(IRDLOperation):
    name = "torch.aten._wrapped_quantized_linear_prepacked"
    input = operand_def(BaseAttr(TensorType))
    input_scale = operand_def(BaseAttr(TensorType))
    input_zero_point = operand_def(BaseAttr(TensorType))
    packed_weight = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(TensorType))
    output_zero_point = operand_def(BaseAttr(TensorType))
    out_channel = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $input_scale `,` $input_zero_point `,` $packed_weight `,` $output_scale `,` $output_zero_point `,` $out_channel attr-dict `:` type($input) `,` type($input_scale) `,` type($input_zero_point) `,` type($packed_weight) `,` type($output_scale) `,` type($output_zero_point) `,` type($out_channel) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_BoolOp(IRDLOperation):
    name = "torch.aten.__xor__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_IntOp(IRDLOperation):
    name = "torch.aten.__xor__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_ScalarOp(IRDLOperation):
    name = "torch.aten.__xor__.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Xor_TensorOp(IRDLOperation):
    name = "torch.aten.__xor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_InductorAccumulateGrad_Op(IRDLOperation):
    name = "torch.inductor.accumulate_grad_"
    variable = operand_def(BaseAttr(TensorType))
    new_grad = operand_def(BaseAttr(TensorType))

    assembly_format = (
        "$variable `,` $new_grad attr-dict `:` type($variable) `,` type($new_grad)"
    )


@irdl_op_definition
class Torch_InductorResizeStorageBytes_Op(IRDLOperation):
    name = "torch.inductor.resize_storage_bytes_"
    variable = operand_def(BaseAttr(TensorType))
    new_size = operand_def(BaseAttr(IntegerType))

    assembly_format = (
        "$variable `,` $new_size attr-dict `:` type($variable) `,` type($new_size)"
    )


@irdl_op_definition
class Torch_PrimsAbsOp(IRDLOperation):
    name = "torch.prims.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcosOp(IRDLOperation):
    name = "torch.prims.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcoshOp(IRDLOperation):
    name = "torch.prims.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAddOp(IRDLOperation):
    name = "torch.prims.add"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAmaxOp(IRDLOperation):
    name = "torch.prims.amax"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAminOp(IRDLOperation):
    name = "torch.prims.amin"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsStridedOp(IRDLOperation):
    name = "torch.prims.as_strided"
    a = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($a) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsStridedScatterOp(IRDLOperation):
    name = "torch.prims.as_strided_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($src) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsinOp(IRDLOperation):
    name = "torch.prims.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsinhOp(IRDLOperation):
    name = "torch.prims.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtan2Op(IRDLOperation):
    name = "torch.prims.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAtanOp(IRDLOperation):
    name = "torch.prims.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtanhOp(IRDLOperation):
    name = "torch.prims.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0EOp(IRDLOperation):
    name = "torch.prims.bessel_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0Op(IRDLOperation):
    name = "torch.prims.bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1EOp(IRDLOperation):
    name = "torch.prims.bessel_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1Op(IRDLOperation):
    name = "torch.prims.bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ0Op(IRDLOperation):
    name = "torch.prims.bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ1Op(IRDLOperation):
    name = "torch.prims.bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseAndOp(IRDLOperation):
    name = "torch.prims.bitwise_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseNotOp(IRDLOperation):
    name = "torch.prims.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseOrOp(IRDLOperation):
    name = "torch.prims.bitwise_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseXorOp(IRDLOperation):
    name = "torch.prims.bitwise_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBroadcastInDimOp(IRDLOperation):
    name = "torch.prims.broadcast_in_dim"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    broadcast_dimensions = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $shape `,` $broadcast_dimensions attr-dict `:` type($a) `,` type($shape) `,` type($broadcast_dimensions) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCatOp(IRDLOperation):
    name = "torch.prims.cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCbrtOp(IRDLOperation):
    name = "torch.prims.cbrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCeilOp(IRDLOperation):
    name = "torch.prims.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCloneOp(IRDLOperation):
    name = "torch.prims.clone"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseOp(IRDLOperation):
    name = "torch.prims.collapse"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseViewOp(IRDLOperation):
    name = "torch.prims.collapse_view"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjOp(IRDLOperation):
    name = "torch.prims.conj"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjPhysicalOp(IRDLOperation):
    name = "torch.prims.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConvertElementTypeOp(IRDLOperation):
    name = "torch.prims.convert_element_type"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCopyStridedOp(IRDLOperation):
    name = "torch.prims.copy_strided"
    a = operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $stride attr-dict `:` type($a) `,` type($stride) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCopyToOp(IRDLOperation):
    name = "torch.prims.copy_to"
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCosOp(IRDLOperation):
    name = "torch.prims.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCoshOp(IRDLOperation):
    name = "torch.prims.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDigammaOp(IRDLOperation):
    name = "torch.prims.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDivOp(IRDLOperation):
    name = "torch.prims.div"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsEqOp(IRDLOperation):
    name = "torch.prims.eq"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsErfInvOp(IRDLOperation):
    name = "torch.prims.erf_inv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfOp(IRDLOperation):
    name = "torch.prims.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcOp(IRDLOperation):
    name = "torch.prims.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcxOp(IRDLOperation):
    name = "torch.prims.erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExp2Op(IRDLOperation):
    name = "torch.prims.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpOp(IRDLOperation):
    name = "torch.prims.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpm1Op(IRDLOperation):
    name = "torch.prims.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftC2COp(IRDLOperation):
    name = "torch.prims.fft_c2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    forward = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $forward attr-dict `:` type($self) `,` type($dim) `,` type($forward) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftC2ROp(IRDLOperation):
    name = "torch.prims.fft_c2r"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    last_dim_size = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $last_dim_size attr-dict `:` type($self) `,` type($dim) `,` type($last_dim_size) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftR2COp(IRDLOperation):
    name = "torch.prims.fft_r2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    onesided = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $onesided attr-dict `:` type($self) `,` type($dim) `,` type($onesided) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFillOp(IRDLOperation):
    name = "torch.prims.fill"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFloorOp(IRDLOperation):
    name = "torch.prims.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFmaxOp(IRDLOperation):
    name = "torch.prims.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFminOp(IRDLOperation):
    name = "torch.prims.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFmodOp(IRDLOperation):
    name = "torch.prims.fmod"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFrexpOp(IRDLOperation):
    name = "torch.prims.frexp"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_PrimsGcdOp(IRDLOperation):
    name = "torch.prims.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGeOp(IRDLOperation):
    name = "torch.prims.ge"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGtOp(IRDLOperation):
    name = "torch.prims.gt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsHypotOp(IRDLOperation):
    name = "torch.prims.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammaOp(IRDLOperation):
    name = "torch.prims.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammacOp(IRDLOperation):
    name = "torch.prims.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsImagOp(IRDLOperation):
    name = "torch.prims.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsIsfiniteOp(IRDLOperation):
    name = "torch.prims.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsItemOp(IRDLOperation):
    name = "torch.prims.item"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLeOp(IRDLOperation):
    name = "torch.prims.le"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsLgammaOp(IRDLOperation):
    name = "torch.prims.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog10Op(IRDLOperation):
    name = "torch.prims.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog1POp(IRDLOperation):
    name = "torch.prims.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog2Op(IRDLOperation):
    name = "torch.prims.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLogOp(IRDLOperation):
    name = "torch.prims.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLtOp(IRDLOperation):
    name = "torch.prims.lt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMaximumOp(IRDLOperation):
    name = "torch.prims.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMaximumValueOp(IRDLOperation):
    name = "torch.prims.maximum_value"
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$dtype attr-dict `:` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsMinimumOp(IRDLOperation):
    name = "torch.prims.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMinimumValueOp(IRDLOperation):
    name = "torch.prims.minimum_value"
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$dtype attr-dict `:` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsMulOp(IRDLOperation):
    name = "torch.prims.mul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNdtriOp(IRDLOperation):
    name = "torch.prims.ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNeOp(IRDLOperation):
    name = "torch.prims.ne"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNegOp(IRDLOperation):
    name = "torch.prims.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNextafterOp(IRDLOperation):
    name = "torch.prims.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsPowOp(IRDLOperation):
    name = "torch.prims.pow"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsProdOp(IRDLOperation):
    name = "torch.prims.prod"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRealOp(IRDLOperation):
    name = "torch.prims.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsReciprocalOp(IRDLOperation):
    name = "torch.prims.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRemainderOp(IRDLOperation):
    name = "torch.prims.remainder"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsReshapeOp(IRDLOperation):
    name = "torch.prims.reshape"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $shape attr-dict `:` type($a) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsResizeOp(IRDLOperation):
    name = "torch.prims.resize"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $shape attr-dict `:` type($a) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRevOp(IRDLOperation):
    name = "torch.prims.rev"
    a = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dims attr-dict `:` type($a) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRoundOp(IRDLOperation):
    name = "torch.prims.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRsqrtOp(IRDLOperation):
    name = "torch.prims.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsShiftLeftOp(IRDLOperation):
    name = "torch.prims.shift_left"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsShiftRightArithmeticOp(IRDLOperation):
    name = "torch.prims.shift_right_arithmetic"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSignOp(IRDLOperation):
    name = "torch.prims.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSignbitOp(IRDLOperation):
    name = "torch.prims.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinOp(IRDLOperation):
    name = "torch.prims.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinhOp(IRDLOperation):
    name = "torch.prims.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSphericalBesselJ0Op(IRDLOperation):
    name = "torch.prims.spherical_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSplitDimOp(IRDLOperation):
    name = "torch.prims.split_dim"
    a = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    outer_length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $dim `,` $outer_length attr-dict `:` type($a) `,` type($dim) `,` type($outer_length) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSqrtOp(IRDLOperation):
    name = "torch.prims.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSqueezeOp(IRDLOperation):
    name = "torch.prims.squeeze"
    a = operand_def(BaseAttr(TensorType))
    dimensions = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $dimensions attr-dict `:` type($a) `,` type($dimensions) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSubOp(IRDLOperation):
    name = "torch.prims.sub"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSumOp(IRDLOperation):
    name = "torch.prims.sum"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSvdOp(IRDLOperation):
    name = "torch.prims.svd"
    A = operand_def(BaseAttr(TensorType))
    full_matrices = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    Vh = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $full_matrices attr-dict `:` type($A) `,` type($full_matrices) `->` type($U) `,` type($S) `,` type($Vh)"


@irdl_op_definition
class Torch_PrimsTanOp(IRDLOperation):
    name = "torch.prims.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTanhOp(IRDLOperation):
    name = "torch.prims.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTransposeOp(IRDLOperation):
    name = "torch.prims.transpose"
    a = operand_def(BaseAttr(TensorType))
    permutation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $permutation attr-dict `:` type($a) `,` type($permutation) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTruncOp(IRDLOperation):
    name = "torch.prims.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsVarOp(IRDLOperation):
    name = "torch.prims.var"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $correction `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($correction) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsViewOfDtypeOp(IRDLOperation):
    name = "torch.prims.view_of_dtype"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsViewOfOp(IRDLOperation):
    name = "torch.prims.view_of"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsWhereOp(IRDLOperation):
    name = "torch.prims.where"
    pred = operand_def(BaseAttr(TensorType))
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$pred `,` $a `,` $b attr-dict `:` type($pred) `,` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsXorSumOp(IRDLOperation):
    name = "torch.prims.xor_sum"
    inp = operand_def(BaseAttr(TensorType))
    dims = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsZetaOp(IRDLOperation):
    name = "torch.prims.zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Prims_MakeTokenOp(IRDLOperation):
    name = "torch.prims._make_token"
    result = result_def(BaseAttr(TensorType))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_Prims_SinkTokensOp(IRDLOperation):
    name = "torch.prims._sink_tokens"
    tokens = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tokens attr-dict `:` type($tokens)"


@irdl_op_definition
class Torch_Profiler_RecordFunctionExitOp(IRDLOperation):
    name = "torch.profiler._record_function_exit"
    _0 = operand_def(BaseAttr(TensorType))

    assembly_format = "$_0 attr-dict `:` type($_0)"


@irdl_op_definition
class Torch_QuantizedDropoutOp(IRDLOperation):
    name = "torch.quantized.dropout"
    self = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    p = operand_def(AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type))))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_scale `,` $output_zero_point `,` $p `,` $training attr-dict `:` type($self) `,` type($output_scale) `,` type($output_zero_point) `,` type($p) `,` type($training) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedEluOp(IRDLOperation):
    name = "torch.quantized.elu"
    self = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    input_scale = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_scale `,` $output_zero_point `,` $alpha `,` $scale `,` $input_scale attr-dict `:` type($self) `,` type($output_scale) `,` type($output_zero_point) `,` type($alpha) `,` type($scale) `,` type($input_scale) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedHardswishOp(IRDLOperation):
    name = "torch.quantized.hardswish"
    input = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedInstanceNormOp(IRDLOperation):
    name = "torch.quantized.instance_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $eps `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedLayerNormOp(IRDLOperation):
    name = "torch.quantized.layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedLeakyReluOp(IRDLOperation):
    name = "torch.quantized.leaky_relu"
    qx = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    inplace = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$qx `,` $negative_slope `,` $inplace `,` $output_scale `,` $output_zero_point attr-dict `:` type($qx) `,` type($negative_slope) `,` type($inplace) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_ConstantNoneOp(IRDLOperation):
    name = "torch.constant.none"
    result = result_def(EqAttrConstraint(attr=NoneType(parameters=())))

    traits = traits_def(ConstantLike(), Pure())

    assembly_format = "attr-dict"


@irdl_op_definition
class Torch_PrimListConstructOp(IRDLOperation):
    name = "torch.prim.ListConstruct"
    elements = var_operand_def(AnyAttr())
    result = result_def(ContainerOf(elem_constr=AnyAttr()))

    traits = traits_def(Pure())

    assembly_format = "$elements attr-dict `:` functional-type($elements, $result)"


TorchDialect = Dialect(
    "torch",
    [
        Torch_AtenAbsOp,
        Torch_AtenAbs_Op,
        Torch_AtenAbsoluteOp,
        Torch_AtenAbsolute_Op,
        Torch_AtenAcosFloatOp,
        Torch_AtenAcosIntOp,
        Torch_AtenAcosOp,
        Torch_AtenAcosScalarOp,
        Torch_AtenAcos_Op,
        Torch_AtenAcoshFloatOp,
        Torch_AtenAcoshIntOp,
        Torch_AtenAcoshOp,
        Torch_AtenAcoshScalarOp,
        Torch_AtenAcosh_Op,
        Torch_AtenAdaptiveAvgPool1DOp,
        Torch_AtenAdaptiveAvgPool2DOp,
        Torch_AtenAdaptiveAvgPool3DOp,
        Torch_AtenAdaptiveMaxPool1DOp,
        Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool2DBackwardOp,
        Torch_AtenAdaptiveMaxPool2DOp,
        Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool3DBackwardOp,
        Torch_AtenAdaptiveMaxPool3DOp,
        Torch_AtenAddFloatIntOp,
        Torch_AtenAddFloatOp,
        Torch_AtenAddIntFloatOp,
        Torch_AtenAddIntOp,
        Torch_AtenAddOp,
        Torch_AtenAddScalarOp,
        Torch_AtenAddScalarOutOp,
        Torch_AtenAddTensorOp,
        Torch_AtenAdd_ScalarOp,
        Torch_AtenAdd_TensorOp,
        Torch_AtenAddbmmOp,
        Torch_AtenAddbmm_Op,
        Torch_AtenAddcdivOp,
        Torch_AtenAddcdiv_Op,
        Torch_AtenAddcmulOp,
        Torch_AtenAddcmul_Op,
        Torch_AtenAddmmOp,
        Torch_AtenAddmm_Op,
        Torch_AtenAddmvOp,
        Torch_AtenAddmv_Op,
        Torch_AtenAddrOp,
        Torch_AtenAddr_Op,
        Torch_AtenAdjointOp,
        Torch_AtenAffineGridGeneratorBackwardOp,
        Torch_AtenAffineGridGeneratorOp,
        Torch_AtenAliasCopyOp,
        Torch_AtenAliasOp,
        Torch_AtenAlignAsOp,
        Torch_AtenAlignTensorsOp,
        Torch_AtenAllAllOutOp,
        Torch_AtenAllBoolOp,
        Torch_AtenAllDimOp,
        Torch_AtenAllDimsOp,
        Torch_AtenAllDimsOutOp,
        Torch_AtenAllFloatOp,
        Torch_AtenAllIntOp,
        Torch_AtenAllOp,
        Torch_AtenAllcloseOp,
        Torch_AtenAlphaDropoutOp,
        Torch_AtenAlphaDropout_Op,
        Torch_AtenAmaxOp,
        Torch_AtenAminOp,
        Torch_AtenAminmaxOp,
        Torch_AtenAngleFloatOp,
        Torch_AtenAngleIntOp,
        Torch_AtenAngleOp,
        Torch_AtenAngleScalarOp,
        Torch_AtenAnyAllOutOp,
        Torch_AtenAnyBoolOp,
        Torch_AtenAnyDimOp,
        Torch_AtenAnyDimsOp,
        Torch_AtenAnyDimsOutOp,
        Torch_AtenAnyFloatOp,
        Torch_AtenAnyIntOp,
        Torch_AtenAnyOp,
        Torch_AtenArangeStartOutOp,
        Torch_AtenArccosOp,
        Torch_AtenArccos_Op,
        Torch_AtenArccoshOp,
        Torch_AtenArccosh_Op,
        Torch_AtenArcsinOp,
        Torch_AtenArcsin_Op,
        Torch_AtenArcsinhOp,
        Torch_AtenArcsinh_Op,
        Torch_AtenArctan2Op,
        Torch_AtenArctan2_Op,
        Torch_AtenArctanOp,
        Torch_AtenArctan_Op,
        Torch_AtenArctanhOp,
        Torch_AtenArctanh_Op,
        Torch_AtenArgmaxOp,
        Torch_AtenArgminOp,
        Torch_AtenArgsortOp,
        Torch_AtenArgsortStableOp,
        Torch_AtenArgsortStableOutOp,
        Torch_AtenArgwhereOp,
        Torch_AtenAsStridedCopyOp,
        Torch_AtenAsStridedOp,
        Torch_AtenAsStridedScatterOp,
        Torch_AtenAsStrided_Op,
        Torch_AtenAsinFloatOp,
        Torch_AtenAsinIntOp,
        Torch_AtenAsinOp,
        Torch_AtenAsinScalarOp,
        Torch_AtenAsin_Op,
        Torch_AtenAsinhFloatOp,
        Torch_AtenAsinhIntOp,
        Torch_AtenAsinhOp,
        Torch_AtenAsinhScalarOp,
        Torch_AtenAsinh_Op,
        Torch_AtenAtan2FloatIntOp,
        Torch_AtenAtan2FloatOp,
        Torch_AtenAtan2IntFloatOp,
        Torch_AtenAtan2IntOp,
        Torch_AtenAtan2Op,
        Torch_AtenAtan2ScalarScalarOp,
        Torch_AtenAtan2_Op,
        Torch_AtenAtanFloatOp,
        Torch_AtenAtanIntOp,
        Torch_AtenAtanOp,
        Torch_AtenAtanScalarOp,
        Torch_AtenAtan_Op,
        Torch_AtenAtanhFloatOp,
        Torch_AtenAtanhIntOp,
        Torch_AtenAtanhOp,
        Torch_AtenAtanhScalarOp,
        Torch_AtenAtanh_Op,
        Torch_AtenAtleast1DOp,
        Torch_AtenAtleast1DSequenceOp,
        Torch_AtenAtleast2DOp,
        Torch_AtenAtleast2DSequenceOp,
        Torch_AtenAtleast3DOp,
        Torch_AtenAtleast3DSequenceOp,
        Torch_AtenAvgPool1DOp,
        Torch_AtenAvgPool2DBackwardGradInputOp,
        Torch_AtenAvgPool2DBackwardOp,
        Torch_AtenAvgPool2DOp,
        Torch_AtenAvgPool3DBackwardGradInputOp,
        Torch_AtenAvgPool3DBackwardOp,
        Torch_AtenAvgPool3DOp,
        Torch_AtenBaddbmmOp,
        Torch_AtenBaddbmm_Op,
        Torch_AtenBartlettWindowPeriodicOutOp,
        Torch_AtenBatchNormBackwardElemtOp,
        Torch_AtenBatchNormBackwardOp,
        Torch_AtenBatchNormBackwardReduceOp,
        Torch_AtenBatchNormElemtOp,
        Torch_AtenBatchNormGatherStatsOp,
        Torch_AtenBatchNormGatherStatsWithCountsOp,
        Torch_AtenBatchNormOp,
        Torch_AtenBatchNormStatsOp,
        Torch_AtenBatchNormUpdateStatsOp,
        Torch_AtenBilinearOp,
        Torch_AtenBinaryCrossEntropyBackwardGradInputOp,
        Torch_AtenBinaryCrossEntropyBackwardOp,
        Torch_AtenBinaryCrossEntropyOp,
        Torch_AtenBinaryCrossEntropyWithLogitsOp,
        Torch_AtenBincountOp,
        Torch_AtenBitwiseAndScalarOp,
        Torch_AtenBitwiseAndScalarOutOp,
        Torch_AtenBitwiseAndScalarTensorOp,
        Torch_AtenBitwiseAndScalarTensorOutOp,
        Torch_AtenBitwiseAndTensorOp,
        Torch_AtenBitwiseAndTensorOutOp,
        Torch_AtenBitwiseAnd_ScalarOp,
        Torch_AtenBitwiseAnd_TensorOp,
        Torch_AtenBitwiseLeftShiftScalarTensorOp,
        Torch_AtenBitwiseLeftShiftScalarTensorOutOp,
        Torch_AtenBitwiseLeftShiftTensorOp,
        Torch_AtenBitwiseLeftShiftTensorOutOp,
        Torch_AtenBitwiseLeftShiftTensorScalarOp,
        Torch_AtenBitwiseLeftShiftTensorScalarOutOp,
        Torch_AtenBitwiseLeftShift_TensorOp,
        Torch_AtenBitwiseLeftShift_TensorScalarOp,
        Torch_AtenBitwiseNotOp,
        Torch_AtenBitwiseNot_Op,
        Torch_AtenBitwiseOrScalarOp,
        Torch_AtenBitwiseOrScalarOutOp,
        Torch_AtenBitwiseOrScalarTensorOp,
        Torch_AtenBitwiseOrScalarTensorOutOp,
        Torch_AtenBitwiseOrTensorOp,
        Torch_AtenBitwiseOrTensorOutOp,
        Torch_AtenBitwiseOr_ScalarOp,
        Torch_AtenBitwiseOr_TensorOp,
        Torch_AtenBitwiseRightShiftScalarTensorOp,
        Torch_AtenBitwiseRightShiftScalarTensorOutOp,
        Torch_AtenBitwiseRightShiftTensorOp,
        Torch_AtenBitwiseRightShiftTensorOutOp,
        Torch_AtenBitwiseRightShiftTensorScalarOp,
        Torch_AtenBitwiseRightShiftTensorScalarOutOp,
        Torch_AtenBitwiseRightShift_TensorOp,
        Torch_AtenBitwiseRightShift_TensorScalarOp,
        Torch_AtenBitwiseXorScalarOp,
        Torch_AtenBitwiseXorScalarOutOp,
        Torch_AtenBitwiseXorScalarTensorOp,
        Torch_AtenBitwiseXorScalarTensorOutOp,
        Torch_AtenBitwiseXorTensorOp,
        Torch_AtenBitwiseXorTensorOutOp,
        Torch_AtenBitwiseXor_ScalarOp,
        Torch_AtenBitwiseXor_TensorOp,
        Torch_AtenBlackmanWindowPeriodicOutOp,
        Torch_AtenBlockDiagOp,
        Torch_AtenBmmOp,
        Torch_AtenBroadcastTensorsOp,
        Torch_AtenBroadcastToOp,
        Torch_AtenBucketizeScalarOp,
        Torch_AtenBucketizeScalarOutOp,
        Torch_AtenBucketizeTensorOp,
        Torch_AtenBucketizeTensorOutOp,
        Torch_AtenCanCastOp,
        Torch_AtenCartesianProdOp,
        Torch_AtenCatOp,
        Torch_AtenCcolIndicesCopyOp,
        Torch_AtenCcolIndicesOp,
        Torch_AtenCdistOp,
        Torch_AtenCeilFloatOp,
        Torch_AtenCeilIntOp,
        Torch_AtenCeilOp,
        Torch_AtenCeilScalarOp,
        Torch_AtenCeil_Op,
        Torch_AtenCeluOp,
        Torch_AtenCelu_Op,
        Torch_AtenChainMatmulOp,
        Torch_AtenChalfOp,
        Torch_AtenChannelShuffleOp,
        Torch_AtenCholeskyInverseOp,
        Torch_AtenCholeskyOp,
        Torch_AtenCholeskySolveOp,
        Torch_AtenChooseQparamsOptimizedOp,
        Torch_AtenChunkOp,
        Torch_AtenClampMaxOp,
        Torch_AtenClampMaxTensorOp,
        Torch_AtenClampMaxTensorOutOp,
        Torch_AtenClampMax_Op,
        Torch_AtenClampMax_TensorOp,
        Torch_AtenClampMinOp,
        Torch_AtenClampMinTensorOp,
        Torch_AtenClampMinTensorOutOp,
        Torch_AtenClampMin_Op,
        Torch_AtenClampMin_TensorOp,
        Torch_AtenClampOp,
        Torch_AtenClampTensorOp,
        Torch_AtenClampTensorOutOp,
        Torch_AtenClamp_Op,
        Torch_AtenClamp_TensorOp,
        Torch_AtenClipOp,
        Torch_AtenClipTensorOp,
        Torch_AtenClipTensorOutOp,
        Torch_AtenClip_Op,
        Torch_AtenClip_TensorOp,
        Torch_AtenCloneOp,
        Torch_AtenCoalesceOp,
        Torch_AtenCol2ImOp,
        Torch_AtenColIndicesCopyOp,
        Torch_AtenColIndicesOp,
        Torch_AtenColumnStackOp,
        Torch_AtenCombinationsOp,
        Torch_AtenComplexOp,
        Torch_AtenConcatOp,
        Torch_AtenConcatenateOp,
        Torch_AtenConjOp,
        Torch_AtenConjPhysicalOp,
        Torch_AtenConjPhysical_Op,
        Torch_AtenConstantPadNdOp,
        Torch_AtenContiguousOp,
        Torch_AtenConv1DOp,
        Torch_AtenConv2DOp,
        Torch_AtenConv3DOp,
        Torch_AtenConvDepthwise3DOp,
        Torch_AtenConvTbcBackwardOp,
        Torch_AtenConvTbcOp,
        Torch_AtenConvTranspose1DOp,
        Torch_AtenConvolutionBackwardOp,
        Torch_AtenConvolutionBackwardOverrideableOp,
        Torch_AtenConvolutionOp,
        Torch_AtenConvolutionOverrideableOp,
        Torch_AtenCopyOp,
        Torch_AtenCopySparseToSparse_Op,
        Torch_AtenCopy_FloatOp,
        Torch_AtenCopy_IntOp,
        Torch_AtenCopy_Op,
        Torch_AtenCopy_TensorOp,
        Torch_AtenCopysignFloatIntOp,
        Torch_AtenCopysignFloatOp,
        Torch_AtenCopysignIntFloatOp,
        Torch_AtenCopysignIntOp,
        Torch_AtenCopysignOp,
        Torch_AtenCopysignScalarOp,
        Torch_AtenCopysignScalarOutOp,
        Torch_AtenCopysignTensorOp,
        Torch_AtenCopysign_ScalarOp,
        Torch_AtenCopysign_TensorOp,
        Torch_AtenCorrcoefOp,
        Torch_AtenCosFloatOp,
        Torch_AtenCosIntOp,
        Torch_AtenCosOp,
        Torch_AtenCosScalarOp,
        Torch_AtenCos_Op,
        Torch_AtenCoshFloatOp,
        Torch_AtenCoshIntOp,
        Torch_AtenCoshOp,
        Torch_AtenCoshScalarOp,
        Torch_AtenCosh_Op,
        Torch_AtenCosineEmbeddingLossOp,
        Torch_AtenCosineSimilarityOp,
        Torch_AtenCountNonzeroDimIntlistOp,
        Torch_AtenCountNonzeroDimIntlistOutOp,
        Torch_AtenCountNonzeroOp,
        Torch_AtenCovOp,
        Torch_AtenCrossEntropyLossOp,
        Torch_AtenCrossOp,
        Torch_AtenCrowIndicesCopyOp,
        Torch_AtenCrowIndicesOp,
        Torch_AtenCudnnAffineGridGeneratorBackwardOp,
        Torch_AtenCudnnAffineGridGeneratorOp,
        Torch_AtenCudnnBatchNormBackwardOp,
        Torch_AtenCudnnBatchNormOp,
        Torch_AtenCudnnConvolutionAddReluOp,
        Torch_AtenCudnnConvolutionOp,
        Torch_AtenCudnnConvolutionReluOp,
        Torch_AtenCudnnConvolutionTransposeOp,
        Torch_AtenCudnnGridSamplerBackwardOp,
        Torch_AtenCudnnGridSamplerOp,
        Torch_AtenCudnnIsAcceptableOp,
        Torch_AtenCummaxOp,
        Torch_AtenCummaxminBackwardOp,
        Torch_AtenCumminOp,
        Torch_AtenCumprodBackwardOp,
        Torch_AtenCumprodOp,
        Torch_AtenCumprod_Op,
        Torch_AtenCumsumOp,
        Torch_AtenCumsum_Op,
        Torch_AtenDataOp,
        Torch_AtenDeg2RadOp,
        Torch_AtenDeg2Rad_Op,
        Torch_AtenDenseDimOp,
        Torch_AtenDetOp,
        Torch_AtenDetachCopyOp,
        Torch_AtenDetachOp,
        Torch_AtenDetach_Op,
        Torch_AtenDiagEmbedOp,
        Torch_AtenDiagOp,
        Torch_AtenDiagflatOp,
        Torch_AtenDiagonalBackwardOp,
        Torch_AtenDiagonalCopyOp,
        Torch_AtenDiagonalOp,
        Torch_AtenDiagonalScatterOp,
        Torch_AtenDiffOp,
        Torch_AtenDigammaOp,
        Torch_AtenDigamma_Op,
        Torch_AtenDimOp,
        Torch_AtenDistOp,
        Torch_AtenDivFloatOp,
        Torch_AtenDivIntOp,
        Torch_AtenDivOp,
        Torch_AtenDivScalarOp,
        Torch_AtenDivScalarOutOp,
        Torch_AtenDivTensorOp,
        Torch_AtenDiv_ScalarOp,
        Torch_AtenDiv_TensorOp,
        Torch_AtenDivideScalarOp,
        Torch_AtenDivideTensorOp,
        Torch_AtenDivide_ScalarOp,
        Torch_AtenDivide_TensorOp,
        Torch_AtenDotOp,
        Torch_AtenDropoutOp,
        Torch_AtenDropout_Op,
        Torch_AtenDstackOp,
        Torch_AtenEinsumSublistOp,
        Torch_AtenEluBackwardGradInputOp,
        Torch_AtenEluBackwardOp,
        Torch_AtenEluOp,
        Torch_AtenElu_Op,
        Torch_AtenEmbeddingBackwardOp,
        Torch_AtenEmbeddingBagOp,
        Torch_AtenEmbeddingBagPaddingIdxOp,
        Torch_AtenEmbeddingDenseBackwardOp,
        Torch_AtenEmbeddingOp,
        Torch_AtenEmbeddingRenorm_Op,
        Torch_AtenEmbeddingSparseBackwardOp,
        Torch_AtenEqBoolListOp,
        Torch_AtenEqBoolOp,
        Torch_AtenEqFloatIntOp,
        Torch_AtenEqFloatListOp,
        Torch_AtenEqFloatOp,
        Torch_AtenEqIntFloatOp,
        Torch_AtenEqIntListOp,
        Torch_AtenEqIntOp,
        Torch_AtenEqOp,
        Torch_AtenEqScalarOp,
        Torch_AtenEqScalarOutOp,
        Torch_AtenEqTensorListOp,
        Torch_AtenEqTensorOp,
        Torch_AtenEqTensorOutOp,
        Torch_AtenEq_ScalarOp,
        Torch_AtenEq_TensorOp,
        Torch_AtenEqualOp,
        Torch_AtenErfFloatOp,
        Torch_AtenErfIntOp,
        Torch_AtenErfOp,
        Torch_AtenErfScalarOp,
        Torch_AtenErf_Op,
        Torch_AtenErfcFloatOp,
        Torch_AtenErfcIntOp,
        Torch_AtenErfcOp,
        Torch_AtenErfcScalarOp,
        Torch_AtenErfc_Op,
        Torch_AtenErfinvOp,
        Torch_AtenErfinv_Op,
        Torch_AtenExp2Op,
        Torch_AtenExp2_Op,
        Torch_AtenExpFloatOp,
        Torch_AtenExpIntOp,
        Torch_AtenExpOp,
        Torch_AtenExpScalarOp,
        Torch_AtenExp_Op,
        Torch_AtenExpandAsOp,
        Torch_AtenExpandCopyOp,
        Torch_AtenExpandOp,
        Torch_AtenExpm1FloatOp,
        Torch_AtenExpm1IntOp,
        Torch_AtenExpm1Op,
        Torch_AtenExpm1ScalarOp,
        Torch_AtenExpm1_Op,
        Torch_AtenEyeMOutOp,
        Torch_AtenFakeQuantizePerChannelAffineCachemaskBackwardOp,
        Torch_AtenFakeQuantizePerChannelAffineCachemaskOp,
        Torch_AtenFakeQuantizePerChannelAffineOp,
        Torch_AtenFakeQuantizePerTensorAffineCachemaskBackwardOp,
        Torch_AtenFakeQuantizePerTensorAffineCachemaskOp,
        Torch_AtenFakeQuantizePerTensorAffineOp,
        Torch_AtenFakeQuantizePerTensorAffineTensorQparamsOp,
        Torch_AtenFbgemmLinearFp16WeightFp32ActivationOp,
        Torch_AtenFbgemmLinearFp16WeightOp,
        Torch_AtenFbgemmLinearInt8WeightFp32ActivationOp,
        Torch_AtenFbgemmLinearInt8WeightOp,
        Torch_AtenFbgemmLinearQuantizeWeightOp,
        Torch_AtenFbgemmPackGemmMatrixFp16Op,
        Torch_AtenFbgemmPackQuantizedMatrixKnOp,
        Torch_AtenFbgemmPackQuantizedMatrixOp,
        Torch_AtenFeatureAlphaDropoutOp,
        Torch_AtenFeatureAlphaDropout_Op,
        Torch_AtenFeatureDropoutOp,
        Torch_AtenFeatureDropout_Op,
        Torch_AtenFftFftshiftOp,
        Torch_AtenFftIfftshiftOp,
        Torch_AtenFillDiagonal_Op,
        Torch_AtenFillScalarOp,
        Torch_AtenFillScalarOutOp,
        Torch_AtenFillTensorOp,
        Torch_AtenFillTensorOutOp,
        Torch_AtenFill_ScalarOp,
        Torch_AtenFill_TensorOp,
        Torch_AtenFixOp,
        Torch_AtenFix_Op,
        Torch_AtenFlattenDenseTensorsOp,
        Torch_AtenFlipOp,
        Torch_AtenFliplrOp,
        Torch_AtenFlipudOp,
        Torch_AtenFloatPower_ScalarOp,
        Torch_AtenFloatPower_TensorOp,
        Torch_AtenFloorDivideOp,
        Torch_AtenFloorDivideScalarOp,
        Torch_AtenFloorDivideScalarOutOp,
        Torch_AtenFloorDivide_ScalarOp,
        Torch_AtenFloorDivide_TensorOp,
        Torch_AtenFloorFloatOp,
        Torch_AtenFloorIntOp,
        Torch_AtenFloorOp,
        Torch_AtenFloorScalarOp,
        Torch_AtenFloor_Op,
        Torch_AtenFmaxOp,
        Torch_AtenFminOp,
        Torch_AtenFmodFloatIntOp,
        Torch_AtenFmodFloatOp,
        Torch_AtenFmodIntFloatOp,
        Torch_AtenFmodIntOp,
        Torch_AtenFmodOp,
        Torch_AtenFmodScalarOp,
        Torch_AtenFmodScalarOutOp,
        Torch_AtenFmodTensorOp,
        Torch_AtenFmodTensorOutOp,
        Torch_AtenFmod_ScalarOp,
        Torch_AtenFmod_TensorOp,
        Torch_AtenFracOp,
        Torch_AtenFrac_Op,
        Torch_AtenFractionalMaxPool2DBackwardGradInputOp,
        Torch_AtenFractionalMaxPool2DBackwardOp,
        Torch_AtenFractionalMaxPool2DOp,
        Torch_AtenFractionalMaxPool2DOutputOp,
        Torch_AtenFractionalMaxPool3DBackwardGradInputOp,
        Torch_AtenFractionalMaxPool3DBackwardOp,
        Torch_AtenFractionalMaxPool3DOp,
        Torch_AtenFractionalMaxPool3DOutputOp,
        Torch_AtenFrexpOp,
        Torch_AtenFrexpTensorOp,
        Torch_AtenFusedMovingAvgObsFakeQuantOp,
        Torch_AtenGatherBackwardOp,
        Torch_AtenGatherOp,
        Torch_AtenGcdIntOp,
        Torch_AtenGcdOp,
        Torch_AtenGcd_Op,
        Torch_AtenGeFloatIntOp,
        Torch_AtenGeFloatOp,
        Torch_AtenGeIntFloatOp,
        Torch_AtenGeIntOp,
        Torch_AtenGeOp,
        Torch_AtenGeScalarOp,
        Torch_AtenGeScalarOutOp,
        Torch_AtenGeTensorOp,
        Torch_AtenGeTensorOutOp,
        Torch_AtenGe_ScalarOp,
        Torch_AtenGe_TensorOp,
        Torch_AtenGeqrfOp,
        Torch_AtenGerOp,
        Torch_AtenGluBackwardGradInputOp,
        Torch_AtenGluBackwardJvpOp,
        Torch_AtenGluBackwardOp,
        Torch_AtenGluJvpOp,
        Torch_AtenGluOp,
        Torch_AtenGreaterEqualScalarOp,
        Torch_AtenGreaterEqualScalarOutOp,
        Torch_AtenGreaterEqualTensorOp,
        Torch_AtenGreaterEqualTensorOutOp,
        Torch_AtenGreaterEqual_ScalarOp,
        Torch_AtenGreaterEqual_TensorOp,
        Torch_AtenGreaterScalarOp,
        Torch_AtenGreaterScalarOutOp,
        Torch_AtenGreaterTensorOp,
        Torch_AtenGreaterTensorOutOp,
        Torch_AtenGreater_ScalarOp,
        Torch_AtenGreater_TensorOp,
        Torch_AtenGridSampler2DBackwardOp,
        Torch_AtenGridSampler2DOp,
        Torch_AtenGridSampler3DBackwardOp,
        Torch_AtenGridSampler3DOp,
        Torch_AtenGridSamplerOp,
        Torch_AtenGroupNormOp,
        Torch_AtenGruCellOp,
        Torch_AtenGruDataOp,
        Torch_AtenGruInputOp,
        Torch_AtenGtFloatIntOp,
        Torch_AtenGtFloatOp,
        Torch_AtenGtIntFloatOp,
        Torch_AtenGtIntOp,
        Torch_AtenGtOp,
        Torch_AtenGtScalarOp,
        Torch_AtenGtScalarOutOp,
        Torch_AtenGtTensorOp,
        Torch_AtenGtTensorOutOp,
        Torch_AtenGt_ScalarOp,
        Torch_AtenGt_TensorOp,
        Torch_AtenHammingWindowPeriodicAlphaBetaOutOp,
        Torch_AtenHammingWindowPeriodicAlphaOutOp,
        Torch_AtenHammingWindowPeriodicOutOp,
        Torch_AtenHannWindowPeriodicOutOp,
        Torch_AtenHardshrinkBackwardGradInputOp,
        Torch_AtenHardshrinkBackwardOp,
        Torch_AtenHardshrinkOp,
        Torch_AtenHardsigmoidBackwardGradInputOp,
        Torch_AtenHardsigmoidBackwardOp,
        Torch_AtenHardsigmoidOp,
        Torch_AtenHardsigmoid_Op,
        Torch_AtenHardswishBackwardOp,
        Torch_AtenHardswishOp,
        Torch_AtenHardswish_Op,
        Torch_AtenHardtanhBackwardGradInputOp,
        Torch_AtenHardtanhBackwardOp,
        Torch_AtenHardtanhOp,
        Torch_AtenHardtanh_Op,
        Torch_AtenHeavisideOp,
        Torch_AtenHeaviside_Op,
        Torch_AtenHingeEmbeddingLossOp,
        Torch_AtenHistcOp,
        Torch_AtenHistogramddIntBinsOp,
        Torch_AtenHistogramddOp,
        Torch_AtenHistogramddTensorlistBinsOp,
        Torch_AtenHspmmOp,
        Torch_AtenHstackOp,
        Torch_AtenHuberLossBackwardOp,
        Torch_AtenHuberLossOp,
        Torch_AtenHypotOp,
        Torch_AtenHypot_Op,
        Torch_AtenI0Op,
        Torch_AtenI0_Op,
        Torch_AtenIgammaOp,
        Torch_AtenIgamma_Op,
        Torch_AtenIgammacOp,
        Torch_AtenIgammac_Op,
        Torch_AtenIm2ColOp,
        Torch_AtenImagOp,
        Torch_AtenIndexAddOp,
        Torch_AtenIndexAdd_Op,
        Torch_AtenIndexCopyOp,
        Torch_AtenIndexCopy_Op,
        Torch_AtenIndexFillIntScalarOp,
        Torch_AtenIndexFillIntScalarOutOp,
        Torch_AtenIndexFillIntTensorOp,
        Torch_AtenIndexFillIntTensorOutOp,
        Torch_AtenIndexFill_IntScalarOp,
        Torch_AtenIndexFill_IntTensorOp,
        Torch_AtenIndexListBoolOp,
        Torch_AtenIndexListFloatOp,
        Torch_AtenIndexListIntOp,
        Torch_AtenIndexListTensorOp,
        Torch_AtenIndexPutHackedTwinOp,
        Torch_AtenIndexPut_HackedTwinOp,
        Torch_AtenIndexSelectBackwardOp,
        Torch_AtenIndexSelectOp,
        Torch_AtenIndexTensorHackedTwinOp,
        Torch_AtenIndicesCopyOp,
        Torch_AtenIndicesOp,
        Torch_AtenInfinitelyDifferentiableGeluBackwardOp,
        Torch_AtenInnerOp,
        Torch_AtenInstanceNormOp,
        Torch_AtenIntReprOp,
        Torch_AtenInverseOp,
        Torch_AtenIsCoalescedOp,
        Torch_AtenIsComplexOp,
        Torch_AtenIsConjOp,
        Torch_AtenIsContiguousMemoryFormatOp,
        Torch_AtenIsContiguousOp,
        Torch_AtenIsDistributedOp,
        Torch_AtenIsFloatingPointOp,
        Torch_AtenIsInferenceOp,
        Torch_AtenIsLeafOp,
        Torch_AtenIsNegOp,
        Torch_AtenIsNonOverlappingAndDenseOp,
        Torch_AtenIsNonzeroOp,
        Torch_AtenIsSameSizeOp,
        Torch_AtenIsSetToOp,
        Torch_AtenIsSignedOp,
        Torch_AtenIsStridesLikeFormatOp,
        Torch_AtenIsVulkanAvailableOp,
        Torch_AtenIscloseOp,
        Torch_AtenIsfiniteFloatOp,
        Torch_AtenIsfiniteOp,
        Torch_AtenIsinScalarTensorOp,
        Torch_AtenIsinScalarTensorOutOp,
        Torch_AtenIsinTensorScalarOp,
        Torch_AtenIsinTensorScalarOutOp,
        Torch_AtenIsinTensorTensorOp,
        Torch_AtenIsinTensorTensorOutOp,
        Torch_AtenIsinfFloatOp,
        Torch_AtenIsinfOp,
        Torch_AtenIsnanFloatOp,
        Torch_AtenIsnanOp,
        Torch_AtenIsneginfOp,
        Torch_AtenIsposinfOp,
        Torch_AtenIsrealOp,
        Torch_AtenIstftOp,
        Torch_AtenItemOp,
        Torch_AtenKaiserWindowBetaOutOp,
        Torch_AtenKaiserWindowPeriodicOutOp,
        Torch_AtenKlDivOp,
        Torch_AtenKronOp,
        Torch_AtenKthvalueOp,
        Torch_AtenL1LossOp,
        Torch_AtenLayerNormOp,
        Torch_AtenLcmOp,
        Torch_AtenLcm_Op,
        Torch_AtenLdexp_Op,
        Torch_AtenLeFloatIntOp,
        Torch_AtenLeFloatOp,
        Torch_AtenLeIntFloatOp,
        Torch_AtenLeIntOp,
        Torch_AtenLeOp,
        Torch_AtenLeScalarOp,
        Torch_AtenLeScalarOutOp,
        Torch_AtenLeTensorOp,
        Torch_AtenLeTensorOutOp,
        Torch_AtenLe_ScalarOp,
        Torch_AtenLe_TensorOp,
        Torch_AtenLeakyReluBackwardGradInputOp,
        Torch_AtenLeakyReluBackwardOp,
        Torch_AtenLeakyReluOp,
        Torch_AtenLeakyRelu_Op,
        Torch_AtenLerpScalarOp,
        Torch_AtenLerpScalarOutOp,
        Torch_AtenLerpTensorOp,
        Torch_AtenLerpTensorOutOp,
        Torch_AtenLerp_ScalarOp,
        Torch_AtenLerp_TensorOp,
        Torch_AtenLessEqualScalarOp,
        Torch_AtenLessEqualScalarOutOp,
        Torch_AtenLessEqualTensorOp,
        Torch_AtenLessEqualTensorOutOp,
        Torch_AtenLessEqual_ScalarOp,
        Torch_AtenLessEqual_TensorOp,
        Torch_AtenLessScalarOp,
        Torch_AtenLessScalarOutOp,
        Torch_AtenLessTensorOp,
        Torch_AtenLessTensorOutOp,
        Torch_AtenLess_ScalarOp,
        Torch_AtenLess_TensorOp,
        Torch_AtenLgammaFloatOp,
        Torch_AtenLgammaIntOp,
        Torch_AtenLgammaOp,
        Torch_AtenLgammaScalarOp,
        Torch_AtenLgamma_Op,
        Torch_AtenLiftFreshCopyOp,
        Torch_AtenLiftFreshOp,
        Torch_AtenLiftOp,
        Torch_AtenLinalgCholeskyExOp,
        Torch_AtenLinalgCholeskyOp,
        Torch_AtenLinalgCondOp,
        Torch_AtenLinalgCrossOp,
        Torch_AtenLinalgDetOp,
        Torch_AtenLinalgDiagonalOp,
        Torch_AtenLinalgEigOp,
        Torch_AtenLinalgEigvalsOp,
        Torch_AtenLinalgHouseholderProductOp,
        Torch_AtenLinalgInvExOp,
        Torch_AtenLinalgInvOp,
        Torch_AtenLinalgLdlFactorExOp,
        Torch_AtenLinalgLdlFactorOp,
        Torch_AtenLinalgLdlSolveOp,
        Torch_AtenLinalgLuFactorExOp,
        Torch_AtenLinalgLuFactorOp,
        Torch_AtenLinalgLuOp,
        Torch_AtenLinalgLuSolveOp,
        Torch_AtenLinalgMatmulOp,
        Torch_AtenLinalgMatrixExpOp,
        Torch_AtenLinalgMatrixNormOp,
        Torch_AtenLinalgMatrixPowerOp,
        Torch_AtenLinalgMatrixRankAtolRtolFloatOp,
        Torch_AtenLinalgMatrixRankAtolRtolFloatOutOp,
        Torch_AtenLinalgMatrixRankAtolRtolTensorOp,
        Torch_AtenLinalgMatrixRankAtolRtolTensorOutOp,
        Torch_AtenLinalgMatrixRankOp,
        Torch_AtenLinalgMatrixRankOutTolTensorOp,
        Torch_AtenLinalgMatrixRankTolTensorOp,
        Torch_AtenLinalgMultiDotOp,
        Torch_AtenLinalgNormOp,
        Torch_AtenLinalgPinvAtolRtolFloatOp,
        Torch_AtenLinalgPinvAtolRtolFloatOutOp,
        Torch_AtenLinalgPinvAtolRtolTensorOp,
        Torch_AtenLinalgPinvAtolRtolTensorOutOp,
        Torch_AtenLinalgPinvOp,
        Torch_AtenLinalgPinvOutRcondTensorOp,
        Torch_AtenLinalgPinvRcondTensorOp,
        Torch_AtenLinalgSlogdetOp,
        Torch_AtenLinalgSolveExOp,
        Torch_AtenLinalgSolveOp,
        Torch_AtenLinalgSolveTriangularOp,
        Torch_AtenLinalgTensorinvOp,
        Torch_AtenLinalgTensorsolveOp,
        Torch_AtenLinalgVanderOp,
        Torch_AtenLinalgVecdotOp,
        Torch_AtenLinalgVectorNormOp,
        Torch_AtenLinearBackwardOp,
        Torch_AtenLinearOp,
        Torch_AtenLinspaceScalarTensorOutOp,
        Torch_AtenLinspaceTensorScalarOutOp,
        Torch_AtenLinspaceTensorTensorOutOp,
        Torch_AtenLog10FloatOp,
        Torch_AtenLog10IntOp,
        Torch_AtenLog10Op,
        Torch_AtenLog10ScalarOp,
        Torch_AtenLog10_Op,
        Torch_AtenLog1PFloatOp,
        Torch_AtenLog1PIntOp,
        Torch_AtenLog1POp,
        Torch_AtenLog1PScalarOp,
        Torch_AtenLog1P_Op,
        Torch_AtenLog2Op,
        Torch_AtenLog2_Op,
        Torch_AtenLogFloatFloatOp,
        Torch_AtenLogFloatIntOp,
        Torch_AtenLogFloatOp,
        Torch_AtenLogIntFloatOp,
        Torch_AtenLogIntIntOp,
        Torch_AtenLogIntOp,
        Torch_AtenLogOp,
        Torch_AtenLogScalarOp,
        Torch_AtenLogScalarScalarOp,
        Torch_AtenLogSigmoidBackwardGradInputOp,
        Torch_AtenLogSigmoidBackwardOp,
        Torch_AtenLogSigmoidForwardOp,
        Torch_AtenLogSigmoidForwardOutputOp,
        Torch_AtenLogSigmoidOp,
        Torch_AtenLog_Op,
        Torch_AtenLogaddexp2Op,
        Torch_AtenLogaddexpOp,
        Torch_AtenLogcumsumexpOp,
        Torch_AtenLogdetOp,
        Torch_AtenLogicalAndOp,
        Torch_AtenLogicalAnd_Op,
        Torch_AtenLogicalNotOp,
        Torch_AtenLogicalNot_Op,
        Torch_AtenLogicalOrOp,
        Torch_AtenLogicalOr_Op,
        Torch_AtenLogicalXorOp,
        Torch_AtenLogicalXor_Op,
        Torch_AtenLogitBackwardGradInputOp,
        Torch_AtenLogitBackwardOp,
        Torch_AtenLogitOp,
        Torch_AtenLogit_Op,
        Torch_AtenLogspaceScalarTensorOutOp,
        Torch_AtenLogspaceTensorScalarOutOp,
        Torch_AtenLogspaceTensorTensorOutOp,
        Torch_AtenLogsumexpOp,
        Torch_AtenLstmCellOp,
        Torch_AtenLstmDataOp,
        Torch_AtenLstmInputOp,
        Torch_AtenLstmMpsBackwardOp,
        Torch_AtenLtFloatIntOp,
        Torch_AtenLtFloatOp,
        Torch_AtenLtIntFloatOp,
        Torch_AtenLtIntOp,
        Torch_AtenLtOp,
        Torch_AtenLtScalarOp,
        Torch_AtenLtScalarOutOp,
        Torch_AtenLtTensorOp,
        Torch_AtenLtTensorOutOp,
        Torch_AtenLt_ScalarOp,
        Torch_AtenLt_TensorOp,
        Torch_AtenLuSolveOp,
        Torch_AtenLuUnpackOp,
        Torch_AtenMarginRankingLossOp,
        Torch_AtenMaskedFillScalarOp,
        Torch_AtenMaskedFillScalarOutOp,
        Torch_AtenMaskedFillTensorOp,
        Torch_AtenMaskedFillTensorOutOp,
        Torch_AtenMaskedFill_ScalarOp,
        Torch_AtenMaskedFill_TensorOp,
        Torch_AtenMaskedScatterBackwardOp,
        Torch_AtenMaskedScatterOp,
        Torch_AtenMaskedScatter_Op,
        Torch_AtenMaskedSelectBackwardOp,
        Torch_AtenMaskedSelectOp,
        Torch_AtenMatmulBackwardOp,
        Torch_AtenMatmulOp,
        Torch_AtenMatrixExpBackwardOp,
        Torch_AtenMatrixExpOp,
        Torch_AtenMatrixHAOp,
        Torch_AtenMatrixHOp,
        Torch_AtenMatrixPowerOp,
        Torch_AtenMaxDimMaxOp,
        Torch_AtenMaxDimOp,
        Torch_AtenMaxOp,
        Torch_AtenMaxOtherOp,
        Torch_AtenMaxPool1DOp,
        Torch_AtenMaxPool1DWithIndicesOp,
        Torch_AtenMaxPool2DBackwardOp,
        Torch_AtenMaxPool2DOp,
        Torch_AtenMaxPool2DWithIndicesBackwardGradInputOp,
        Torch_AtenMaxPool2DWithIndicesBackwardOp,
        Torch_AtenMaxPool2DWithIndicesOp,
        Torch_AtenMaxPool3DOp,
        Torch_AtenMaxPool3DWithIndicesBackwardGradInputOp,
        Torch_AtenMaxPool3DWithIndicesBackwardOp,
        Torch_AtenMaxPool3DWithIndicesOp,
        Torch_AtenMaxUnaryOutOp,
        Torch_AtenMaxUnpool2DOp,
        Torch_AtenMaxUnpool3DOp,
        Torch_AtenMaximumOp,
        Torch_AtenMeanDimOp,
        Torch_AtenMeanDtypeOutOp,
        Torch_AtenMeanOp,
        Torch_AtenMedianDimOp,
        Torch_AtenMedianOp,
        Torch_AtenMeshgridOp,
        Torch_AtenMhAOp,
        Torch_AtenMhOp,
        Torch_AtenMinDimMinOp,
        Torch_AtenMinDimOp,
        Torch_AtenMinOp,
        Torch_AtenMinOtherOp,
        Torch_AtenMinUnaryOutOp,
        Torch_AtenMinimumOp,
        Torch_AtenMiopenBatchNormBackwardOp,
        Torch_AtenMiopenBatchNormOp,
        Torch_AtenMiopenConvolutionAddReluOp,
        Torch_AtenMiopenConvolutionOp,
        Torch_AtenMiopenConvolutionReluOp,
        Torch_AtenMiopenConvolutionTransposeOp,
        Torch_AtenMiopenDepthwiseConvolutionOp,
        Torch_AtenMiopenRnnBackwardOp,
        Torch_AtenMiopenRnnOp,
        Torch_AtenMishBackwardOp,
        Torch_AtenMishOp,
        Torch_AtenMish_Op,
        Torch_AtenMkldnnAdaptiveAvgPool2DBackwardOp,
        Torch_AtenMkldnnAdaptiveAvgPool2DOp,
        Torch_AtenMkldnnConvolutionOp,
        Torch_AtenMkldnnLinearBackwardInputOp,
        Torch_AtenMkldnnLinearBackwardOp,
        Torch_AtenMkldnnLinearBackwardWeightsOp,
        Torch_AtenMkldnnLinearOp,
        Torch_AtenMkldnnMaxPool2DBackwardOp,
        Torch_AtenMkldnnMaxPool2DOp,
        Torch_AtenMkldnnMaxPool3DBackwardOp,
        Torch_AtenMkldnnMaxPool3DOp,
        Torch_AtenMkldnnReorderConv2DWeightOp,
        Torch_AtenMkldnnReorderConv3DWeightOp,
        Torch_AtenMkldnnRnnLayerBackwardOp,
        Torch_AtenMkldnnRnnLayerOp,
        Torch_AtenMmOp,
        Torch_AtenModeOp,
        Torch_AtenMpsConvolutionBackwardOp,
        Torch_AtenMpsConvolutionTransposeBackwardOp,
        Torch_AtenMseLossBackwardGradInputOp,
        Torch_AtenMseLossBackwardOp,
        Torch_AtenMseLossOp,
        Torch_AtenMsortOp,
        Torch_AtenMtAOp,
        Torch_AtenMtOp,
        Torch_AtenMulFloatIntOp,
        Torch_AtenMulFloatOp,
        Torch_AtenMulIntFloatOp,
        Torch_AtenMulIntOp,
        Torch_AtenMulOp,
        Torch_AtenMulScalarOp,
        Torch_AtenMulScalarOutOp,
        Torch_AtenMulTensorOp,
        Torch_AtenMul_ScalarOp,
        Torch_AtenMul_TensorOp,
        Torch_AtenMultiMarginLossBackwardGradInputOp,
        Torch_AtenMultiMarginLossBackwardOp,
        Torch_AtenMultiMarginLossOp,
        Torch_AtenMultilabelMarginLossBackwardGradInputOp,
        Torch_AtenMultilabelMarginLossBackwardOp,
        Torch_AtenMultilabelMarginLossForwardOp,
        Torch_AtenMultilabelMarginLossForwardOutputOp,
        Torch_AtenMultilabelMarginLossOp,
        Torch_AtenMultiplyScalarOp,
        Torch_AtenMultiplyTensorOp,
        Torch_AtenMultiply_ScalarOp,
        Torch_AtenMultiply_TensorOp,
        Torch_AtenMvOp,
        Torch_AtenMvlgammaOp,
        Torch_AtenMvlgamma_Op,
        Torch_AtenNanToNumOp,
        Torch_AtenNanToNum_Op,
        Torch_AtenNanmeanOp,
        Torch_AtenNanmedianDimOp,
        Torch_AtenNanmedianOp,
        Torch_AtenNansumOp,
        Torch_AtenNarrowCopyOp,
        Torch_AtenNarrowOp,
        Torch_AtenNarrowTensorOp,
        Torch_AtenNativeBatchNormBackwardOp,
        Torch_AtenNativeBatchNormOp,
        Torch_AtenNativeChannelShuffleOp,
        Torch_AtenNativeDropoutBackwardOp,
        Torch_AtenNativeDropoutOp,
        Torch_AtenNativeGroupNormBackwardOp,
        Torch_AtenNativeGroupNormOp,
        Torch_AtenNativeLayerNormBackwardOp,
        Torch_AtenNativeLayerNormOp,
        Torch_AtenNativeNormOp,
        Torch_AtenNativeNormScalaroptDimDtypeOp,
        Torch_AtenNativeNormScalaroptDimDtypeOutOp,
        Torch_AtenNeBoolListOp,
        Torch_AtenNeBoolOp,
        Torch_AtenNeFloatIntOp,
        Torch_AtenNeFloatListOp,
        Torch_AtenNeFloatOp,
        Torch_AtenNeIntFloatOp,
        Torch_AtenNeIntListOp,
        Torch_AtenNeIntOp,
        Torch_AtenNeOp,
        Torch_AtenNeScalarOp,
        Torch_AtenNeScalarOutOp,
        Torch_AtenNeTensorListOp,
        Torch_AtenNeTensorOp,
        Torch_AtenNeTensorOutOp,
        Torch_AtenNe_ScalarOp,
        Torch_AtenNe_TensorOp,
        Torch_AtenNegFloatOp,
        Torch_AtenNegIntOp,
        Torch_AtenNegOp,
        Torch_AtenNegScalarOp,
        Torch_AtenNeg_Op,
        Torch_AtenNegativeOp,
        Torch_AtenNegative_Op,
        Torch_AtenNestedToPaddedTensorOp,
        Torch_AtenNextafterOp,
        Torch_AtenNextafter_Op,
        Torch_AtenNllLoss2DBackwardGradInputOp,
        Torch_AtenNllLoss2DBackwardOp,
        Torch_AtenNllLoss2DForwardOp,
        Torch_AtenNllLoss2DForwardOutputOp,
        Torch_AtenNllLoss2DOp,
        Torch_AtenNllLossBackwardGradInputOp,
        Torch_AtenNllLossBackwardOp,
        Torch_AtenNllLossForwardOp,
        Torch_AtenNllLossForwardOutputOp,
        Torch_AtenNllLossNdOp,
        Torch_AtenNllLossOp,
        Torch_AtenNonzeroNumpyOp,
        Torch_AtenNonzeroOp,
        Torch_AtenNonzeroStaticOp,
        Torch_AtenNormDtypeOutOp,
        Torch_AtenNormExceptDimOp,
        Torch_AtenNormScalarOp,
        Torch_AtenNormScalarOutOp,
        Torch_AtenNormScalaroptDimDtypeOp,
        Torch_AtenNormScalaroptDimOp,
        Torch_AtenNormScalaroptDtypeOp,
        Torch_AtenNormScalaroptDtypeOutOp,
        Torch_AtenNotEqualScalarOp,
        Torch_AtenNotEqualScalarOutOp,
        Torch_AtenNotEqualTensorOp,
        Torch_AtenNotEqualTensorOutOp,
        Torch_AtenNotEqual_ScalarOp,
        Torch_AtenNotEqual_TensorOp,
        Torch_AtenNuclearNormDimOp,
        Torch_AtenNuclearNormDimOutOp,
        Torch_AtenNuclearNormOp,
        Torch_AtenNumelOp,
        Torch_AtenNumpyTAOp,
        Torch_AtenNumpyTOp,
        Torch_AtenOneHotOp,
        Torch_AtenOrgqrOp,
        Torch_AtenOrmqrOp,
        Torch_AtenOuterOp,
        Torch_AtenOutputNrOp,
        Torch_AtenPairwiseDistanceOp,
        Torch_AtenPdistOp,
        Torch_AtenPermuteCopyOp,
        Torch_AtenPermuteOp,
        Torch_AtenPinverseOp,
        Torch_AtenPixelShuffleOp,
        Torch_AtenPixelUnshuffleOp,
        Torch_AtenPoissonNllLossOp,
        Torch_AtenPolarOp,
        Torch_AtenPolarScalarScalarOp,
        Torch_AtenPolygammaOp,
        Torch_AtenPolygamma_Op,
        Torch_AtenPositiveOp,
        Torch_AtenPowFloatIntOp,
        Torch_AtenPowFloatOp,
        Torch_AtenPowIntFloatOp,
        Torch_AtenPowIntOp,
        Torch_AtenPowIntToIntOp,
        Torch_AtenPowScalarOp,
        Torch_AtenPowScalarOutOp,
        Torch_AtenPowScalarScalarOp,
        Torch_AtenPowTensorScalarOp,
        Torch_AtenPowTensorScalarOutOp,
        Torch_AtenPowTensorTensorOp,
        Torch_AtenPowTensorTensorOutOp,
        Torch_AtenPow_ScalarOp,
        Torch_AtenPow_TensorOp,
        Torch_AtenPreluOp,
        Torch_AtenProdDimIntOp,
        Torch_AtenProdIntOutOp,
        Torch_AtenProdOp,
        Torch_AtenPromoteTypesOp,
        Torch_AtenPutOp,
        Torch_AtenPut_Op,
        Torch_AtenQPerChannelAxisOp,
        Torch_AtenQPerChannelScalesOp,
        Torch_AtenQPerChannelZeroPointsOp,
        Torch_AtenQScaleOp,
        Torch_AtenQZeroPointOp,
        Torch_AtenQrOp,
        Torch_AtenQuantizePerChannelOp,
        Torch_AtenQuantizePerTensorDynamicOp,
        Torch_AtenQuantizePerTensorOp,
        Torch_AtenQuantizePerTensorTensorQparamsOp,
        Torch_AtenQuantizePerTensorTensorQparamsOutOp,
        Torch_AtenQuantizePerTensorTensorsOp,
        Torch_AtenQuantizePerTensorTensorsOutOp,
        Torch_AtenQuantizedBatchNormOp,
        Torch_AtenQuantizedGruCellOp,
        Torch_AtenQuantizedGruDataLegacyOp,
        Torch_AtenQuantizedGruInputLegacyOp,
        Torch_AtenQuantizedLstmCellOp,
        Torch_AtenQuantizedLstmDataLegacyOp,
        Torch_AtenQuantizedLstmInputLegacyOp,
        Torch_AtenQuantizedMaxPool1DOp,
        Torch_AtenQuantizedMaxPool2DOp,
        Torch_AtenQuantizedMaxPool3DOp,
        Torch_AtenQuantizedRnnReluCellOp,
        Torch_AtenQuantizedRnnTanhCellOp,
        Torch_AtenRad2DegOp,
        Torch_AtenRad2Deg_Op,
        Torch_AtenRandintLikeLowDtypeOutOp,
        Torch_AtenRandintLowOutOp,
        Torch_AtenRangeOut_Op,
        Torch_AtenRavelOp,
        Torch_AtenRealOp,
        Torch_AtenReciprocalOp,
        Torch_AtenReciprocal_Op,
        Torch_AtenReflectionPad1DBackwardGradInputOp,
        Torch_AtenReflectionPad1DBackwardOp,
        Torch_AtenReflectionPad1DOp,
        Torch_AtenReflectionPad2DBackwardGradInputOp,
        Torch_AtenReflectionPad2DBackwardOp,
        Torch_AtenReflectionPad2DOp,
        Torch_AtenReflectionPad3DBackwardGradInputOp,
        Torch_AtenReflectionPad3DBackwardOp,
        Torch_AtenReflectionPad3DOp,
        Torch_AtenRelu6Op,
        Torch_AtenRelu6_Op,
        Torch_AtenReluOp,
        Torch_AtenRelu_Op,
        Torch_AtenRemainderFloatIntOp,
        Torch_AtenRemainderFloatOp,
        Torch_AtenRemainderIntFloatOp,
        Torch_AtenRemainderIntOp,
        Torch_AtenRemainderOp,
        Torch_AtenRemainderScalarOp,
        Torch_AtenRemainderScalarOutOp,
        Torch_AtenRemainderScalarTensorOp,
        Torch_AtenRemainderScalarTensorOutOp,
        Torch_AtenRemainderTensorOp,
        Torch_AtenRemainderTensorOutOp,
        Torch_AtenRemainder_ScalarOp,
        Torch_AtenRemainder_TensorOp,
        Torch_AtenRenormOp,
        Torch_AtenRenorm_Op,
        Torch_AtenRepeatInterleaveSelfIntOp,
        Torch_AtenRepeatInterleaveSelfTensorOp,
        Torch_AtenRepeatInterleaveTensorOp,
        Torch_AtenRepeatInterleaveTensorOutOp,
        Torch_AtenRepeatOp,
        Torch_AtenReplicationPad1DBackwardGradInputOp,
        Torch_AtenReplicationPad1DBackwardOp,
        Torch_AtenReplicationPad1DOp,
        Torch_AtenReplicationPad2DBackwardGradInputOp,
        Torch_AtenReplicationPad2DBackwardOp,
        Torch_AtenReplicationPad2DOp,
        Torch_AtenReplicationPad3DBackwardGradInputOp,
        Torch_AtenReplicationPad3DBackwardOp,
        Torch_AtenReplicationPad3DOp,
        Torch_AtenRequiresGrad_Op,
        Torch_AtenReshapeAsOp,
        Torch_AtenReshapeOp,
        Torch_AtenResizeAsOp,
        Torch_AtenResizeAsSparse_Op,
        Torch_AtenResizeAs_Op,
        Torch_AtenResizeOp,
        Torch_AtenResize_Op,
        Torch_AtenResolveConjOp,
        Torch_AtenResolveNegOp,
        Torch_AtenRetainGradOp,
        Torch_AtenRetainsGradOp,
        Torch_AtenRmsNormOp,
        Torch_AtenRnnReluCellOp,
        Torch_AtenRnnReluDataOp,
        Torch_AtenRnnReluInputOp,
        Torch_AtenRnnTanhCellOp,
        Torch_AtenRnnTanhDataOp,
        Torch_AtenRnnTanhInputOp,
        Torch_AtenRollOp,
        Torch_AtenRot90Op,
        Torch_AtenRoundDecimalsOp,
        Torch_AtenRoundDecimalsOutOp,
        Torch_AtenRoundFloatOp,
        Torch_AtenRoundIntOp,
        Torch_AtenRoundOp,
        Torch_AtenRoundScalarOp,
        Torch_AtenRound_DecimalsOp,
        Torch_AtenRound_Op,
        Torch_AtenRowIndicesCopyOp,
        Torch_AtenRowIndicesOp,
        Torch_AtenRowStackOp,
        Torch_AtenRreluWithNoiseBackwardOp,
        Torch_AtenRsqrtOp,
        Torch_AtenRsqrt_Op,
        Torch_AtenRsubScalarOp,
        Torch_AtenRsubScalarOutOp,
        Torch_AtenRsubTensorOp,
        Torch_AtenRsubTensorOutOp,
        Torch_AtenScaledDotProductAttentionOp,
        Torch_AtenScatterAddOp,
        Torch_AtenScatterAdd_Op,
        Torch_AtenScatterSrcOp,
        Torch_AtenScatterSrcOutOp,
        Torch_AtenScatterValueOp,
        Torch_AtenScatterValueOutOp,
        Torch_AtenScatter_SrcOp,
        Torch_AtenScatter_ValueOp,
        Torch_AtenSelectBackwardOp,
        Torch_AtenSelectIntOp,
        Torch_AtenSelectScatterOp,
        Torch_AtenSeluOp,
        Torch_AtenSelu_Op,
        Torch_AtenSetDataOp,
        Torch_AtenSet_Op,
        Torch_AtenSet_SourceTensorOp,
        Torch_AtenSet_SourceTensorStorageOffsetOp,
        Torch_AtenSgnOp,
        Torch_AtenSgn_Op,
        Torch_AtenSigmoidBackwardGradInputOp,
        Torch_AtenSigmoidBackwardOp,
        Torch_AtenSigmoidOp,
        Torch_AtenSigmoid_Op,
        Torch_AtenSignOp,
        Torch_AtenSign_Op,
        Torch_AtenSignbitOp,
        Torch_AtenSiluBackwardGradInputOp,
        Torch_AtenSiluBackwardOp,
        Torch_AtenSiluOp,
        Torch_AtenSilu_Op,
        Torch_AtenSinFloatOp,
        Torch_AtenSinIntOp,
        Torch_AtenSinOp,
        Torch_AtenSinScalarOp,
        Torch_AtenSin_Op,
        Torch_AtenSincOp,
        Torch_AtenSinc_Op,
        Torch_AtenSinhFloatOp,
        Torch_AtenSinhIntOp,
        Torch_AtenSinhOp,
        Torch_AtenSinhScalarOp,
        Torch_AtenSinh_Op,
        Torch_AtenSizeIntOp,
        Torch_AtenSizeOp,
        Torch_AtenSliceBackwardOp,
        Torch_AtenSliceInverseOp,
        Torch_AtenSliceScatterOp,
        Torch_AtenSliceTensorOp,
        Torch_AtenSlogdetOp,
        Torch_AtenSlowConv3DForwardOp,
        Torch_AtenSlowConv3DForwardOutputOp,
        Torch_AtenSlowConv3DOp,
        Torch_AtenSlowConvDilated2DOp,
        Torch_AtenSlowConvDilated3DOp,
        Torch_AtenSlowConvTranspose2DOp,
        Torch_AtenSlowConvTranspose3DOp,
        Torch_AtenSmmOp,
        Torch_AtenSmoothL1LossBackwardGradInputOp,
        Torch_AtenSmoothL1LossBackwardOp,
        Torch_AtenSmoothL1LossOp,
        Torch_AtenSoftMarginLossBackwardGradInputOp,
        Torch_AtenSoftMarginLossBackwardOp,
        Torch_AtenSoftMarginLossOp,
        Torch_AtenSoftplusBackwardGradInputOp,
        Torch_AtenSoftplusBackwardOp,
        Torch_AtenSoftplusOp,
        Torch_AtenSoftshrinkBackwardGradInputOp,
        Torch_AtenSoftshrinkBackwardOp,
        Torch_AtenSoftshrinkOp,
        Torch_AtenSortBoolOp,
        Torch_AtenSortFloatOp,
        Torch_AtenSortIntOp,
        Torch_AtenSortOp,
        Torch_AtenSortStableOp,
        Torch_AtenSortTensorOp,
        Torch_AtenSparseDimOp,
        Torch_AtenSparseMaskOp,
        Torch_AtenSparseResizeAndClear_Op,
        Torch_AtenSparseResize_Op,
        Torch_AtenSparseSampledAddmmOp,
        Torch_AtenSpecialAiryAiOp,
        Torch_AtenSpecialBesselJ0Op,
        Torch_AtenSpecialBesselJ1Op,
        Torch_AtenSpecialBesselY0Op,
        Torch_AtenSpecialBesselY1Op,
        Torch_AtenSpecialChebyshevPolynomialTNScalarOp,
        Torch_AtenSpecialChebyshevPolynomialTNScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialTOp,
        Torch_AtenSpecialChebyshevPolynomialTXScalarOp,
        Torch_AtenSpecialChebyshevPolynomialTXScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialUNScalarOp,
        Torch_AtenSpecialChebyshevPolynomialUNScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialUOp,
        Torch_AtenSpecialChebyshevPolynomialUXScalarOp,
        Torch_AtenSpecialChebyshevPolynomialUXScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialVNScalarOp,
        Torch_AtenSpecialChebyshevPolynomialVNScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialVOp,
        Torch_AtenSpecialChebyshevPolynomialVXScalarOp,
        Torch_AtenSpecialChebyshevPolynomialVXScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialWNScalarOp,
        Torch_AtenSpecialChebyshevPolynomialWNScalarOutOp,
        Torch_AtenSpecialChebyshevPolynomialWOp,
        Torch_AtenSpecialChebyshevPolynomialWXScalarOp,
        Torch_AtenSpecialChebyshevPolynomialWXScalarOutOp,
        Torch_AtenSpecialDigammaOp,
        Torch_AtenSpecialEntrOp,
        Torch_AtenSpecialErfOp,
        Torch_AtenSpecialErfcOp,
        Torch_AtenSpecialErfcxOp,
        Torch_AtenSpecialErfinvOp,
        Torch_AtenSpecialExp2Op,
        Torch_AtenSpecialExpitOp,
        Torch_AtenSpecialExpm1Op,
        Torch_AtenSpecialGammaincOp,
        Torch_AtenSpecialGammainccOp,
        Torch_AtenSpecialGammalnOp,
        Torch_AtenSpecialHermitePolynomialHNScalarOp,
        Torch_AtenSpecialHermitePolynomialHNScalarOutOp,
        Torch_AtenSpecialHermitePolynomialHOp,
        Torch_AtenSpecialHermitePolynomialHXScalarOp,
        Torch_AtenSpecialHermitePolynomialHXScalarOutOp,
        Torch_AtenSpecialHermitePolynomialHeNScalarOp,
        Torch_AtenSpecialHermitePolynomialHeNScalarOutOp,
        Torch_AtenSpecialHermitePolynomialHeOp,
        Torch_AtenSpecialHermitePolynomialHeXScalarOp,
        Torch_AtenSpecialHermitePolynomialHeXScalarOutOp,
        Torch_AtenSpecialI0EOp,
        Torch_AtenSpecialI0Op,
        Torch_AtenSpecialI1EOp,
        Torch_AtenSpecialI1Op,
        Torch_AtenSpecialLaguerrePolynomialLNScalarOp,
        Torch_AtenSpecialLaguerrePolynomialLNScalarOutOp,
        Torch_AtenSpecialLaguerrePolynomialLOp,
        Torch_AtenSpecialLaguerrePolynomialLXScalarOp,
        Torch_AtenSpecialLaguerrePolynomialLXScalarOutOp,
        Torch_AtenSpecialLegendrePolynomialPNScalarOp,
        Torch_AtenSpecialLegendrePolynomialPNScalarOutOp,
        Torch_AtenSpecialLegendrePolynomialPOp,
        Torch_AtenSpecialLegendrePolynomialPXScalarOp,
        Torch_AtenSpecialLegendrePolynomialPXScalarOutOp,
        Torch_AtenSpecialLog1POp,
        Torch_AtenSpecialLogNdtrOp,
        Torch_AtenSpecialLogSoftmaxOp,
        Torch_AtenSpecialLogitOp,
        Torch_AtenSpecialLogsumexpOp,
        Torch_AtenSpecialModifiedBesselI0Op,
        Torch_AtenSpecialModifiedBesselI1Op,
        Torch_AtenSpecialModifiedBesselK0Op,
        Torch_AtenSpecialModifiedBesselK1Op,
        Torch_AtenSpecialMultigammalnOp,
        Torch_AtenSpecialNdtrOp,
        Torch_AtenSpecialNdtriOp,
        Torch_AtenSpecialPolygammaOp,
        Torch_AtenSpecialPsiOp,
        Torch_AtenSpecialRoundOp,
        Torch_AtenSpecialScaledModifiedBesselK0Op,
        Torch_AtenSpecialScaledModifiedBesselK1Op,
        Torch_AtenSpecialShiftedChebyshevPolynomialTNScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialTNScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialTOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialTXScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialTXScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUNScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUNScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUXScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUXScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVNScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVNScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVXScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVXScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWNScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWNScalarOutOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWXScalarOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWXScalarOutOp,
        Torch_AtenSpecialSincOp,
        Torch_AtenSpecialSoftmaxOp,
        Torch_AtenSpecialSphericalBesselJ0Op,
        Torch_AtenSpecialXlog1PyOp,
        Torch_AtenSpecialXlog1PyOtherScalarOp,
        Torch_AtenSpecialXlog1PyOtherScalarOutOp,
        Torch_AtenSpecialXlog1PySelfScalarOp,
        Torch_AtenSpecialXlog1PySelfScalarOutOp,
        Torch_AtenSpecialXlogyOp,
        Torch_AtenSpecialXlogyOtherScalarOp,
        Torch_AtenSpecialXlogyOtherScalarOutOp,
        Torch_AtenSpecialXlogySelfScalarOp,
        Torch_AtenSpecialXlogySelfScalarOutOp,
        Torch_AtenSpecialZetaOp,
        Torch_AtenSpecialZetaOtherScalarOp,
        Torch_AtenSpecialZetaOtherScalarOutOp,
        Torch_AtenSpecialZetaSelfScalarOp,
        Torch_AtenSpecialZetaSelfScalarOutOp,
        Torch_AtenSplitOp,
        Torch_AtenSplitSizesOp,
        Torch_AtenSplitTensorOp,
        Torch_AtenSplitWithSizesCopyOp,
        Torch_AtenSplitWithSizesOp,
        Torch_AtenSqrtFloatOp,
        Torch_AtenSqrtIntOp,
        Torch_AtenSqrtOp,
        Torch_AtenSqrtScalarOp,
        Torch_AtenSqrt_Op,
        Torch_AtenSquareOp,
        Torch_AtenSquare_Op,
        Torch_AtenSqueezeCopyDimOp,
        Torch_AtenSqueezeCopyDimOutOp,
        Torch_AtenSqueezeCopyDimsOp,
        Torch_AtenSqueezeCopyDimsOutOp,
        Torch_AtenSqueezeCopyOp,
        Torch_AtenSqueezeDimOp,
        Torch_AtenSqueezeDimsOp,
        Torch_AtenSqueezeOp,
        Torch_AtenSqueeze_DimOp,
        Torch_AtenSqueeze_DimsOp,
        Torch_AtenSqueeze_Op,
        Torch_AtenSspaddmmOp,
        Torch_AtenStackOp,
        Torch_AtenStdCorrectionOp,
        Torch_AtenStdCorrectionOutOp,
        Torch_AtenStdDimOp,
        Torch_AtenStdMeanCorrectionOp,
        Torch_AtenStdMeanCorrectionOutOp,
        Torch_AtenStdMeanDimOp,
        Torch_AtenStdMeanOp,
        Torch_AtenStdOp,
        Torch_AtenStftOp,
        Torch_AtenStorageOffsetOp,
        Torch_AtenStrideIntOp,
        Torch_AtenStrideOp,
        Torch_AtenSubFloatIntOp,
        Torch_AtenSubFloatOp,
        Torch_AtenSubIntFloatOp,
        Torch_AtenSubIntOp,
        Torch_AtenSubOp,
        Torch_AtenSubScalarOp,
        Torch_AtenSubScalarOutOp,
        Torch_AtenSubTensorOp,
        Torch_AtenSub_ScalarOp,
        Torch_AtenSub_TensorOp,
        Torch_AtenSubtractScalarOp,
        Torch_AtenSubtractTensorOp,
        Torch_AtenSubtract_ScalarOp,
        Torch_AtenSubtract_TensorOp,
        Torch_AtenSumBoolOp,
        Torch_AtenSumDimIntlistOp,
        Torch_AtenSumFloatOp,
        Torch_AtenSumIntOp,
        Torch_AtenSumIntlistOutOp,
        Torch_AtenSumOp,
        Torch_AtenSumToSizeOp,
        Torch_AtenSvdOp,
        Torch_AtenSwapaxesOp,
        Torch_AtenSwapaxes_Op,
        Torch_AtenSwapdimsOp,
        Torch_AtenSwapdims_Op,
        Torch_AtenSymConstrainRangeForSizeOp,
        Torch_AtenSymConstrainRangeOp,
        Torch_AtenSymNumelOp,
        Torch_AtenSymSizeIntOp,
        Torch_AtenSymSizeOp,
        Torch_AtenSymStorageOffsetOp,
        Torch_AtenSymStrideIntOp,
        Torch_AtenSymStrideOp,
        Torch_AtenTCopyOp,
        Torch_AtenTOp,
        Torch_AtenT_Op,
        Torch_AtenTakeAlongDimOp,
        Torch_AtenTakeOp,
        Torch_AtenTanFloatOp,
        Torch_AtenTanIntOp,
        Torch_AtenTanOp,
        Torch_AtenTanScalarOp,
        Torch_AtenTan_Op,
        Torch_AtenTanhBackwardGradInputOp,
        Torch_AtenTanhBackwardOp,
        Torch_AtenTanhFloatOp,
        Torch_AtenTanhIntOp,
        Torch_AtenTanhOp,
        Torch_AtenTanhScalarOp,
        Torch_AtenTanh_Op,
        Torch_AtenTensorSplitIndicesOp,
        Torch_AtenTensorSplitSectionsOp,
        Torch_AtenTensorSplitTensorIndicesOrSectionsOp,
        Torch_AtenTensordotOp,
        Torch_AtenThnnConv2DOp,
        Torch_AtenThresholdBackwardGradInputOp,
        Torch_AtenThresholdBackwardOp,
        Torch_AtenThresholdOp,
        Torch_AtenThreshold_Op,
        Torch_AtenTileOp,
        Torch_AtenToDenseBackwardOp,
        Torch_AtenToDenseOp,
        Torch_AtenToDtypeOp,
        Torch_AtenToMkldnnBackwardOp,
        Torch_AtenToMkldnnOp,
        Torch_AtenToOtherOp,
        Torch_AtenToPaddedTensorOp,
        Torch_AtenToPrimDtypeOp,
        Torch_AtenToPrimOtherOp,
        Torch_AtenToSparseBscOp,
        Torch_AtenToSparseBsrOp,
        Torch_AtenToSparseCscOp,
        Torch_AtenToSparseCsrOp,
        Torch_AtenToSparseOp,
        Torch_AtenToSparseSparseDimOp,
        Torch_AtenTopkOp,
        Torch_AtenTraceBackwardOp,
        Torch_AtenTraceOp,
        Torch_AtenTransposeCopyIntOp,
        Torch_AtenTransposeCopyIntOutOp,
        Torch_AtenTransposeIntOp,
        Torch_AtenTranspose_Op,
        Torch_AtenTriangularSolveOp,
        Torch_AtenTriangularSolveXOp,
        Torch_AtenTrilOp,
        Torch_AtenTril_Op,
        Torch_AtenTripletMarginLossOp,
        Torch_AtenTriuOp,
        Torch_AtenTriu_Op,
        Torch_AtenTrueDivideScalarOp,
        Torch_AtenTrueDivideTensorOp,
        Torch_AtenTrueDivide_ScalarOp,
        Torch_AtenTrueDivide_TensorOp,
        Torch_AtenTruncOp,
        Torch_AtenTrunc_Op,
        Torch_AtenTypeAsOp,
        Torch_AtenUnbindIntOp,
        Torch_AtenUnflattenDenseTensorsOp,
        Torch_AtenUnfoldBackwardOp,
        Torch_AtenUnfoldCopyOp,
        Torch_AtenUnfoldOp,
        Torch_AtenUniqueConsecutiveOp,
        Torch_AtenUniqueDimConsecutiveOp,
        Torch_AtenUniqueDimOp,
        Torch_AtenUnsafeChunkOp,
        Torch_AtenUnsafeSplitTensorOp,
        Torch_AtenUnsafeSplitTensorOutOp,
        Torch_AtenUnsafeSplitWithSizesOp,
        Torch_AtenUnsqueezeCopyOp,
        Torch_AtenUnsqueezeOp,
        Torch_AtenUnsqueeze_Op,
        Torch_AtenUpsampleBicubic2DBackwardGradInputOp,
        Torch_AtenUpsampleBicubic2DBackwardOp,
        Torch_AtenUpsampleBicubic2DOp,
        Torch_AtenUpsampleBicubic2DVecOp,
        Torch_AtenUpsampleBilinear2DBackwardGradInputOp,
        Torch_AtenUpsampleBilinear2DBackwardOp,
        Torch_AtenUpsampleBilinear2DOp,
        Torch_AtenUpsampleBilinear2DVecOp,
        Torch_AtenUpsampleBilinear2DVecOutOp,
        Torch_AtenUpsampleLinear1DBackwardGradInputOp,
        Torch_AtenUpsampleLinear1DBackwardOp,
        Torch_AtenUpsampleLinear1DOp,
        Torch_AtenUpsampleLinear1DVecOp,
        Torch_AtenUpsampleNearest1DBackwardGradInputOp,
        Torch_AtenUpsampleNearest1DBackwardOp,
        Torch_AtenUpsampleNearest1DOp,
        Torch_AtenUpsampleNearest1DVecOp,
        Torch_AtenUpsampleNearest2DBackwardGradInputOp,
        Torch_AtenUpsampleNearest2DBackwardOp,
        Torch_AtenUpsampleNearest2DOp,
        Torch_AtenUpsampleNearest2DVecOp,
        Torch_AtenUpsampleNearest2DVecOutOp,
        Torch_AtenUpsampleNearest3DBackwardGradInputOp,
        Torch_AtenUpsampleNearest3DBackwardOp,
        Torch_AtenUpsampleNearest3DOp,
        Torch_AtenUpsampleNearest3DVecOp,
        Torch_AtenUpsampleTrilinear3DBackwardGradInputOp,
        Torch_AtenUpsampleTrilinear3DBackwardOp,
        Torch_AtenUpsampleTrilinear3DOp,
        Torch_AtenUpsampleTrilinear3DVecOp,
        Torch_AtenValueSelectingReductionBackwardOp,
        Torch_AtenValuesCopyOp,
        Torch_AtenValuesOp,
        Torch_AtenVanderOp,
        Torch_AtenVarCorrectionOp,
        Torch_AtenVarCorrectionOutOp,
        Torch_AtenVarDimOp,
        Torch_AtenVarMeanCorrectionOp,
        Torch_AtenVarMeanCorrectionOutOp,
        Torch_AtenVarMeanDimOp,
        Torch_AtenVarMeanOp,
        Torch_AtenVarOp,
        Torch_AtenVdotOp,
        Torch_AtenViewAsComplexCopyOp,
        Torch_AtenViewAsComplexOp,
        Torch_AtenViewAsOp,
        Torch_AtenViewAsRealCopyOp,
        Torch_AtenViewAsRealOp,
        Torch_AtenViewCopyDtypeOp,
        Torch_AtenViewCopyDtypeOutOp,
        Torch_AtenViewCopyOp,
        Torch_AtenViewDtypeOp,
        Torch_AtenViewOp,
        Torch_AtenVstackOp,
        Torch_AtenWhereOp,
        Torch_AtenWhereScalarOp,
        Torch_AtenWhereScalarotherOp,
        Torch_AtenWhereScalarselfOp,
        Torch_AtenWhereSelfOp,
        Torch_AtenWhereSelfOutOp,
        Torch_AtenXlogyOutscalarOtherOp,
        Torch_AtenXlogyOutscalarSelfOp,
        Torch_AtenXlogyOuttensorOp,
        Torch_AtenXlogyScalarOtherOp,
        Torch_AtenXlogyScalarSelfOp,
        Torch_AtenXlogyTensorOp,
        Torch_AtenXlogy_ScalarOtherOp,
        Torch_AtenXlogy_TensorOp,
        Torch_AtenZeroOp,
        Torch_AtenZero_Op,
        Torch_Aten_AdaptiveAvgPool2DBackwardOp,
        Torch_Aten_AdaptiveAvgPool2DOp,
        Torch_Aten_AdaptiveAvgPool3DBackwardOp,
        Torch_Aten_AdaptiveAvgPool3DOp,
        Torch_Aten_AddBatchDimOp,
        Torch_Aten_AddReluScalarOp,
        Torch_Aten_AddReluScalarOutOp,
        Torch_Aten_AddReluTensorOp,
        Torch_Aten_AddmmActivationOp,
        Torch_Aten_AminmaxDimOp,
        Torch_Aten_AminmaxDimOutOp,
        Torch_Aten_AminmaxOp,
        Torch_Aten_AmpForeachNonFiniteCheckAndUnscale_Op,
        Torch_Aten_AmpUpdateScale_Op,
        Torch_Aten_And_BoolOp,
        Torch_Aten_And_IntOp,
        Torch_Aten_And_ScalarOp,
        Torch_Aten_And_TensorOp,
        Torch_Aten_AssertAsyncOp,
        Torch_Aten_AutocastToFullPrecisionOp,
        Torch_Aten_AutocastToReducedPrecisionOp,
        Torch_Aten_BackwardOp,
        Torch_Aten_BatchNormImplIndexBackwardOp,
        Torch_Aten_BatchNormImplIndexOp,
        Torch_Aten_BatchNormNoUpdateOp,
        Torch_Aten_BatchNormWithUpdateFunctionalOp,
        Torch_Aten_BatchNormWithUpdateOp,
        Torch_Aten_CastByteOp,
        Torch_Aten_CastCharOp,
        Torch_Aten_CastDoubleOp,
        Torch_Aten_CastFloatOp,
        Torch_Aten_CastHalfOp,
        Torch_Aten_CastIntOp,
        Torch_Aten_CastLongOp,
        Torch_Aten_CastShortOp,
        Torch_Aten_CdistBackwardOp,
        Torch_Aten_CdistForwardOp,
        Torch_Aten_CholeskySolveHelperOp,
        Torch_Aten_ChooseQparamsPerTensorOp,
        Torch_Aten_ChunkCatOp,
        Torch_Aten_CoalesceOp,
        Torch_Aten_Coalesced_Op,
        Torch_Aten_ComputeLinearCombinationOp,
        Torch_Aten_ConjCopyOp,
        Torch_Aten_ConjOp,
        Torch_Aten_ConjPhysicalOp,
        Torch_Aten_ConvDepthwise2DOp,
        Torch_Aten_ConvertIndicesFromCooToCsrOp,
        Torch_Aten_ConvertIndicesFromCsrToCooOp,
        Torch_Aten_ConvertWeightToInt4PackForCpuOp,
        Torch_Aten_ConvertWeightToInt4PackOp,
        Torch_Aten_ConvolutionDeprecatedOp,
        Torch_Aten_ConvolutionDoubleBackwardOp,
        Torch_Aten_ConvolutionOp,
        Torch_Aten_CopyFromAndResizeOp,
        Torch_Aten_CopyFromOp,
        Torch_Aten_CsltCompressOp,
        Torch_Aten_CsltSparseMmOp,
        Torch_Aten_CsltSparseMmSearchOp,
        Torch_Aten_CtcLossBackwardOp,
        Torch_Aten_CtcLossBackwardTensorOp,
        Torch_Aten_CtcLossOp,
        Torch_Aten_CtcLossTensorOp,
        Torch_Aten_CtcLossTensorOutOp,
        Torch_Aten_CudnnCtcLossOp,
        Torch_Aten_CudnnCtcLossTensorOp,
        Torch_Aten_CudnnRnnBackwardOp,
        Torch_Aten_CudnnRnnFlattenWeightOp,
        Torch_Aten_CudnnRnnOp,
        Torch_Aten_CufftClearPlanCacheOp,
        Torch_Aten_CufftGetPlanCacheMaxSizeOp,
        Torch_Aten_CufftGetPlanCacheSizeOp,
        Torch_Aten_CufftSetPlanCacheMaxSizeOp,
        Torch_Aten_CummaxHelperOp,
        Torch_Aten_CumminHelperOp,
        Torch_Aten_DebugHasInternalOverlapOp,
        Torch_Aten_DimArangeOp,
        Torch_Aten_DimiOp,
        Torch_Aten_DimvOp,
        Torch_Aten_DirichletGradOp,
        Torch_Aten_EfficientAttentionBackwardOp,
        Torch_Aten_EfficientAttentionForwardOp,
        Torch_Aten_EmbeddingBagBackwardOp,
        Torch_Aten_EmbeddingBagDenseBackwardOp,
        Torch_Aten_EmbeddingBagForwardOnlyOp,
        Torch_Aten_EmbeddingBagOp,
        Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp,
        Torch_Aten_EmbeddingBagSparseBackwardOp,
        Torch_Aten_EuclideanDistOp,
        Torch_Aten_FakeQuantizeLearnablePerChannelAffineBackwardOp,
        Torch_Aten_FakeQuantizeLearnablePerChannelAffineOp,
        Torch_Aten_FakeQuantizeLearnablePerTensorAffineBackwardOp,
        Torch_Aten_FakeQuantizeLearnablePerTensorAffineOp,
        Torch_Aten_FakeQuantizePerTensorAffineCachemaskTensorQparamsOp,
        Torch_Aten_FftC2COp,
        Torch_Aten_FftC2ROp,
        Torch_Aten_FftR2COp,
        Torch_Aten_FillMemEffDropoutMask_Op,
        Torch_Aten_FlashAttentionBackwardOp,
        Torch_Aten_FlashAttentionForwardOp,
        Torch_Aten_FoobarOp,
        Torch_Aten_ForeachAbsOp,
        Torch_Aten_ForeachAbs_Op,
        Torch_Aten_ForeachAcosOp,
        Torch_Aten_ForeachAcos_Op,
        Torch_Aten_ForeachAsinOp,
        Torch_Aten_ForeachAsin_Op,
        Torch_Aten_ForeachAtanOp,
        Torch_Aten_ForeachAtan_Op,
        Torch_Aten_ForeachCeilOp,
        Torch_Aten_ForeachCeil_Op,
        Torch_Aten_ForeachCopyOp,
        Torch_Aten_ForeachCopy_Op,
        Torch_Aten_ForeachCosOp,
        Torch_Aten_ForeachCos_Op,
        Torch_Aten_ForeachCoshOp,
        Torch_Aten_ForeachCosh_Op,
        Torch_Aten_ForeachErfOp,
        Torch_Aten_ForeachErf_Op,
        Torch_Aten_ForeachErfcOp,
        Torch_Aten_ForeachErfc_Op,
        Torch_Aten_ForeachExpOp,
        Torch_Aten_ForeachExp_Op,
        Torch_Aten_ForeachExpm1Op,
        Torch_Aten_ForeachExpm1_Op,
        Torch_Aten_ForeachFloorOp,
        Torch_Aten_ForeachFloor_Op,
        Torch_Aten_ForeachFracOp,
        Torch_Aten_ForeachFrac_Op,
        Torch_Aten_ForeachLgammaOp,
        Torch_Aten_ForeachLgamma_Op,
        Torch_Aten_ForeachLog10Op,
        Torch_Aten_ForeachLog10_Op,
        Torch_Aten_ForeachLog1POp,
        Torch_Aten_ForeachLog1P_Op,
        Torch_Aten_ForeachLog2Op,
        Torch_Aten_ForeachLog2_Op,
        Torch_Aten_ForeachLogOp,
        Torch_Aten_ForeachLog_Op,
        Torch_Aten_ForeachMaxOp,
        Torch_Aten_ForeachNegOp,
        Torch_Aten_ForeachNeg_Op,
        Torch_Aten_ForeachReciprocalOp,
        Torch_Aten_ForeachReciprocal_Op,
        Torch_Aten_ForeachRoundOp,
        Torch_Aten_ForeachRound_Op,
        Torch_Aten_ForeachRsqrtOp,
        Torch_Aten_ForeachRsqrt_Op,
        Torch_Aten_ForeachSigmoidOp,
        Torch_Aten_ForeachSigmoid_Op,
        Torch_Aten_ForeachSignOp,
        Torch_Aten_ForeachSign_Op,
        Torch_Aten_ForeachSinOp,
        Torch_Aten_ForeachSin_Op,
        Torch_Aten_ForeachSinhOp,
        Torch_Aten_ForeachSinh_Op,
        Torch_Aten_ForeachSqrtOp,
        Torch_Aten_ForeachSqrt_Op,
        Torch_Aten_ForeachTanOp,
        Torch_Aten_ForeachTan_Op,
        Torch_Aten_ForeachTanhOp,
        Torch_Aten_ForeachTanh_Op,
        Torch_Aten_ForeachTruncOp,
        Torch_Aten_ForeachTrunc_Op,
        Torch_Aten_ForeachZero_Op,
        Torch_Aten_FunctionalSymConstrainRangeForSizeOp,
        Torch_Aten_FunctionalSymConstrainRangeOp,
        Torch_Aten_FusedAdagrad_Op,
        Torch_Aten_FusedAdamOp,
        Torch_Aten_FusedAdamTensorLrOp,
        Torch_Aten_FusedAdamTensorLrOutOp,
        Torch_Aten_FusedAdam_Op,
        Torch_Aten_FusedAdam_TensorLrOp,
        Torch_Aten_FusedAdamw_Op,
        Torch_Aten_FusedAdamw_TensorLrOp,
        Torch_Aten_FusedMovingAvgObsFqHelperOp,
        Torch_Aten_FusedSdpChoiceOp,
        Torch_Aten_FusedSgd_Op,
        Torch_Aten_FusedSgd_TensorLrOp,
        Torch_Aten_FwPrimalCopyOp,
        Torch_Aten_FwPrimalOp,
        Torch_Aten_GatherSparseBackwardOp,
        Torch_Aten_GridSampler2DCpuFallbackBackwardOp,
        Torch_Aten_GridSampler2DCpuFallbackOp,
        Torch_Aten_HasSameStorageNumelOp,
        Torch_Aten_HistogramddBinEdgesOp,
        Torch_Aten_HistogramddFromBinCtsOp,
        Torch_Aten_HistogramddFromBinTensorsOp,
        Torch_Aten_Iand_ScalarOp,
        Torch_Aten_Iand_TensorOp,
        Torch_Aten_Ilshift_ScalarOp,
        Torch_Aten_Ilshift_TensorOp,
        Torch_Aten_IndexPutImpl_HackedTwinOp,
        Torch_Aten_IndicesCopyOp,
        Torch_Aten_IndicesOp,
        Torch_Aten_IntMmOp,
        Torch_Aten_Ior_ScalarOp,
        Torch_Aten_Ior_TensorOp,
        Torch_Aten_Irshift_ScalarOp,
        Torch_Aten_Irshift_TensorOp,
        Torch_Aten_IsAllTrueOp,
        Torch_Aten_IsAnyTrueOp,
        Torch_Aten_IsZerotensorOp,
        Torch_Aten_Ixor_ScalarOp,
        Torch_Aten_Ixor_TensorOp,
        Torch_Aten_JaggedToPaddedDenseForwardOp,
        Torch_Aten_LazyCloneOp,
        Torch_Aten_LinalgDetOp,
        Torch_Aten_LinalgEigvalsOp,
        Torch_Aten_LinalgSlogdetOp,
        Torch_Aten_LinalgSolveExOp,
        Torch_Aten_ListToTensorOp,
        Torch_Aten_LocalScalarDenseOp,
        Torch_Aten_LogSoftmaxBackwardDataOp,
        Torch_Aten_LogSoftmaxOp,
        Torch_Aten_LogcumsumexpOp,
        Torch_Aten_Lshift_IntOp,
        Torch_Aten_Lshift_ScalarOp,
        Torch_Aten_Lshift_ScalarOutOp,
        Torch_Aten_Lshift_TensorOp,
        Torch_Aten_Lshift_TensorOutOp,
        Torch_Aten_LstmMpsOp,
        Torch_Aten_LuWithInfoOp,
        Torch_Aten_MakeDualCopyOp,
        Torch_Aten_MakeDualOp,
        Torch_Aten_MakePerChannelQuantizedTensorOp,
        Torch_Aten_MakePerTensorQuantizedTensorOp,
        Torch_Aten_MaskedScaleOp,
        Torch_Aten_MaskedSoftmaxBackwardOp,
        Torch_Aten_MaskedSoftmaxOp,
        Torch_Aten_MkldnnReshapeOp,
        Torch_Aten_MkldnnTransposeOp,
        Torch_Aten_MkldnnTranspose_Op,
        Torch_Aten_MpsConvolutionOp,
        Torch_Aten_MpsConvolutionTransposeOp,
        Torch_Aten_NativeBatchNormLegitFunctionalOp,
        Torch_Aten_NativeBatchNormLegitNoStatsOp,
        Torch_Aten_NativeBatchNormLegitNoStatsOutOp,
        Torch_Aten_NativeBatchNormLegitNoTrainingOp,
        Torch_Aten_NativeBatchNormLegitOp,
        Torch_Aten_NativeMultiHeadAttentionOp,
        Torch_Aten_NegViewCopyOp,
        Torch_Aten_NegViewOp,
        Torch_Aten_NestedComputeContiguousStridesOffsetsOp,
        Torch_Aten_NestedFromPaddedAndNestedExampleOp,
        Torch_Aten_NestedFromPaddedOp,
        Torch_Aten_NestedFromPaddedTensorOp,
        Torch_Aten_NestedGetJaggedDummyOp,
        Torch_Aten_NestedGetLengthsOp,
        Torch_Aten_NestedGetMaxSeqlenOp,
        Torch_Aten_NestedGetMinSeqlenOp,
        Torch_Aten_NestedGetOffsetsOp,
        Torch_Aten_NestedGetRaggedIdxOp,
        Torch_Aten_NestedGetValuesCopyOp,
        Torch_Aten_NestedGetValuesOp,
        Torch_Aten_NestedSelectBackwardOp,
        Torch_Aten_NestedSumBackwardOp,
        Torch_Aten_NestedTensorFromMaskLeftAlignedOp,
        Torch_Aten_NestedTensorFromMaskOp,
        Torch_Aten_NestedTensorSizeOp,
        Torch_Aten_NestedTensorSoftmaxWithShapeOp,
        Torch_Aten_NestedTensorStorageOffsetsOp,
        Torch_Aten_NestedTensorStridesOp,
        Torch_Aten_NestedViewFromBufferCopyOp,
        Torch_Aten_NestedViewFromBufferOp,
        Torch_Aten_NestedViewFromJaggedCopyOp,
        Torch_Aten_NestedViewFromJaggedOp,
        Torch_Aten_NewZerosWithSameFeatureMetaOp,
        Torch_Aten_NnpackAvailableOp,
        Torch_Aten_NnpackSpatialConvolutionOp,
        Torch_Aten_NnzOp,
        Torch_Aten_Or_BoolOp,
        Torch_Aten_Or_IntOp,
        Torch_Aten_Or_ScalarOp,
        Torch_Aten_Or_TensorOp,
        Torch_Aten_PackPaddedSequenceBackwardOp,
        Torch_Aten_PackPaddedSequenceOp,
        Torch_Aten_PadCircularOp,
        Torch_Aten_PadEnumOp,
        Torch_Aten_PadPackedSequenceOp,
        Torch_Aten_PaddedDenseToJaggedForwardOp,
        Torch_Aten_PdistBackwardOp,
        Torch_Aten_PdistForwardOp,
        Torch_Aten_PreluKernelBackwardOp,
        Torch_Aten_PreluKernelOp,
        Torch_Aten_PropagateXlaDataOp,
        Torch_Aten_RemoveBatchDimOp,
        Torch_Aten_ReshapeAliasCopyOp,
        Torch_Aten_ReshapeAliasOp,
        Torch_Aten_ReshapeCopyOp,
        Torch_Aten_ReshapeFromTensorOp,
        Torch_Aten_RowwisePruneOp,
        Torch_Aten_Rshift_IntOp,
        Torch_Aten_Rshift_ScalarOp,
        Torch_Aten_Rshift_ScalarOutOp,
        Torch_Aten_Rshift_TensorOp,
        Torch_Aten_Rshift_TensorOutOp,
        Torch_Aten_SafeSoftmaxOp,
        Torch_Aten_SaturateWeightToFp16Op,
        Torch_Aten_ScaledDotProductAttentionMathForMpsOp,
        Torch_Aten_ScaledDotProductAttentionMathOp,
        Torch_Aten_ScaledDotProductCudnnAttentionBackwardOp,
        Torch_Aten_ScaledDotProductCudnnAttentionOp,
        Torch_Aten_ScaledDotProductEfficientAttentionBackwardOp,
        Torch_Aten_ScaledDotProductEfficientAttentionOp,
        Torch_Aten_ScaledDotProductFlashAttentionBackwardOp,
        Torch_Aten_ScaledDotProductFlashAttentionForCpuBackwardOp,
        Torch_Aten_ScaledDotProductFlashAttentionForCpuOp,
        Torch_Aten_ScaledDotProductFlashAttentionOp,
        Torch_Aten_ScaledDotProductFusedAttentionOverrideableBackwardOp,
        Torch_Aten_ScaledDotProductFusedAttentionOverrideableOp,
        Torch_Aten_ScaledMmOp,
        Torch_Aten_ShapeAsTensorOp,
        Torch_Aten_SlowConv2DForwardOp,
        Torch_Aten_SlowConv2DForwardOutputOp,
        Torch_Aten_SobolEngineDrawOp,
        Torch_Aten_SobolEngineFf_Op,
        Torch_Aten_SobolEngineInitializeState_Op,
        Torch_Aten_SobolEngineScramble_Op,
        Torch_Aten_SoftmaxBackwardDataOp,
        Torch_Aten_SoftmaxOp,
        Torch_Aten_SparseAddmmOp,
        Torch_Aten_SparseBroadcastToCopyOp,
        Torch_Aten_SparseBroadcastToOp,
        Torch_Aten_SparseLogSoftmaxBackwardDataOp,
        Torch_Aten_SparseLogSoftmaxIntOp,
        Torch_Aten_SparseLogSoftmaxOp,
        Torch_Aten_SparseMaskProjectionOp,
        Torch_Aten_SparseMmOp,
        Torch_Aten_SparseSemiStructuredAddmmOp,
        Torch_Aten_SparseSemiStructuredApplyDenseOp,
        Torch_Aten_SparseSemiStructuredApplyOp,
        Torch_Aten_SparseSemiStructuredMmOp,
        Torch_Aten_SparseSoftmaxBackwardDataOp,
        Torch_Aten_SparseSoftmaxIntOp,
        Torch_Aten_SparseSoftmaxOp,
        Torch_Aten_SparseSparseMatmulOp,
        Torch_Aten_SparseSumBackwardOp,
        Torch_Aten_SparseSumDimDtypeOp,
        Torch_Aten_SparseSumDimOp,
        Torch_Aten_SparseSumDimOutOp,
        Torch_Aten_SparseSumDtypeOp,
        Torch_Aten_SparseSumOp,
        Torch_Aten_SpdiagsOp,
        Torch_Aten_SpsolveOp,
        Torch_Aten_StackOp,
        Torch_Aten_StandardGammaGradOp,
        Torch_Aten_TestAutogradMultipleDispatchViewCopyOp,
        Torch_Aten_TestAutogradMultipleDispatchViewOp,
        Torch_Aten_TestCheckTensorOp,
        Torch_Aten_TestFunctorchFallbackOp,
        Torch_Aten_TestOptionalFilledIntlistOp,
        Torch_Aten_TestOptionalFloatlistOp,
        Torch_Aten_TestOptionalIntlistOp,
        Torch_Aten_TestParallelMaterializeOp,
        Torch_Aten_TestSerializationSubcmulOp,
        Torch_Aten_TestWarnInAutogradOp,
        Torch_Aten_ThnnDifferentiableGruCellBackwardOp,
        Torch_Aten_ThnnDifferentiableLstmCellBackwardOp,
        Torch_Aten_ThnnFusedGruCellBackwardOp,
        Torch_Aten_ThnnFusedGruCellOp,
        Torch_Aten_ThnnFusedLstmCellBackwardImplOp,
        Torch_Aten_ThnnFusedLstmCellBackwardOp,
        Torch_Aten_ThnnFusedLstmCellOp,
        Torch_Aten_ToCpuOp,
        Torch_Aten_ToDenseOp,
        Torch_Aten_ToSparseBscOp,
        Torch_Aten_ToSparseBsrOp,
        Torch_Aten_ToSparseCscOp,
        Torch_Aten_ToSparseCsrOp,
        Torch_Aten_ToSparseOp,
        Torch_Aten_ToSparseSemiStructuredOp,
        Torch_Aten_ToSparseSparseDimOp,
        Torch_Aten_ToSparseSparseDimOutOp,
        Torch_Aten_TransformBiasRescaleQkvOp,
        Torch_Aten_TransformerEncoderLayerFwdOp,
        Torch_Aten_TrilinearOp,
        Torch_Aten_TritonMultiHeadAttentionOp,
        Torch_Aten_TritonScaledDotAttentionOp,
        Torch_Aten_Unique2Op,
        Torch_Aten_UniqueOp,
        Torch_Aten_UnpackDualOp,
        Torch_Aten_UnsafeIndexPutHackedTwinOp,
        Torch_Aten_UnsafeIndexTensorHackedTwinOp,
        Torch_Aten_UnsafeViewOp,
        Torch_Aten_UpsampleBicubic2DAaBackwardGradInputOp,
        Torch_Aten_UpsampleBicubic2DAaBackwardOp,
        Torch_Aten_UpsampleBicubic2DAaOp,
        Torch_Aten_UpsampleBicubic2DAaVecOp,
        Torch_Aten_UpsampleBilinear2DAaBackwardGradInputOp,
        Torch_Aten_UpsampleBilinear2DAaBackwardOp,
        Torch_Aten_UpsampleBilinear2DAaOp,
        Torch_Aten_UpsampleBilinear2DAaVecOp,
        Torch_Aten_UpsampleNearestExact1DBackwardGradInputOp,
        Torch_Aten_UpsampleNearestExact1DBackwardOp,
        Torch_Aten_UpsampleNearestExact1DOp,
        Torch_Aten_UpsampleNearestExact1DVecOp,
        Torch_Aten_UpsampleNearestExact2DBackwardGradInputOp,
        Torch_Aten_UpsampleNearestExact2DBackwardOp,
        Torch_Aten_UpsampleNearestExact2DOp,
        Torch_Aten_UpsampleNearestExact2DVecOp,
        Torch_Aten_UpsampleNearestExact3DBackwardGradInputOp,
        Torch_Aten_UpsampleNearestExact3DBackwardOp,
        Torch_Aten_UpsampleNearestExact3DOp,
        Torch_Aten_UpsampleNearestExact3DVecOp,
        Torch_Aten_UseCudnnCtcLossOp,
        Torch_Aten_UseCudnnCtcLossTensorOp,
        Torch_Aten_UseCudnnRnnFlattenWeightOp,
        Torch_Aten_ValidateCompressedSparseIndicesOp,
        Torch_Aten_ValidateSparseBscTensorArgsOp,
        Torch_Aten_ValidateSparseBsrTensorArgsOp,
        Torch_Aten_ValidateSparseCompressedTensorArgsOp,
        Torch_Aten_ValidateSparseCooTensorArgsOp,
        Torch_Aten_ValidateSparseCscTensorArgsOp,
        Torch_Aten_ValidateSparseCsrTensorArgsOp,
        Torch_Aten_ValuesCopyOp,
        Torch_Aten_ValuesOp,
        Torch_Aten_VersionOp,
        Torch_Aten_WeightInt4PackMmForCpuOp,
        Torch_Aten_WeightInt4PackMmOp,
        Torch_Aten_WeightInt8PackMmOp,
        Torch_Aten_WeightNormDifferentiableBackwardOp,
        Torch_Aten_WeightNormInterfaceBackwardOp,
        Torch_Aten_WeightNormInterfaceOp,
        Torch_Aten_WeightNormOp,
        Torch_Aten_WrappedLinearPrepackOp,
        Torch_Aten_WrappedQuantizedLinearPrepackedOp,
        Torch_Aten_Xor_BoolOp,
        Torch_Aten_Xor_IntOp,
        Torch_Aten_Xor_ScalarOp,
        Torch_Aten_Xor_TensorOp,
        Torch_InductorAccumulateGrad_Op,
        Torch_InductorResizeStorageBytes_Op,
        Torch_PrimsAbsOp,
        Torch_PrimsAcosOp,
        Torch_PrimsAcoshOp,
        Torch_PrimsAddOp,
        Torch_PrimsAmaxOp,
        Torch_PrimsAminOp,
        Torch_PrimsAsStridedOp,
        Torch_PrimsAsStridedScatterOp,
        Torch_PrimsAsinOp,
        Torch_PrimsAsinhOp,
        Torch_PrimsAtan2Op,
        Torch_PrimsAtanOp,
        Torch_PrimsAtanhOp,
        Torch_PrimsBesselI0EOp,
        Torch_PrimsBesselI0Op,
        Torch_PrimsBesselI1EOp,
        Torch_PrimsBesselI1Op,
        Torch_PrimsBesselJ0Op,
        Torch_PrimsBesselJ1Op,
        Torch_PrimsBitwiseAndOp,
        Torch_PrimsBitwiseNotOp,
        Torch_PrimsBitwiseOrOp,
        Torch_PrimsBitwiseXorOp,
        Torch_PrimsBroadcastInDimOp,
        Torch_PrimsCatOp,
        Torch_PrimsCbrtOp,
        Torch_PrimsCeilOp,
        Torch_PrimsCloneOp,
        Torch_PrimsCollapseOp,
        Torch_PrimsCollapseViewOp,
        Torch_PrimsConjOp,
        Torch_PrimsConjPhysicalOp,
        Torch_PrimsConvertElementTypeOp,
        Torch_PrimsCopyStridedOp,
        Torch_PrimsCopyToOp,
        Torch_PrimsCosOp,
        Torch_PrimsCoshOp,
        Torch_PrimsDigammaOp,
        Torch_PrimsDivOp,
        Torch_PrimsEqOp,
        Torch_PrimsErfInvOp,
        Torch_PrimsErfOp,
        Torch_PrimsErfcOp,
        Torch_PrimsErfcxOp,
        Torch_PrimsExp2Op,
        Torch_PrimsExpOp,
        Torch_PrimsExpm1Op,
        Torch_PrimsFftC2COp,
        Torch_PrimsFftC2ROp,
        Torch_PrimsFftR2COp,
        Torch_PrimsFillOp,
        Torch_PrimsFloorOp,
        Torch_PrimsFmaxOp,
        Torch_PrimsFminOp,
        Torch_PrimsFmodOp,
        Torch_PrimsFrexpOp,
        Torch_PrimsGcdOp,
        Torch_PrimsGeOp,
        Torch_PrimsGtOp,
        Torch_PrimsHypotOp,
        Torch_PrimsIgammaOp,
        Torch_PrimsIgammacOp,
        Torch_PrimsImagOp,
        Torch_PrimsIsfiniteOp,
        Torch_PrimsItemOp,
        Torch_PrimsLeOp,
        Torch_PrimsLgammaOp,
        Torch_PrimsLog10Op,
        Torch_PrimsLog1POp,
        Torch_PrimsLog2Op,
        Torch_PrimsLogOp,
        Torch_PrimsLtOp,
        Torch_PrimsMaximumOp,
        Torch_PrimsMaximumValueOp,
        Torch_PrimsMinimumOp,
        Torch_PrimsMinimumValueOp,
        Torch_PrimsMulOp,
        Torch_PrimsNdtriOp,
        Torch_PrimsNeOp,
        Torch_PrimsNegOp,
        Torch_PrimsNextafterOp,
        Torch_PrimsPowOp,
        Torch_PrimsProdOp,
        Torch_PrimsRealOp,
        Torch_PrimsReciprocalOp,
        Torch_PrimsRemainderOp,
        Torch_PrimsReshapeOp,
        Torch_PrimsResizeOp,
        Torch_PrimsRevOp,
        Torch_PrimsRoundOp,
        Torch_PrimsRsqrtOp,
        Torch_PrimsShiftLeftOp,
        Torch_PrimsShiftRightArithmeticOp,
        Torch_PrimsSignOp,
        Torch_PrimsSignbitOp,
        Torch_PrimsSinOp,
        Torch_PrimsSinhOp,
        Torch_PrimsSphericalBesselJ0Op,
        Torch_PrimsSplitDimOp,
        Torch_PrimsSqrtOp,
        Torch_PrimsSqueezeOp,
        Torch_PrimsSubOp,
        Torch_PrimsSumOp,
        Torch_PrimsSvdOp,
        Torch_PrimsTanOp,
        Torch_PrimsTanhOp,
        Torch_PrimsTransposeOp,
        Torch_PrimsTruncOp,
        Torch_PrimsVarOp,
        Torch_PrimsViewOfDtypeOp,
        Torch_PrimsViewOfOp,
        Torch_PrimsWhereOp,
        Torch_PrimsXorSumOp,
        Torch_PrimsZetaOp,
        Torch_Prims_MakeTokenOp,
        Torch_Prims_SinkTokensOp,
        Torch_Profiler_RecordFunctionExitOp,
        Torch_QuantizedDropoutOp,
        Torch_QuantizedEluOp,
        Torch_QuantizedHardswishOp,
        Torch_QuantizedInstanceNormOp,
        Torch_QuantizedLayerNormOp,
        Torch_QuantizedLeakyReluOp,
        Torch_ConstantNoneOp,
        Torch_PrimListConstructOp,
    ],
    [],
)
