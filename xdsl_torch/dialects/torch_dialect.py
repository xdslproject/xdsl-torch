###
# This dialect is automatically generated by xdsl_torch/tools/gen_torch_dialect.py
# Please don't edit it manually!
###

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *
from xdsl.traits import *

# ruff: noqa: F403, F405


@irdl_op_definition
class Torch_AtenAbsDefaultOp(IRDLOperation):
    name = "torch.aten.abs.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosDefaultOp(IRDLOperation):
    name = "torch.aten.acos.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshDefaultOp(IRDLOperation):
    name = "torch.aten.acosh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddScalarOp(IRDLOperation):
    name = "torch.aten.add.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddTensorOp(IRDLOperation):
    name = "torch.aten.add.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmmDefaultOp(IRDLOperation):
    name = "torch.aten.addmm.default"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasDefaultOp(IRDLOperation):
    name = "torch.aten.alias.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAmaxDefaultOp(IRDLOperation):
    name = "torch.aten.amax.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminDefaultOp(IRDLOperation):
    name = "torch.aten.amin.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDefaultOp(IRDLOperation):
    name = "torch.aten.any.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimOp(IRDLOperation):
    name = "torch.aten.any.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimsOp(IRDLOperation):
    name = "torch.aten.any.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgmaxDefaultOp(IRDLOperation):
    name = "torch.aten.argmax.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgminDefaultOp(IRDLOperation):
    name = "torch.aten.argmin.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedDefaultOp(IRDLOperation):
    name = "torch.aten.as_strided.default"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinDefaultOp(IRDLOperation):
    name = "torch.aten.asin.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhDefaultOp(IRDLOperation):
    name = "torch.aten.asinh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2DefaultOp(IRDLOperation):
    name = "torch.aten.atan2.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtanDefaultOp(IRDLOperation):
    name = "torch.aten.atan.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhDefaultOp(IRDLOperation):
    name = "torch.aten.atanh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward.default"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DDefaultOp(IRDLOperation):
    name = "torch.aten.avg_pool2d.default"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DDefaultOp(IRDLOperation):
    name = "torch.aten.avg_pool3d.default"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseNotDefaultOp(IRDLOperation):
    name = "torch.aten.bitwise_not.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBmmDefaultOp(IRDLOperation):
    name = "torch.aten.bmm.default"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCatDefaultOp(IRDLOperation):
    name = "torch.aten.cat.default"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilDefaultOp(IRDLOperation):
    name = "torch.aten.ceil.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampDefaultOp(IRDLOperation):
    name = "torch.aten.clamp.default"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampTensorOp(IRDLOperation):
    name = "torch.aten.clamp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenCloneDefaultOp(IRDLOperation):
    name = "torch.aten.clone.default"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenCol2ImDefaultOp(IRDLOperation):
    name = "torch.aten.col2im.default"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($output_size) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenConstantPadNdDefaultOp(IRDLOperation):
    name = "torch.aten.constant_pad_nd.default"
    self = operand_def(BaseAttr(TensorType))
    pad = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $pad `,` $value attr-dict `:` type($self) `,` type($pad) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvolutionBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.convolution_backward.default"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias_sizes = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $bias_sizes `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($bias_sizes) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenConvolutionDefaultOp(IRDLOperation):
    name = "torch.aten.convolution.default"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopyDefaultOp(IRDLOperation):
    name = "torch.aten.copy.default"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosDefaultOp(IRDLOperation):
    name = "torch.aten.cos.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshDefaultOp(IRDLOperation):
    name = "torch.aten.cosh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsumDefaultOp(IRDLOperation):
    name = "torch.aten.cumsum.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalDefaultOp(IRDLOperation):
    name = "torch.aten.diagonal.default"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivScalarOp(IRDLOperation):
    name = "torch.aten.div.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivTensorOp(IRDLOperation):
    name = "torch.aten.div.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEmbeddingDefaultOp(IRDLOperation):
    name = "torch.aten.embedding.default"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($weight) `,` type($indices) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingDenseBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.embedding_dense_backward.default"
    grad_output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad_output) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqScalarOp(IRDLOperation):
    name = "torch.aten.eq.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEqTensorOp(IRDLOperation):
    name = "torch.aten.eq.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenErfDefaultOp(IRDLOperation):
    name = "torch.aten.erf.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpDefaultOp(IRDLOperation):
    name = "torch.aten.exp.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandDefaultOp(IRDLOperation):
    name = "torch.aten.expand.default"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1DefaultOp(IRDLOperation):
    name = "torch.aten.expm1.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFillScalarOp(IRDLOperation):
    name = "torch.aten.fill.Scalar"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFlipDefaultOp(IRDLOperation):
    name = "torch.aten.flip.default"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDefaultOp(IRDLOperation):
    name = "torch.aten.floor.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodScalarOp(IRDLOperation):
    name = "torch.aten.fmod.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodTensorOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGatherDefaultOp(IRDLOperation):
    name = "torch.aten.gather.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeScalarOp(IRDLOperation):
    name = "torch.aten.ge.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeTensorOp(IRDLOperation):
    name = "torch.aten.ge.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGridSampler2DDefaultOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d.default"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtScalarOp(IRDLOperation):
    name = "torch.aten.gt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGtTensorOp(IRDLOperation):
    name = "torch.aten.gt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHardtanhDefaultOp(IRDLOperation):
    name = "torch.aten.hardtanh.default"
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min_val `,` $max_val attr-dict `:` type($self) `,` type($min_val) `,` type($max_val) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectDefaultOp(IRDLOperation):
    name = "torch.aten.index_select.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfDefaultOp(IRDLOperation):
    name = "torch.aten.isinf.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanDefaultOp(IRDLOperation):
    name = "torch.aten.isnan.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeScalarOp(IRDLOperation):
    name = "torch.aten.le.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeTensorOp(IRDLOperation):
    name = "torch.aten.le.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeakyReluDefaultOp(IRDLOperation):
    name = "torch.aten.leaky_relu.default"
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $negative_slope attr-dict `:` type($self) `,` type($negative_slope) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10DefaultOp(IRDLOperation):
    name = "torch.aten.log10.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PDefaultOp(IRDLOperation):
    name = "torch.aten.log1p.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2DefaultOp(IRDLOperation):
    name = "torch.aten.log2.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogDefaultOp(IRDLOperation):
    name = "torch.aten.log.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalAndDefaultOp(IRDLOperation):
    name = "torch.aten.logical_and.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalNotDefaultOp(IRDLOperation):
    name = "torch.aten.logical_not.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalOrDefaultOp(IRDLOperation):
    name = "torch.aten.logical_or.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXorDefaultOp(IRDLOperation):
    name = "torch.aten.logical_xor.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtScalarOp(IRDLOperation):
    name = "torch.aten.lt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtTensorOp(IRDLOperation):
    name = "torch.aten.lt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaskedScatterDefaultOp(IRDLOperation):
    name = "torch.aten.masked_scatter.default"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxDimOp(IRDLOperation):
    name = "torch.aten.max.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward.default"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesDefaultOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices.default"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesDefaultOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices.default"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaximumDefaultOp(IRDLOperation):
    name = "torch.aten.maximum.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMeanDefaultOp(IRDLOperation):
    name = "torch.aten.mean.default"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMeanDimOp(IRDLOperation):
    name = "torch.aten.mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinDimOp(IRDLOperation):
    name = "torch.aten.min.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinimumDefaultOp(IRDLOperation):
    name = "torch.aten.minimum.default"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMmDefaultOp(IRDLOperation):
    name = "torch.aten.mm.default"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMulScalarOp(IRDLOperation):
    name = "torch.aten.mul.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMulTensorOp(IRDLOperation):
    name = "torch.aten.mul.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNativeDropoutDefaultOp(IRDLOperation):
    name = "torch.aten.native_dropout.default"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenNativeGroupNormBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.native_group_norm_backward.default"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $rstd `,` $weight `,` $N `,` $C `,` $HxW `,` $group `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeGroupNormDefaultOp(IRDLOperation):
    name = "torch.aten.native_group_norm.default"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $N `,` $C `,` $HxW `,` $group `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormBackwardDefaultOp(IRDLOperation):
    name = "torch.aten.native_layer_norm_backward.default"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $normalized_shape `,` $mean `,` $rstd `,` $weight `,` $bias `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($normalized_shape) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($bias) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormDefaultOp(IRDLOperation):
    name = "torch.aten.native_layer_norm.default"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNeScalarOp(IRDLOperation):
    name = "torch.aten.ne.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNeTensorOp(IRDLOperation):
    name = "torch.aten.ne.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNegDefaultOp(IRDLOperation):
    name = "torch.aten.neg.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroDefaultOp(IRDLOperation):
    name = "torch.aten.nonzero.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPermuteDefaultOp(IRDLOperation):
    name = "torch.aten.permute.default"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPowScalarOp(IRDLOperation):
    name = "torch.aten.pow.Scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorScalarOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdDefaultOp(IRDLOperation):
    name = "torch.aten.prod.default"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenProdDimIntOp(IRDLOperation):
    name = "torch.aten.prod.dim_int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocalDefaultOp(IRDLOperation):
    name = "torch.aten.reciprocal.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DDefaultOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d.default"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DDefaultOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d.default"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DDefaultOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d.default"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReluDefaultOp(IRDLOperation):
    name = "torch.aten.relu.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderScalarOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainderTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRepeatDefaultOp(IRDLOperation):
    name = "torch.aten.repeat.default"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats attr-dict `:` type($self) `,` type($repeats) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DDefaultOp(IRDLOperation):
    name = "torch.aten.replication_pad2d.default"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DDefaultOp(IRDLOperation):
    name = "torch.aten.replication_pad3d.default"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundDefaultOp(IRDLOperation):
    name = "torch.aten.round.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrtDefaultOp(IRDLOperation):
    name = "torch.aten.rsqrt.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAddDefaultOp(IRDLOperation):
    name = "torch.aten.scatter_add.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOp(IRDLOperation):
    name = "torch.aten.scatter.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterValueOp(IRDLOperation):
    name = "torch.aten.scatter.value"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectIntOp(IRDLOperation):
    name = "torch.aten.select.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectScatterDefaultOp(IRDLOperation):
    name = "torch.aten.select_scatter.default"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $index attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidDefaultOp(IRDLOperation):
    name = "torch.aten.sigmoid.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignDefaultOp(IRDLOperation):
    name = "torch.aten.sign.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinDefaultOp(IRDLOperation):
    name = "torch.aten.sin.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhDefaultOp(IRDLOperation):
    name = "torch.aten.sinh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceScatterDefaultOp(IRDLOperation):
    name = "torch.aten.slice_scatter.default"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceTensorOp(IRDLOperation):
    name = "torch.aten.slice.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSortDefaultOp(IRDLOperation):
    name = "torch.aten.sort.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSplitWithSizesDefaultOp(IRDLOperation):
    name = "torch.aten.split_with_sizes.default"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtDefaultOp(IRDLOperation):
    name = "torch.aten.sqrt.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeDimOp(IRDLOperation):
    name = "torch.aten.squeeze.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeDimsOp(IRDLOperation):
    name = "torch.aten.squeeze.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSubScalarOp(IRDLOperation):
    name = "torch.aten.sub.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubTensorOp(IRDLOperation):
    name = "torch.aten.sub.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumDimIntlistOp(IRDLOperation):
    name = "torch.aten.sum.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymNumelDefaultOp(IRDLOperation):
    name = "torch.aten.sym_numel.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStorageOffsetDefaultOp(IRDLOperation):
    name = "torch.aten.sym_storage_offset.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanDefaultOp(IRDLOperation):
    name = "torch.aten.tan.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhDefaultOp(IRDLOperation):
    name = "torch.aten.tanh.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTopkDefaultOp(IRDLOperation):
    name = "torch.aten.topk.default"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTruncDefaultOp(IRDLOperation):
    name = "torch.aten.trunc.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsqueezeDefaultOp(IRDLOperation):
    name = "torch.aten.unsqueeze.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarCorrectionOp(IRDLOperation):
    name = "torch.aten.var.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarDimOp(IRDLOperation):
    name = "torch.aten.var.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewDefaultOp(IRDLOperation):
    name = "torch.aten.view.default"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenWhereSelfOp(IRDLOperation):
    name = "torch.aten.where.self"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DBackwardDefaultOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d_backward.default"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DDefaultOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d.default"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DDefaultOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d.default"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CdistForwardDefaultOp(IRDLOperation):
    name = "torch.aten._cdist_forward.default"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    compute_mode = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $compute_mode attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($compute_mode) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagDefaultOp(IRDLOperation):
    name = "torch.aten._embedding_bag.default"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_LocalScalarDenseDefaultOp(IRDLOperation):
    name = "torch.aten._local_scalar_dense.default"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxDefaultOp(IRDLOperation):
    name = "torch.aten._log_softmax.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitDefaultOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.default"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoStatsOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.no_stats"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoTrainingDefaultOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_no_training.default"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_PdistForwardDefaultOp(IRDLOperation):
    name = "torch.aten._pdist_forward.default"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SoftmaxDefaultOp(IRDLOperation):
    name = "torch.aten._softmax.default"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_ConstantNoneOp(IRDLOperation):
    name = "torch.constant.none"
    result = result_def(EqAttrConstraint(attr=NoneType(parameters=())))

    traits = traits_def(ConstantLike(), Pure())

    assembly_format = "attr-dict"


@irdl_op_definition
class Torch_PrimListConstructOp(IRDLOperation):
    name = "torch.prim.ListConstruct"
    elements = var_operand_def(AnyAttr())
    result = result_def(ContainerOf(elem_constr=AnyAttr()))

    traits = traits_def(Pure())

    assembly_format = "$elements attr-dict `:` functional-type($elements, $result)"


TorchDialect = Dialect(
    "torch",
    [
        Torch_AtenAbsDefaultOp,
        Torch_AtenAcosDefaultOp,
        Torch_AtenAcoshDefaultOp,
        Torch_AtenAddScalarOp,
        Torch_AtenAddTensorOp,
        Torch_AtenAddmmDefaultOp,
        Torch_AtenAliasDefaultOp,
        Torch_AtenAmaxDefaultOp,
        Torch_AtenAminDefaultOp,
        Torch_AtenAnyDefaultOp,
        Torch_AtenAnyDimOp,
        Torch_AtenAnyDimsOp,
        Torch_AtenArgmaxDefaultOp,
        Torch_AtenArgminDefaultOp,
        Torch_AtenAsStridedDefaultOp,
        Torch_AtenAsinDefaultOp,
        Torch_AtenAsinhDefaultOp,
        Torch_AtenAtan2DefaultOp,
        Torch_AtenAtanDefaultOp,
        Torch_AtenAtanhDefaultOp,
        Torch_AtenAvgPool2DBackwardDefaultOp,
        Torch_AtenAvgPool2DDefaultOp,
        Torch_AtenAvgPool3DDefaultOp,
        Torch_AtenBitwiseAndScalarOp,
        Torch_AtenBitwiseAndTensorOp,
        Torch_AtenBitwiseNotDefaultOp,
        Torch_AtenBitwiseOrScalarOp,
        Torch_AtenBitwiseOrTensorOp,
        Torch_AtenBitwiseXorScalarOp,
        Torch_AtenBitwiseXorTensorOp,
        Torch_AtenBmmDefaultOp,
        Torch_AtenCatDefaultOp,
        Torch_AtenCeilDefaultOp,
        Torch_AtenClampDefaultOp,
        Torch_AtenClampTensorOp,
        Torch_AtenCloneDefaultOp,
        Torch_AtenCol2ImDefaultOp,
        Torch_AtenConstantPadNdDefaultOp,
        Torch_AtenConvolutionBackwardDefaultOp,
        Torch_AtenConvolutionDefaultOp,
        Torch_AtenCopyDefaultOp,
        Torch_AtenCosDefaultOp,
        Torch_AtenCoshDefaultOp,
        Torch_AtenCumsumDefaultOp,
        Torch_AtenDiagonalDefaultOp,
        Torch_AtenDivScalarOp,
        Torch_AtenDivTensorOp,
        Torch_AtenEmbeddingDefaultOp,
        Torch_AtenEmbeddingDenseBackwardDefaultOp,
        Torch_AtenEqScalarOp,
        Torch_AtenEqTensorOp,
        Torch_AtenErfDefaultOp,
        Torch_AtenExpDefaultOp,
        Torch_AtenExpandDefaultOp,
        Torch_AtenExpm1DefaultOp,
        Torch_AtenFillScalarOp,
        Torch_AtenFlipDefaultOp,
        Torch_AtenFloorDefaultOp,
        Torch_AtenFmodScalarOp,
        Torch_AtenFmodTensorOp,
        Torch_AtenGatherDefaultOp,
        Torch_AtenGeScalarOp,
        Torch_AtenGeTensorOp,
        Torch_AtenGridSampler2DDefaultOp,
        Torch_AtenGtScalarOp,
        Torch_AtenGtTensorOp,
        Torch_AtenHardtanhDefaultOp,
        Torch_AtenIndexSelectDefaultOp,
        Torch_AtenIsinfDefaultOp,
        Torch_AtenIsnanDefaultOp,
        Torch_AtenLeScalarOp,
        Torch_AtenLeTensorOp,
        Torch_AtenLeakyReluDefaultOp,
        Torch_AtenLog10DefaultOp,
        Torch_AtenLog1PDefaultOp,
        Torch_AtenLog2DefaultOp,
        Torch_AtenLogDefaultOp,
        Torch_AtenLogicalAndDefaultOp,
        Torch_AtenLogicalNotDefaultOp,
        Torch_AtenLogicalOrDefaultOp,
        Torch_AtenLogicalXorDefaultOp,
        Torch_AtenLtScalarOp,
        Torch_AtenLtTensorOp,
        Torch_AtenMaskedScatterDefaultOp,
        Torch_AtenMaxDimOp,
        Torch_AtenMaxPool2DWithIndicesBackwardDefaultOp,
        Torch_AtenMaxPool2DWithIndicesDefaultOp,
        Torch_AtenMaxPool3DWithIndicesDefaultOp,
        Torch_AtenMaximumDefaultOp,
        Torch_AtenMeanDefaultOp,
        Torch_AtenMeanDimOp,
        Torch_AtenMinDimOp,
        Torch_AtenMinimumDefaultOp,
        Torch_AtenMmDefaultOp,
        Torch_AtenMulScalarOp,
        Torch_AtenMulTensorOp,
        Torch_AtenNativeDropoutDefaultOp,
        Torch_AtenNativeGroupNormBackwardDefaultOp,
        Torch_AtenNativeGroupNormDefaultOp,
        Torch_AtenNativeLayerNormBackwardDefaultOp,
        Torch_AtenNativeLayerNormDefaultOp,
        Torch_AtenNeScalarOp,
        Torch_AtenNeTensorOp,
        Torch_AtenNegDefaultOp,
        Torch_AtenNonzeroDefaultOp,
        Torch_AtenPermuteDefaultOp,
        Torch_AtenPowScalarOp,
        Torch_AtenPowTensorScalarOp,
        Torch_AtenPowTensorTensorOp,
        Torch_AtenProdDefaultOp,
        Torch_AtenProdDimIntOp,
        Torch_AtenReciprocalDefaultOp,
        Torch_AtenReflectionPad1DDefaultOp,
        Torch_AtenReflectionPad2DDefaultOp,
        Torch_AtenReflectionPad3DDefaultOp,
        Torch_AtenReluDefaultOp,
        Torch_AtenRemainderScalarOp,
        Torch_AtenRemainderTensorOp,
        Torch_AtenRepeatDefaultOp,
        Torch_AtenReplicationPad2DDefaultOp,
        Torch_AtenReplicationPad3DDefaultOp,
        Torch_AtenRoundDefaultOp,
        Torch_AtenRsqrtDefaultOp,
        Torch_AtenScatterAddDefaultOp,
        Torch_AtenScatterSrcOp,
        Torch_AtenScatterValueOp,
        Torch_AtenSelectIntOp,
        Torch_AtenSelectScatterDefaultOp,
        Torch_AtenSigmoidDefaultOp,
        Torch_AtenSignDefaultOp,
        Torch_AtenSinDefaultOp,
        Torch_AtenSinhDefaultOp,
        Torch_AtenSliceScatterDefaultOp,
        Torch_AtenSliceTensorOp,
        Torch_AtenSortDefaultOp,
        Torch_AtenSplitWithSizesDefaultOp,
        Torch_AtenSqrtDefaultOp,
        Torch_AtenSqueezeDimOp,
        Torch_AtenSqueezeDimsOp,
        Torch_AtenSubScalarOp,
        Torch_AtenSubTensorOp,
        Torch_AtenSumDimIntlistOp,
        Torch_AtenSymNumelDefaultOp,
        Torch_AtenSymStorageOffsetDefaultOp,
        Torch_AtenTanDefaultOp,
        Torch_AtenTanhDefaultOp,
        Torch_AtenTopkDefaultOp,
        Torch_AtenTruncDefaultOp,
        Torch_AtenUnsqueezeDefaultOp,
        Torch_AtenUpsampleBilinear2DVecOp,
        Torch_AtenUpsampleNearest2DVecOp,
        Torch_AtenVarCorrectionOp,
        Torch_AtenVarDimOp,
        Torch_AtenViewDefaultOp,
        Torch_AtenWhereSelfOp,
        Torch_Aten_AdaptiveAvgPool2DBackwardDefaultOp,
        Torch_Aten_AdaptiveAvgPool2DDefaultOp,
        Torch_Aten_AdaptiveAvgPool3DDefaultOp,
        Torch_Aten_CdistForwardDefaultOp,
        Torch_Aten_EmbeddingBagDefaultOp,
        Torch_Aten_LocalScalarDenseDefaultOp,
        Torch_Aten_LogSoftmaxDefaultOp,
        Torch_Aten_NativeBatchNormLegitDefaultOp,
        Torch_Aten_NativeBatchNormLegitNoStatsOp,
        Torch_Aten_NativeBatchNormLegitNoTrainingDefaultOp,
        Torch_Aten_PdistForwardDefaultOp,
        Torch_Aten_SoftmaxDefaultOp,
        Torch_ConstantNoneOp,
        Torch_PrimListConstructOp,
    ],
    [],
)
