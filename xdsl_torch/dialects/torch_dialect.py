###
# This dialect is automatically generated by xdsl_torch/tools/gen_torch_dialect.py
# Please don't edit it manually!
###

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *
from xdsl.traits import *

# ruff: noqa: F403, F405


@irdl_op_definition
class Torch_AtenAbsOp(IRDLOperation):
    name = "torch.aten.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbs_Op(IRDLOperation):
    name = "torch.aten.abs_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsoluteOp(IRDLOperation):
    name = "torch.aten.absolute"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsolute_Op(IRDLOperation):
    name = "torch.aten.absolute_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosFloatOp(IRDLOperation):
    name = "torch.aten.acos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosIntOp(IRDLOperation):
    name = "torch.aten.acos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosOp(IRDLOperation):
    name = "torch.aten.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcos_Op(IRDLOperation):
    name = "torch.aten.acos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshFloatOp(IRDLOperation):
    name = "torch.aten.acosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshIntOp(IRDLOperation):
    name = "torch.aten.acosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshOp(IRDLOperation):
    name = "torch.aten.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosh_Op(IRDLOperation):
    name = "torch.aten.acosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenAddFloatIntOp(IRDLOperation):
    name = "torch.aten.add.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddFloatOp(IRDLOperation):
    name = "torch.aten.add.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntFloatOp(IRDLOperation):
    name = "torch.aten.add.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntOp(IRDLOperation):
    name = "torch.aten.add.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAffineGridGeneratorOp(IRDLOperation):
    name = "torch.aten.affine_grid_generator"
    theta = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$theta `,` $size `,` $align_corners attr-dict `:` type($theta) `,` type($size) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasCopyOp(IRDLOperation):
    name = "torch.aten.alias_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasOp(IRDLOperation):
    name = "torch.aten.alias"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllBoolOp(IRDLOperation):
    name = "torch.aten.all.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimOp(IRDLOperation):
    name = "torch.aten.all.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimsOp(IRDLOperation):
    name = "torch.aten.all.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllFloatOp(IRDLOperation):
    name = "torch.aten.all.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllIntOp(IRDLOperation):
    name = "torch.aten.all.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllOp(IRDLOperation):
    name = "torch.aten.all"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAmaxOp(IRDLOperation):
    name = "torch.aten.amax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminOp(IRDLOperation):
    name = "torch.aten.amin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminmaxOp(IRDLOperation):
    name = "torch.aten.aminmax"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    min = result_def(BaseAttr(TensorType))
    max = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($min) `,` type($max)"


@irdl_op_definition
class Torch_AtenAngleFloatOp(IRDLOperation):
    name = "torch.aten.angle.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleIntOp(IRDLOperation):
    name = "torch.aten.angle.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleOp(IRDLOperation):
    name = "torch.aten.angle"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyBoolOp(IRDLOperation):
    name = "torch.aten.any.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimOp(IRDLOperation):
    name = "torch.aten.any.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimsOp(IRDLOperation):
    name = "torch.aten.any.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyFloatOp(IRDLOperation):
    name = "torch.aten.any.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyIntOp(IRDLOperation):
    name = "torch.aten.any.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyOp(IRDLOperation):
    name = "torch.aten.any"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosOp(IRDLOperation):
    name = "torch.aten.arccos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccos_Op(IRDLOperation):
    name = "torch.aten.arccos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccoshOp(IRDLOperation):
    name = "torch.aten.arccosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosh_Op(IRDLOperation):
    name = "torch.aten.arccosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinOp(IRDLOperation):
    name = "torch.aten.arcsin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsin_Op(IRDLOperation):
    name = "torch.aten.arcsin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinhOp(IRDLOperation):
    name = "torch.aten.arcsinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinh_Op(IRDLOperation):
    name = "torch.aten.arcsinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan2Op(IRDLOperation):
    name = "torch.aten.arctan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctan2_Op(IRDLOperation):
    name = "torch.aten.arctan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctanOp(IRDLOperation):
    name = "torch.aten.arctan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan_Op(IRDLOperation):
    name = "torch.aten.arctan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanhOp(IRDLOperation):
    name = "torch.aten.arctanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanh_Op(IRDLOperation):
    name = "torch.aten.arctanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgmaxOp(IRDLOperation):
    name = "torch.aten.argmax"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgminOp(IRDLOperation):
    name = "torch.aten.argmin"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedCopyOp(IRDLOperation):
    name = "torch.aten.as_strided_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedOp(IRDLOperation):
    name = "torch.aten.as_strided"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedScatterOp(IRDLOperation):
    name = "torch.aten.as_strided_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($src) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStrided_Op(IRDLOperation):
    name = "torch.aten.as_strided_"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinFloatOp(IRDLOperation):
    name = "torch.aten.asin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinIntOp(IRDLOperation):
    name = "torch.aten.asin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinOp(IRDLOperation):
    name = "torch.aten.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsin_Op(IRDLOperation):
    name = "torch.aten.asin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhFloatOp(IRDLOperation):
    name = "torch.aten.asinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhIntOp(IRDLOperation):
    name = "torch.aten.asinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhOp(IRDLOperation):
    name = "torch.aten.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinh_Op(IRDLOperation):
    name = "torch.aten.asinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatIntOp(IRDLOperation):
    name = "torch.aten.atan2.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatOp(IRDLOperation):
    name = "torch.aten.atan2.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntFloatOp(IRDLOperation):
    name = "torch.aten.atan2.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntOp(IRDLOperation):
    name = "torch.aten.atan2.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2Op(IRDLOperation):
    name = "torch.aten.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtan2_Op(IRDLOperation):
    name = "torch.aten.atan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtanFloatOp(IRDLOperation):
    name = "torch.aten.atan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanIntOp(IRDLOperation):
    name = "torch.aten.atan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanOp(IRDLOperation):
    name = "torch.aten.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan_Op(IRDLOperation):
    name = "torch.aten.atan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhFloatOp(IRDLOperation):
    name = "torch.aten.atanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhIntOp(IRDLOperation):
    name = "torch.aten.atanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhOp(IRDLOperation):
    name = "torch.aten.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanh_Op(IRDLOperation):
    name = "torch.aten.atanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DOp(IRDLOperation):
    name = "torch.aten.avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.avg_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.avg_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DOp(IRDLOperation):
    name = "torch.aten.avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.batch_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    save_mean = opt_operand_def(BaseAttr(TensorType))
    save_var = opt_operand_def(BaseAttr(TensorType))
    update = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    reserve = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out `,` $input `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $update `,` $eps `,` $output_mask `,` $reserve attr-dict `:` type($grad_out) `,` type($input) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($update) `,` type($eps) `,` type($output_mask) `,` type($reserve) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyBackwardOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBinaryCrossEntropyWithLogitsOp(IRDLOperation):
    name = "torch.aten.binary_cross_entropy_with_logits"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    pos_weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $target `,` $weight `,` $pos_weight `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($pos_weight) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAnd_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseNotOp(IRDLOperation):
    name = "torch.aten.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseNot_Op(IRDLOperation):
    name = "torch.aten.bitwise_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOr_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXor_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBlockDiagOp(IRDLOperation):
    name = "torch.aten.block_diag"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenBmmOp(IRDLOperation):
    name = "torch.aten.bmm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBroadcastTensorsOp(IRDLOperation):
    name = "torch.aten.broadcast_tensors"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenBucketizeTensorOp(IRDLOperation):
    name = "torch.aten.bucketize.Tensor"
    self = operand_def(BaseAttr(TensorType))
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `->` type($result)"


@irdl_op_definition
class Torch_AtenCatOp(IRDLOperation):
    name = "torch.aten.cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilFloatOp(IRDLOperation):
    name = "torch.aten.ceil.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilIntOp(IRDLOperation):
    name = "torch.aten.ceil.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilOp(IRDLOperation):
    name = "torch.aten.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeil_Op(IRDLOperation):
    name = "torch.aten.ceil_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenChannelShuffleOp(IRDLOperation):
    name = "torch.aten.channel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $groups attr-dict `:` type($self) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCholeskyInverseOp(IRDLOperation):
    name = "torch.aten.cholesky_inverse"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskyOp(IRDLOperation):
    name = "torch.aten.cholesky"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskySolveOp(IRDLOperation):
    name = "torch.aten.cholesky_solve"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $upper attr-dict `:` type($self) `,` type($input2) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampMaxTensorOp(IRDLOperation):
    name = "torch.aten.clamp_max.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMax_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_max_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMinTensorOp(IRDLOperation):
    name = "torch.aten.clamp_min.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMin_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_min_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampTensorOp(IRDLOperation):
    name = "torch.aten.clamp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = opt_operand_def(BaseAttr(TensorType))
    max = opt_operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClamp_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = opt_operand_def(BaseAttr(TensorType))
    max = opt_operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClipTensorOp(IRDLOperation):
    name = "torch.aten.clip.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = opt_operand_def(BaseAttr(TensorType))
    max = opt_operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClip_TensorOp(IRDLOperation):
    name = "torch.aten.clip_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = opt_operand_def(BaseAttr(TensorType))
    max = opt_operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenCloneOp(IRDLOperation):
    name = "torch.aten.clone"
    self = operand_def(BaseAttr(TensorType))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenCol2ImOp(IRDLOperation):
    name = "torch.aten.col2im"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($output_size) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenComplexOp(IRDLOperation):
    name = "torch.aten.complex"
    real = operand_def(BaseAttr(TensorType))
    imag = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$real `,` $imag attr-dict `:` type($real) `,` type($imag) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenConjOp(IRDLOperation):
    name = "torch.aten.conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysicalOp(IRDLOperation):
    name = "torch.aten.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysical_Op(IRDLOperation):
    name = "torch.aten.conj_physical_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConv2DOp(IRDLOperation):
    name = "torch.aten.conv2d"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvolutionBackwardOp(IRDLOperation):
    name = "torch.aten.convolution_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias_sizes = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $bias_sizes `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($bias_sizes) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenConvolutionOp(IRDLOperation):
    name = "torch.aten.convolution"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopyOp(IRDLOperation):
    name = "torch.aten.copy"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_FloatOp(IRDLOperation):
    name = "torch.aten.copy_.float"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_IntOp(IRDLOperation):
    name = "torch.aten.copy_.int"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_Op(IRDLOperation):
    name = "torch.aten.copy_"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_TensorOp(IRDLOperation):
    name = "torch.aten.copy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysignFloatIntOp(IRDLOperation):
    name = "torch.aten.copysign.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignFloatOp(IRDLOperation):
    name = "torch.aten.copysign.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntFloatOp(IRDLOperation):
    name = "torch.aten.copysign.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntOp(IRDLOperation):
    name = "torch.aten.copysign.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignTensorOp(IRDLOperation):
    name = "torch.aten.copysign.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysign_TensorOp(IRDLOperation):
    name = "torch.aten.copysign_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCosFloatOp(IRDLOperation):
    name = "torch.aten.cos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosIntOp(IRDLOperation):
    name = "torch.aten.cos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosOp(IRDLOperation):
    name = "torch.aten.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCos_Op(IRDLOperation):
    name = "torch.aten.cos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshFloatOp(IRDLOperation):
    name = "torch.aten.cosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshIntOp(IRDLOperation):
    name = "torch.aten.cosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshOp(IRDLOperation):
    name = "torch.aten.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosh_Op(IRDLOperation):
    name = "torch.aten.cosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCountNonzeroDimIntlistOp(IRDLOperation):
    name = "torch.aten.count_nonzero.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCountNonzeroOp(IRDLOperation):
    name = "torch.aten.count_nonzero"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCudnnBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.cudnn_batch_norm_backward"
    input = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    save_mean = opt_operand_def(BaseAttr(TensorType))
    save_var = opt_operand_def(BaseAttr(TensorType))
    epsilon = operand_def(BaseAttr(Float64Type))
    reserveSpace = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $grad_output `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $epsilon `,` $reserveSpace attr-dict `:` type($input) `,` type($grad_output) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($epsilon) `,` type($reserveSpace) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenCudnnBatchNormOp(IRDLOperation):
    name = "torch.aten.cudnn_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    exponential_average_factor = operand_def(BaseAttr(Float64Type))
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $exponential_average_factor `,` $epsilon attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($exponential_average_factor) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenCummaxOp(IRDLOperation):
    name = "torch.aten.cummax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenCumminOp(IRDLOperation):
    name = "torch.aten.cummin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenCumprodOp(IRDLOperation):
    name = "torch.aten.cumprod"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumprod_Op(IRDLOperation):
    name = "torch.aten.cumprod_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsumOp(IRDLOperation):
    name = "torch.aten.cumsum"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsum_Op(IRDLOperation):
    name = "torch.aten.cumsum_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenDeg2RadOp(IRDLOperation):
    name = "torch.aten.deg2rad"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDeg2Rad_Op(IRDLOperation):
    name = "torch.aten.deg2rad_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDenseDimOp(IRDLOperation):
    name = "torch.aten.dense_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetachOp(IRDLOperation):
    name = "torch.aten.detach"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagEmbedOp(IRDLOperation):
    name = "torch.aten.diag_embed"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagOp(IRDLOperation):
    name = "torch.aten.diag"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalBackwardOp(IRDLOperation):
    name = "torch.aten.diagonal_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalCopyOp(IRDLOperation):
    name = "torch.aten.diagonal_copy"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalOp(IRDLOperation):
    name = "torch.aten.diagonal"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalScatterOp(IRDLOperation):
    name = "torch.aten.diagonal_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($src) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigammaOp(IRDLOperation):
    name = "torch.aten.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigamma_Op(IRDLOperation):
    name = "torch.aten.digamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDimOp(IRDLOperation):
    name = "torch.aten.dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivFloatOp(IRDLOperation):
    name = "torch.aten.div.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivIntOp(IRDLOperation):
    name = "torch.aten.div.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivTensorOp(IRDLOperation):
    name = "torch.aten.div.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDiv_TensorOp(IRDLOperation):
    name = "torch.aten.div_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivideTensorOp(IRDLOperation):
    name = "torch.aten.divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivide_TensorOp(IRDLOperation):
    name = "torch.aten.divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDotOp(IRDLOperation):
    name = "torch.aten.dot"
    self = operand_def(BaseAttr(TensorType))
    tensor = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor attr-dict `:` type($self) `,` type($tensor) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingDenseBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_dense_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad_output) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingOp(IRDLOperation):
    name = "torch.aten.embedding"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($weight) `,` type($indices) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqBoolListOp(IRDLOperation):
    name = "torch.aten.eq.bool_list"
    a = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    b = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqBoolOp(IRDLOperation):
    name = "torch.aten.eq.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatIntOp(IRDLOperation):
    name = "torch.aten.eq.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatListOp(IRDLOperation):
    name = "torch.aten.eq.float_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatOp(IRDLOperation):
    name = "torch.aten.eq.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntFloatOp(IRDLOperation):
    name = "torch.aten.eq.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntListOp(IRDLOperation):
    name = "torch.aten.eq.int_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntOp(IRDLOperation):
    name = "torch.aten.eq.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqTensorListOp(IRDLOperation):
    name = "torch.aten.eq.Tensor_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqTensorOp(IRDLOperation):
    name = "torch.aten.eq.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEq_TensorOp(IRDLOperation):
    name = "torch.aten.eq_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenErfFloatOp(IRDLOperation):
    name = "torch.aten.erf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfIntOp(IRDLOperation):
    name = "torch.aten.erf.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfOp(IRDLOperation):
    name = "torch.aten.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErf_Op(IRDLOperation):
    name = "torch.aten.erf_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcFloatOp(IRDLOperation):
    name = "torch.aten.erfc.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcIntOp(IRDLOperation):
    name = "torch.aten.erfc.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcOp(IRDLOperation):
    name = "torch.aten.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfc_Op(IRDLOperation):
    name = "torch.aten.erfc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinvOp(IRDLOperation):
    name = "torch.aten.erfinv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinv_Op(IRDLOperation):
    name = "torch.aten.erfinv_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2Op(IRDLOperation):
    name = "torch.aten.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2_Op(IRDLOperation):
    name = "torch.aten.exp2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpFloatOp(IRDLOperation):
    name = "torch.aten.exp.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpIntOp(IRDLOperation):
    name = "torch.aten.exp.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpOp(IRDLOperation):
    name = "torch.aten.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp_Op(IRDLOperation):
    name = "torch.aten.exp_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandCopyOp(IRDLOperation):
    name = "torch.aten.expand_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandOp(IRDLOperation):
    name = "torch.aten.expand"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1FloatOp(IRDLOperation):
    name = "torch.aten.expm1.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1IntOp(IRDLOperation):
    name = "torch.aten.expm1.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1Op(IRDLOperation):
    name = "torch.aten.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1_Op(IRDLOperation):
    name = "torch.aten.expm1_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFftFftshiftOp(IRDLOperation):
    name = "torch.aten.fft_fftshift"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFftIfftshiftOp(IRDLOperation):
    name = "torch.aten.fft_ifftshift"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFillTensorOp(IRDLOperation):
    name = "torch.aten.fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFill_TensorOp(IRDLOperation):
    name = "torch.aten.fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFixOp(IRDLOperation):
    name = "torch.aten.fix"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFix_Op(IRDLOperation):
    name = "torch.aten.fix_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFlipOp(IRDLOperation):
    name = "torch.aten.flip"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloatPower_TensorOp(IRDLOperation):
    name = "torch.aten.float_power_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorDivideOp(IRDLOperation):
    name = "torch.aten.floor_divide"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDivide_TensorOp(IRDLOperation):
    name = "torch.aten.floor_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorFloatOp(IRDLOperation):
    name = "torch.aten.floor.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorIntOp(IRDLOperation):
    name = "torch.aten.floor.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorOp(IRDLOperation):
    name = "torch.aten.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloor_Op(IRDLOperation):
    name = "torch.aten.floor_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmaxOp(IRDLOperation):
    name = "torch.aten.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFminOp(IRDLOperation):
    name = "torch.aten.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodFloatIntOp(IRDLOperation):
    name = "torch.aten.fmod.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodFloatOp(IRDLOperation):
    name = "torch.aten.fmod.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntFloatOp(IRDLOperation):
    name = "torch.aten.fmod.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntOp(IRDLOperation):
    name = "torch.aten.fmod.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodTensorOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmod_TensorOp(IRDLOperation):
    name = "torch.aten.fmod_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFracOp(IRDLOperation):
    name = "torch.aten.frac"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFrac_Op(IRDLOperation):
    name = "torch.aten.frac_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFractionalMaxPool2DOp(IRDLOperation):
    name = "torch.aten.fractional_max_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    random_samples = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $output_size `,` $random_samples attr-dict `:` type($self) `,` type($kernel_size) `,` type($output_size) `,` type($random_samples) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFrexpOp(IRDLOperation):
    name = "torch.aten.frexp"
    a = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(Float64Type))
    result1 = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFrexpTensorOp(IRDLOperation):
    name = "torch.aten.frexp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_AtenGatherOp(IRDLOperation):
    name = "torch.aten.gather"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdIntOp(IRDLOperation):
    name = "torch.aten.gcd.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdOp(IRDLOperation):
    name = "torch.aten.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGcd_Op(IRDLOperation):
    name = "torch.aten.gcd_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeFloatIntOp(IRDLOperation):
    name = "torch.aten.ge.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeFloatOp(IRDLOperation):
    name = "torch.aten.ge.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntFloatOp(IRDLOperation):
    name = "torch.aten.ge.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntOp(IRDLOperation):
    name = "torch.aten.ge.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeTensorOp(IRDLOperation):
    name = "torch.aten.ge.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGe_TensorOp(IRDLOperation):
    name = "torch.aten.ge_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.glu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluBackwardOp(IRDLOperation):
    name = "torch.aten.glu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluOp(IRDLOperation):
    name = "torch.aten.glu"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqualTensorOp(IRDLOperation):
    name = "torch.aten.greater_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqual_TensorOp(IRDLOperation):
    name = "torch.aten.greater_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterTensorOp(IRDLOperation):
    name = "torch.aten.greater.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreater_TensorOp(IRDLOperation):
    name = "torch.aten.greater_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGridSampler2DBackwardOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `,` type($output_mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGridSampler2DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGridSampler3DBackwardOp(IRDLOperation):
    name = "torch.aten.grid_sampler_3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `,` type($output_mask) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGridSampler3DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_3d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGruDataOp(IRDLOperation):
    name = "torch.aten.gru.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGruInputOp(IRDLOperation):
    name = "torch.aten.gru.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenGtFloatIntOp(IRDLOperation):
    name = "torch.aten.gt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtFloatOp(IRDLOperation):
    name = "torch.aten.gt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntFloatOp(IRDLOperation):
    name = "torch.aten.gt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntOp(IRDLOperation):
    name = "torch.aten.gt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtTensorOp(IRDLOperation):
    name = "torch.aten.gt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGt_TensorOp(IRDLOperation):
    name = "torch.aten.gt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidOp(IRDLOperation):
    name = "torch.aten.hardsigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoid_Op(IRDLOperation):
    name = "torch.aten.hardsigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishBackwardOp(IRDLOperation):
    name = "torch.aten.hardswish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishOp(IRDLOperation):
    name = "torch.aten.hardswish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswish_Op(IRDLOperation):
    name = "torch.aten.hardswish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeavisideOp(IRDLOperation):
    name = "torch.aten.heaviside"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeaviside_Op(IRDLOperation):
    name = "torch.aten.heaviside_"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHingeEmbeddingLossOp(IRDLOperation):
    name = "torch.aten.hinge_embedding_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $margin `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossBackwardOp(IRDLOperation):
    name = "torch.aten.huber_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $delta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossOp(IRDLOperation):
    name = "torch.aten.huber_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $delta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHypotOp(IRDLOperation):
    name = "torch.aten.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHypot_Op(IRDLOperation):
    name = "torch.aten.hypot_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenI0Op(IRDLOperation):
    name = "torch.aten.i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenI0_Op(IRDLOperation):
    name = "torch.aten.i0_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIgammaOp(IRDLOperation):
    name = "torch.aten.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgamma_Op(IRDLOperation):
    name = "torch.aten.igamma_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammacOp(IRDLOperation):
    name = "torch.aten.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammac_Op(IRDLOperation):
    name = "torch.aten.igammac_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIm2ColOp(IRDLOperation):
    name = "torch.aten.im2col"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenImagOp(IRDLOperation):
    name = "torch.aten.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopyOp(IRDLOperation):
    name = "torch.aten.index_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopy_Op(IRDLOperation):
    name = "torch.aten.index_copy_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFill_IntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill_.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexListBoolOp(IRDLOperation):
    name = "torch.aten.index.list_bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    el = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListFloatOp(IRDLOperation):
    name = "torch.aten.index.list_float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    el = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListIntOp(IRDLOperation):
    name = "torch.aten.index.list_int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    el = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexListTensorOp(IRDLOperation):
    name = "torch.aten.index.list_Tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    el = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $el attr-dict `:` type($self) `,` type($el) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIndexPutHackedTwinOp(IRDLOperation):
    name = "torch.aten.index_put.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexPut_HackedTwinOp(IRDLOperation):
    name = "torch.aten.index_put_.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectOp(IRDLOperation):
    name = "torch.aten.index_select"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexTensorHackedTwinOp(IRDLOperation):
    name = "torch.aten.index.Tensor_hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices attr-dict `:` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsCoalescedOp(IRDLOperation):
    name = "torch.aten.is_coalesced"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsComplexOp(IRDLOperation):
    name = "torch.aten.is_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousMemoryFormatOp(IRDLOperation):
    name = "torch.aten.is_contiguous.memory_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousOp(IRDLOperation):
    name = "torch.aten.is_contiguous"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsNonOverlappingAndDenseOp(IRDLOperation):
    name = "torch.aten.is_non_overlapping_and_dense"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsSameSizeOp(IRDLOperation):
    name = "torch.aten.is_same_size"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIsStridesLikeFormatOp(IRDLOperation):
    name = "torch.aten.is_strides_like_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteFloatOp(IRDLOperation):
    name = "torch.aten.isfinite.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteOp(IRDLOperation):
    name = "torch.aten.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorTensorOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Tensor"
    elements = operand_def(BaseAttr(TensorType))
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_elements `,` $assume_unique `,` $invert attr-dict `:` type($elements) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfFloatOp(IRDLOperation):
    name = "torch.aten.isinf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfOp(IRDLOperation):
    name = "torch.aten.isinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanFloatOp(IRDLOperation):
    name = "torch.aten.isnan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanOp(IRDLOperation):
    name = "torch.aten.isnan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsneginfOp(IRDLOperation):
    name = "torch.aten.isneginf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsposinfOp(IRDLOperation):
    name = "torch.aten.isposinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIstftOp(IRDLOperation):
    name = "torch.aten.istft"
    self = operand_def(BaseAttr(TensorType))
    n_fft = operand_def(BaseAttr(IntegerType))
    hop_length = opt_operand_def(BaseAttr(IntegerType))
    win_length = opt_operand_def(BaseAttr(IntegerType))
    window = opt_operand_def(BaseAttr(TensorType))
    center = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    normalized = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    onesided = opt_operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    length = opt_operand_def(BaseAttr(IntegerType))
    return_complex = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $n_fft `,` $hop_length `,` $win_length `,` $window `,` $center `,` $normalized `,` $onesided `,` $length `,` $return_complex attr-dict `:` type($self) `,` type($n_fft) `,` type($hop_length) `,` type($win_length) `,` type($window) `,` type($center) `,` type($normalized) `,` type($onesided) `,` type($length) `,` type($return_complex) `->` type($result)"


@irdl_op_definition
class Torch_AtenKthvalueOp(IRDLOperation):
    name = "torch.aten.kthvalue"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenLcmOp(IRDLOperation):
    name = "torch.aten.lcm"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLcm_Op(IRDLOperation):
    name = "torch.aten.lcm_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeFloatIntOp(IRDLOperation):
    name = "torch.aten.le.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeFloatOp(IRDLOperation):
    name = "torch.aten.le.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntFloatOp(IRDLOperation):
    name = "torch.aten.le.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntOp(IRDLOperation):
    name = "torch.aten.le.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeTensorOp(IRDLOperation):
    name = "torch.aten.le.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLe_TensorOp(IRDLOperation):
    name = "torch.aten.le_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLerpTensorOp(IRDLOperation):
    name = "torch.aten.lerp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerp_TensorOp(IRDLOperation):
    name = "torch.aten.lerp_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessEqualTensorOp(IRDLOperation):
    name = "torch.aten.less_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessEqual_TensorOp(IRDLOperation):
    name = "torch.aten.less_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessTensorOp(IRDLOperation):
    name = "torch.aten.less.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLess_TensorOp(IRDLOperation):
    name = "torch.aten.less_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLgammaFloatOp(IRDLOperation):
    name = "torch.aten.lgamma.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaIntOp(IRDLOperation):
    name = "torch.aten.lgamma.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaOp(IRDLOperation):
    name = "torch.aten.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgamma_Op(IRDLOperation):
    name = "torch.aten.lgamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshCopyOp(IRDLOperation):
    name = "torch.aten.lift_fresh_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshOp(IRDLOperation):
    name = "torch.aten.lift_fresh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftOp(IRDLOperation):
    name = "torch.aten.lift"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgCholeskyExOp(IRDLOperation):
    name = "torch.aten.linalg_cholesky_ex"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    L = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upper `,` $check_errors attr-dict `:` type($self) `,` type($upper) `,` type($check_errors) `->` type($L) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgCrossOp(IRDLOperation):
    name = "torch.aten.linalg_cross"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dim attr-dict `:` type($self) `,` type($other) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgEigOp(IRDLOperation):
    name = "torch.aten.linalg_eig"
    self = operand_def(BaseAttr(TensorType))
    eigenvalues = result_def(BaseAttr(TensorType))
    eigenvectors = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($eigenvalues) `,` type($eigenvectors)"


@irdl_op_definition
class Torch_AtenLinalgEigvalsOp(IRDLOperation):
    name = "torch.aten.linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgHouseholderProductOp(IRDLOperation):
    name = "torch.aten.linalg_householder_product"
    input = operand_def(BaseAttr(TensorType))
    tau = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$input `,` $tau attr-dict `:` type($input) `,` type($tau) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgInvExOp(IRDLOperation):
    name = "torch.aten.linalg_inv_ex"
    A = operand_def(BaseAttr(TensorType))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    inverse = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $check_errors attr-dict `:` type($A) `,` type($check_errors) `->` type($inverse) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLdlFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_factor_ex"
    self = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LD = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $hermitian `,` $check_errors attr-dict `:` type($self) `,` type($hermitian) `,` type($check_errors) `->` type($LD) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLdlSolveOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_solve"
    LD = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LD `,` $pivots `,` $B `,` $hermitian attr-dict `:` type($LD) `,` type($pivots) `,` type($B) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgLuFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_lu_factor_ex"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot `,` $check_errors attr-dict `:` type($A) `,` type($pivot) `,` type($check_errors) `->` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLuOp(IRDLOperation):
    name = "torch.aten.linalg_lu"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot attr-dict `:` type($A) `,` type($pivot) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenLinalgLuSolveOp(IRDLOperation):
    name = "torch.aten.linalg_lu_solve"
    LU = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    adjoint = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LU `,` $pivots `,` $B `,` $left `,` $adjoint attr-dict `:` type($LU) `,` type($pivots) `,` type($B) `,` type($left) `,` type($adjoint) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixExpOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgSolveTriangularOp(IRDLOperation):
    name = "torch.aten.linalg_solve_triangular"
    self = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $B `,` $upper `,` $left `,` $unitriangular attr-dict `:` type($self) `,` type($B) `,` type($upper) `,` type($left) `,` type($unitriangular) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinearBackwardOp(IRDLOperation):
    name = "torch.aten.linear_backward"
    self = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $grad_output `,` $weight `,` $output_mask attr-dict `:` type($self) `,` type($grad_output) `,` type($weight) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLinearOp(IRDLOperation):
    name = "torch.aten.linear"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias attr-dict `:` type($input) `,` type($weight) `,` type($bias) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10FloatOp(IRDLOperation):
    name = "torch.aten.log10.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10IntOp(IRDLOperation):
    name = "torch.aten.log10.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10Op(IRDLOperation):
    name = "torch.aten.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10_Op(IRDLOperation):
    name = "torch.aten.log10_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PFloatOp(IRDLOperation):
    name = "torch.aten.log1p.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PIntOp(IRDLOperation):
    name = "torch.aten.log1p.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1POp(IRDLOperation):
    name = "torch.aten.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1P_Op(IRDLOperation):
    name = "torch.aten.log1p_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2Op(IRDLOperation):
    name = "torch.aten.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2_Op(IRDLOperation):
    name = "torch.aten.log2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatFloatOp(IRDLOperation):
    name = "torch.aten.log.float_float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatIntOp(IRDLOperation):
    name = "torch.aten.log.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatOp(IRDLOperation):
    name = "torch.aten.log.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntFloatOp(IRDLOperation):
    name = "torch.aten.log.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntIntOp(IRDLOperation):
    name = "torch.aten.log.int_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntOp(IRDLOperation):
    name = "torch.aten.log.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogOp(IRDLOperation):
    name = "torch.aten.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidForwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_forward"
    self = operand_def(BaseAttr(TensorType))
    output = result_def(BaseAttr(TensorType))
    buffer = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($output) `,` type($buffer)"
    )


@irdl_op_definition
class Torch_AtenLog_Op(IRDLOperation):
    name = "torch.aten.log_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogaddexp2Op(IRDLOperation):
    name = "torch.aten.logaddexp2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogaddexpOp(IRDLOperation):
    name = "torch.aten.logaddexp"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogcumsumexpOp(IRDLOperation):
    name = "torch.aten.logcumsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalAndOp(IRDLOperation):
    name = "torch.aten.logical_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalAnd_Op(IRDLOperation):
    name = "torch.aten.logical_and_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalNotOp(IRDLOperation):
    name = "torch.aten.logical_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalNot_Op(IRDLOperation):
    name = "torch.aten.logical_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalOrOp(IRDLOperation):
    name = "torch.aten.logical_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalOr_Op(IRDLOperation):
    name = "torch.aten.logical_or_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXorOp(IRDLOperation):
    name = "torch.aten.logical_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXor_Op(IRDLOperation):
    name = "torch.aten.logical_xor_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogitBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.logit_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    eps = opt_operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $eps `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($eps) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogitBackwardOp(IRDLOperation):
    name = "torch.aten.logit_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    eps = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $eps attr-dict `:` type($grad_output) `,` type($self) `,` type($eps) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogitOp(IRDLOperation):
    name = "torch.aten.logit"
    self = operand_def(BaseAttr(TensorType))
    eps = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $eps attr-dict `:` type($self) `,` type($eps) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogit_Op(IRDLOperation):
    name = "torch.aten.logit_"
    self = operand_def(BaseAttr(TensorType))
    eps = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $eps attr-dict `:` type($self) `,` type($eps) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogsumexpOp(IRDLOperation):
    name = "torch.aten.logsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLstmDataOp(IRDLOperation):
    name = "torch.aten.lstm.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLstmInputOp(IRDLOperation):
    name = "torch.aten.lstm.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenLtFloatIntOp(IRDLOperation):
    name = "torch.aten.lt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtFloatOp(IRDLOperation):
    name = "torch.aten.lt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntFloatOp(IRDLOperation):
    name = "torch.aten.lt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntOp(IRDLOperation):
    name = "torch.aten.lt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtTensorOp(IRDLOperation):
    name = "torch.aten.lt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLt_TensorOp(IRDLOperation):
    name = "torch.aten.lt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLuUnpackOp(IRDLOperation):
    name = "torch.aten.lu_unpack"
    LU_data = operand_def(BaseAttr(TensorType))
    LU_pivots = operand_def(BaseAttr(TensorType))
    unpack_data = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    unpack_pivots = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$LU_data `,` $LU_pivots `,` $unpack_data `,` $unpack_pivots attr-dict `:` type($LU_data) `,` type($LU_pivots) `,` type($unpack_data) `,` type($unpack_pivots) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenMarginRankingLossOp(IRDLOperation):
    name = "torch.aten.margin_ranking_loss"
    input1 = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input1 `,` $input2 `,` $target `,` $margin `,` $reduction attr-dict `:` type($input1) `,` type($input2) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillTensorOp(IRDLOperation):
    name = "torch.aten.masked_fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFill_TensorOp(IRDLOperation):
    name = "torch.aten.masked_fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatterBackwardOp(IRDLOperation):
    name = "torch.aten.masked_scatter_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $mask `,` $sizes attr-dict `:` type($grad_output) `,` type($mask) `,` type($sizes) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatterOp(IRDLOperation):
    name = "torch.aten.masked_scatter"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatter_Op(IRDLOperation):
    name = "torch.aten.masked_scatter_"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedSelectOp(IRDLOperation):
    name = "torch.aten.masked_select"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mask attr-dict `:` type($self) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMatmulOp(IRDLOperation):
    name = "torch.aten.matmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxDimMaxOp(IRDLOperation):
    name = "torch.aten.max.dim_max"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    max = operand_def(BaseAttr(TensorType))
    max_values = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $max `,` $max_values attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($max) `,` type($max_values) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxDimOp(IRDLOperation):
    name = "torch.aten.max.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxOp(IRDLOperation):
    name = "torch.aten.max"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxOtherOp(IRDLOperation):
    name = "torch.aten.max.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxUnpool2DOp(IRDLOperation):
    name = "torch.aten.max_unpool2d"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $output_size attr-dict `:` type($self) `,` type($indices) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxUnpool3DOp(IRDLOperation):
    name = "torch.aten.max_unpool3d"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $output_size `,` $stride `,` $padding attr-dict `:` type($self) `,` type($indices) `,` type($output_size) `,` type($stride) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaximumOp(IRDLOperation):
    name = "torch.aten.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMeanDimOp(IRDLOperation):
    name = "torch.aten.mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeanOp(IRDLOperation):
    name = "torch.aten.mean"
    self = operand_def(BaseAttr(TensorType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMedianDimOp(IRDLOperation):
    name = "torch.aten.median.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMedianOp(IRDLOperation):
    name = "torch.aten.median"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeshgridOp(IRDLOperation):
    name = "torch.aten.meshgrid"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tensors attr-dict `:` type($tensors) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinDimMinOp(IRDLOperation):
    name = "torch.aten.min.dim_min"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    min = operand_def(BaseAttr(TensorType))
    min_indices = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $min `,` $min_indices attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($min) `,` type($min_indices) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinDimOp(IRDLOperation):
    name = "torch.aten.min.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinOp(IRDLOperation):
    name = "torch.aten.min"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinOtherOp(IRDLOperation):
    name = "torch.aten.min.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMinimumOp(IRDLOperation):
    name = "torch.aten.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMiopenBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.miopen_batch_norm_backward"
    input = operand_def(BaseAttr(TensorType))
    grad_output = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    save_mean = opt_operand_def(BaseAttr(TensorType))
    save_var = opt_operand_def(BaseAttr(TensorType))
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $grad_output `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_var `,` $epsilon attr-dict `:` type($input) `,` type($grad_output) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_var) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMiopenBatchNormOp(IRDLOperation):
    name = "torch.aten.miopen_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    exponential_average_factor = operand_def(BaseAttr(Float64Type))
    epsilon = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $exponential_average_factor `,` $epsilon attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($exponential_average_factor) `,` type($epsilon) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenMishBackwardOp(IRDLOperation):
    name = "torch.aten.mish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMishOp(IRDLOperation):
    name = "torch.aten.mish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMish_Op(IRDLOperation):
    name = "torch.aten.mish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMkldnnRnnLayerBackwardOp(IRDLOperation):
    name = "torch.aten.mkldnn_rnn_layer_backward"
    input = operand_def(BaseAttr(TensorType))
    weight1 = operand_def(BaseAttr(TensorType))
    weight2 = operand_def(BaseAttr(TensorType))
    weight3 = operand_def(BaseAttr(TensorType))
    weight4 = operand_def(BaseAttr(TensorType))
    hx_ = operand_def(BaseAttr(TensorType))
    cx_tmp = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    hy_ = operand_def(BaseAttr(TensorType))
    cy_ = operand_def(BaseAttr(TensorType))
    grad_output = opt_operand_def(BaseAttr(TensorType))
    grad_hy = opt_operand_def(BaseAttr(TensorType))
    grad_cy = opt_operand_def(BaseAttr(TensorType))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    workspace = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))
    result5 = result_def(BaseAttr(TensorType))
    result6 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight1 `,` $weight2 `,` $weight3 `,` $weight4 `,` $hx_ `,` $cx_tmp `,` $output `,` $hy_ `,` $cy_ `,` $grad_output `,` $grad_hy `,` $grad_cy `,` $reverse `,` $mode `,` $hidden_size `,` $num_layers `,` $has_biases `,` $train `,` $bidirectional `,` $batch_sizes `,` $batch_first `,` $workspace attr-dict `:` type($input) `,` type($weight1) `,` type($weight2) `,` type($weight3) `,` type($weight4) `,` type($hx_) `,` type($cx_tmp) `,` type($output) `,` type($hy_) `,` type($cy_) `,` type($grad_output) `,` type($grad_hy) `,` type($grad_cy) `,` type($reverse) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($has_biases) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($batch_first) `,` type($workspace) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4) `,` type($result5) `,` type($result6)"


@irdl_op_definition
class Torch_AtenMkldnnRnnLayerOp(IRDLOperation):
    name = "torch.aten.mkldnn_rnn_layer"
    input = operand_def(BaseAttr(TensorType))
    weight0 = operand_def(BaseAttr(TensorType))
    weight1 = operand_def(BaseAttr(TensorType))
    weight2 = operand_def(BaseAttr(TensorType))
    weight3 = operand_def(BaseAttr(TensorType))
    hx_ = operand_def(BaseAttr(TensorType))
    cx_ = operand_def(BaseAttr(TensorType))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight0 `,` $weight1 `,` $weight2 `,` $weight3 `,` $hx_ `,` $cx_ `,` $reverse `,` $batch_sizes `,` $mode `,` $hidden_size `,` $num_layers `,` $has_biases `,` $bidirectional `,` $batch_first `,` $train attr-dict `:` type($input) `,` type($weight0) `,` type($weight1) `,` type($weight2) `,` type($weight3) `,` type($hx_) `,` type($cx_) `,` type($reverse) `,` type($batch_sizes) `,` type($mode) `,` type($hidden_size) `,` type($num_layers) `,` type($has_biases) `,` type($bidirectional) `,` type($batch_first) `,` type($train) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_AtenMmOp(IRDLOperation):
    name = "torch.aten.mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenModeOp(IRDLOperation):
    name = "torch.aten.mode"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMseLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossBackwardOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossOp(IRDLOperation):
    name = "torch.aten.mse_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatIntOp(IRDLOperation):
    name = "torch.aten.mul.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatOp(IRDLOperation):
    name = "torch.aten.mul.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntFloatOp(IRDLOperation):
    name = "torch.aten.mul.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntOp(IRDLOperation):
    name = "torch.aten.mul.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulTensorOp(IRDLOperation):
    name = "torch.aten.mul.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMul_TensorOp(IRDLOperation):
    name = "torch.aten.mul_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultilabelMarginLossForwardOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    is_target = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($output) `,` type($is_target)"


@irdl_op_definition
class Torch_AtenMultiplyTensorOp(IRDLOperation):
    name = "torch.aten.multiply.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiply_TensorOp(IRDLOperation):
    name = "torch.aten.multiply_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvOp(IRDLOperation):
    name = "torch.aten.mv"
    self = operand_def(BaseAttr(TensorType))
    vec = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $vec attr-dict `:` type($self) `,` type($vec) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgammaOp(IRDLOperation):
    name = "torch.aten.mvlgamma"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgamma_Op(IRDLOperation):
    name = "torch.aten.mvlgamma_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNanToNumOp(IRDLOperation):
    name = "torch.aten.nan_to_num"
    self = operand_def(BaseAttr(TensorType))
    nan = opt_operand_def(BaseAttr(Float64Type))
    posinf = opt_operand_def(BaseAttr(Float64Type))
    neginf = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $nan `,` $posinf `,` $neginf attr-dict `:` type($self) `,` type($nan) `,` type($posinf) `,` type($neginf) `->` type($result)"


@irdl_op_definition
class Torch_AtenNanToNum_Op(IRDLOperation):
    name = "torch.aten.nan_to_num_"
    self = operand_def(BaseAttr(TensorType))
    nan = opt_operand_def(BaseAttr(Float64Type))
    posinf = opt_operand_def(BaseAttr(Float64Type))
    neginf = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $nan `,` $posinf `,` $neginf attr-dict `:` type($self) `,` type($nan) `,` type($posinf) `,` type($neginf) `->` type($result)"


@irdl_op_definition
class Torch_AtenNanmedianDimOp(IRDLOperation):
    name = "torch.aten.nanmedian.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenNanmedianOp(IRDLOperation):
    name = "torch.aten.nanmedian"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNansumOp(IRDLOperation):
    name = "torch.aten.nansum"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowCopyOp(IRDLOperation):
    name = "torch.aten.narrow_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowOp(IRDLOperation):
    name = "torch.aten.narrow"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowTensorOp(IRDLOperation):
    name = "torch.aten.narrow.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(TensorType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNativeBatchNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_batch_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    save_mean = opt_operand_def(BaseAttr(TensorType))
    save_invstd = opt_operand_def(BaseAttr(TensorType))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    eps = operand_def(BaseAttr(Float64Type))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out `,` $input `,` $weight `,` $running_mean `,` $running_var `,` $save_mean `,` $save_invstd `,` $train `,` $eps `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($weight) `,` type($running_mean) `,` type($running_var) `,` type($save_mean) `,` type($save_invstd) `,` type($train) `,` type($eps) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeBatchNormOp(IRDLOperation):
    name = "torch.aten.native_batch_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeGroupNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_group_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $rstd `,` $weight `,` $N `,` $C `,` $HxW `,` $group `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeGroupNormOp(IRDLOperation):
    name = "torch.aten.native_group_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $N `,` $C `,` $HxW `,` $group `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_layer_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out `,` $input `,` $normalized_shape `,` $mean `,` $rstd `,` $weight `,` $bias `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($normalized_shape) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($bias) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormOp(IRDLOperation):
    name = "torch.aten.native_layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNeBoolListOp(IRDLOperation):
    name = "torch.aten.ne.bool_list"
    a = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    b = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeBoolOp(IRDLOperation):
    name = "torch.aten.ne.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatIntOp(IRDLOperation):
    name = "torch.aten.ne.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatListOp(IRDLOperation):
    name = "torch.aten.ne.float_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatOp(IRDLOperation):
    name = "torch.aten.ne.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntFloatOp(IRDLOperation):
    name = "torch.aten.ne.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntListOp(IRDLOperation):
    name = "torch.aten.ne.int_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntOp(IRDLOperation):
    name = "torch.aten.ne.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeTensorListOp(IRDLOperation):
    name = "torch.aten.ne.Tensor_list"
    a = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    b = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeTensorOp(IRDLOperation):
    name = "torch.aten.ne.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNe_TensorOp(IRDLOperation):
    name = "torch.aten.ne_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNegFloatOp(IRDLOperation):
    name = "torch.aten.neg.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegIntOp(IRDLOperation):
    name = "torch.aten.neg.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegOp(IRDLOperation):
    name = "torch.aten.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeg_Op(IRDLOperation):
    name = "torch.aten.neg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegativeOp(IRDLOperation):
    name = "torch.aten.negative"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegative_Op(IRDLOperation):
    name = "torch.aten.negative_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNextafterOp(IRDLOperation):
    name = "torch.aten.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNextafter_Op(IRDLOperation):
    name = "torch.aten.nextafter_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNllLoss2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLoss2DBackwardOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLoss2DForwardOp(IRDLOperation):
    name = "torch.aten.nll_loss2d_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    total_weight = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($output) `,` type($total_weight)"


@irdl_op_definition
class Torch_AtenNllLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.nll_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossBackwardOp(IRDLOperation):
    name = "torch.aten.nll_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    total_weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $weight `,` $reduction `,` $ignore_index `,` $total_weight attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `,` type($total_weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenNllLossForwardOp(IRDLOperation):
    name = "torch.aten.nll_loss_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    total_weight = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($output) `,` type($total_weight)"


@irdl_op_definition
class Torch_AtenNllLossOp(IRDLOperation):
    name = "torch.aten.nll_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    ignore_index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $weight `,` $reduction `,` $ignore_index attr-dict `:` type($self) `,` type($target) `,` type($weight) `,` type($reduction) `,` type($ignore_index) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroNumpyOp(IRDLOperation):
    name = "torch.aten.nonzero_numpy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroOp(IRDLOperation):
    name = "torch.aten.nonzero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroStaticOp(IRDLOperation):
    name = "torch.aten.nonzero_static"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(BaseAttr(IntegerType))
    fill_value = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $fill_value attr-dict `:` type($self) `,` type($size) `,` type($fill_value) `->` type($result)"


@irdl_op_definition
class Torch_AtenNotEqualTensorOp(IRDLOperation):
    name = "torch.aten.not_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNotEqual_TensorOp(IRDLOperation):
    name = "torch.aten.not_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNumelOp(IRDLOperation):
    name = "torch.aten.numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenOrmqrOp(IRDLOperation):
    name = "torch.aten.ormqr"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    input3 = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $input3 `,` $left `,` $transpose attr-dict `:` type($self) `,` type($input2) `,` type($input3) `,` type($left) `,` type($transpose) `->` type($result)"


@irdl_op_definition
class Torch_AtenPairwiseDistanceOp(IRDLOperation):
    name = "torch.aten.pairwise_distance"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $eps `,` $keepdim attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($eps) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenPdistOp(IRDLOperation):
    name = "torch.aten.pdist"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPermuteCopyOp(IRDLOperation):
    name = "torch.aten.permute_copy"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPermuteOp(IRDLOperation):
    name = "torch.aten.permute"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPixelShuffleOp(IRDLOperation):
    name = "torch.aten.pixel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    upscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upscale_factor attr-dict `:` type($self) `,` type($upscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPixelUnshuffleOp(IRDLOperation):
    name = "torch.aten.pixel_unshuffle"
    self = operand_def(BaseAttr(TensorType))
    downscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $downscale_factor attr-dict `:` type($self) `,` type($downscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPolarOp(IRDLOperation):
    name = "torch.aten.polar"
    abs = operand_def(BaseAttr(TensorType))
    angle = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$abs `,` $angle attr-dict `:` type($abs) `,` type($angle) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPolygammaOp(IRDLOperation):
    name = "torch.aten.polygamma"
    n = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$n `,` $self attr-dict `:` type($n) `,` type($self) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPositiveOp(IRDLOperation):
    name = "torch.aten.positive"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatIntOp(IRDLOperation):
    name = "torch.aten.pow.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatOp(IRDLOperation):
    name = "torch.aten.pow.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntFloatOp(IRDLOperation):
    name = "torch.aten.pow.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntOp(IRDLOperation):
    name = "torch.aten.pow.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntToIntOp(IRDLOperation):
    name = "torch.aten.pow.int_to_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPow_TensorOp(IRDLOperation):
    name = "torch.aten.pow_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPreluOp(IRDLOperation):
    name = "torch.aten.prelu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdDimIntOp(IRDLOperation):
    name = "torch.aten.prod.dim_int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdOp(IRDLOperation):
    name = "torch.aten.prod"
    self = operand_def(BaseAttr(TensorType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenQuantizedGruDataLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_gru.data_legacy"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenQuantizedGruInputLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_gru.input_legacy"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenQuantizedLstmDataLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_lstm.data_legacy"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dtype = opt_operand_def(BaseAttr(IntegerType))
    use_dynamic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $dtype `,` $use_dynamic attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($dtype) `,` type($use_dynamic) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenQuantizedLstmInputLegacyOp(IRDLOperation):
    name = "torch.aten.quantized_lstm.input_legacy"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dtype = opt_operand_def(BaseAttr(IntegerType))
    use_dynamic = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first `,` $dtype `,` $use_dynamic attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `,` type($dtype) `,` type($use_dynamic) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenRad2DegOp(IRDLOperation):
    name = "torch.aten.rad2deg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRad2Deg_Op(IRDLOperation):
    name = "torch.aten.rad2deg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRealOp(IRDLOperation):
    name = "torch.aten.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocalOp(IRDLOperation):
    name = "torch.aten.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocal_Op(IRDLOperation):
    name = "torch.aten.reciprocal_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DBackwardOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu6Op(IRDLOperation):
    name = "torch.aten.relu6"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReluOp(IRDLOperation):
    name = "torch.aten.relu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu_Op(IRDLOperation):
    name = "torch.aten.relu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatIntOp(IRDLOperation):
    name = "torch.aten.remainder.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatOp(IRDLOperation):
    name = "torch.aten.remainder.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntFloatOp(IRDLOperation):
    name = "torch.aten.remainder.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntOp(IRDLOperation):
    name = "torch.aten.remainder.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainder_TensorOp(IRDLOperation):
    name = "torch.aten.remainder_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRepeatInterleaveSelfIntOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.self_int"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(BaseAttr(IntegerType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    output_size = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $repeats `,` $dim `,` $output_size attr-dict `:` type($self) `,` type($repeats) `,` type($dim) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveSelfTensorOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.self_Tensor"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(BaseAttr(IntegerType))
    output_size = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $repeats `,` $dim `,` $output_size attr-dict `:` type($self) `,` type($repeats) `,` type($dim) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatInterleaveTensorOp(IRDLOperation):
    name = "torch.aten.repeat_interleave.Tensor"
    repeats = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$repeats `,` $output_size attr-dict `:` type($repeats) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_AtenRepeatOp(IRDLOperation):
    name = "torch.aten.repeat"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats attr-dict `:` type($self) `,` type($repeats) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad1d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad1d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad1DOp(IRDLOperation):
    name = "torch.aten.replication_pad1d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DOp(IRDLOperation):
    name = "torch.aten.replication_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.replication_pad3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DBackwardOp(IRDLOperation):
    name = "torch.aten.replication_pad3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $padding attr-dict `:` type($grad_output) `,` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DOp(IRDLOperation):
    name = "torch.aten.replication_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReshapeOp(IRDLOperation):
    name = "torch.aten.reshape"
    self = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $shape attr-dict `:` type($self) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenResizeAsOp(IRDLOperation):
    name = "torch.aten.resize_as"
    self = operand_def(BaseAttr(TensorType))
    the_template = operand_def(BaseAttr(TensorType))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $the_template `,` $memory_format attr-dict `:` type($self) `,` type($the_template) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResizeAs_Op(IRDLOperation):
    name = "torch.aten.resize_as_"
    self = operand_def(BaseAttr(TensorType))
    the_template = operand_def(BaseAttr(TensorType))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $the_template `,` $memory_format attr-dict `:` type($self) `,` type($the_template) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenResizeOp(IRDLOperation):
    name = "torch.aten.resize"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $memory_format attr-dict `:` type($self) `,` type($size) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenRnnReluDataOp(IRDLOperation):
    name = "torch.aten.rnn_relu.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnReluInputOp(IRDLOperation):
    name = "torch.aten.rnn_relu.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnTanhDataOp(IRDLOperation):
    name = "torch.aten.rnn_tanh.data"
    data = operand_def(BaseAttr(TensorType))
    batch_sizes = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$data `,` $batch_sizes `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional attr-dict `:` type($data) `,` type($batch_sizes) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRnnTanhInputOp(IRDLOperation):
    name = "torch.aten.rnn_tanh.input"
    input = operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    params = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    has_biases = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    num_layers = operand_def(BaseAttr(IntegerType))
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $hx `,` $params `,` $has_biases `,` $num_layers `,` $dropout `,` $train `,` $bidirectional `,` $batch_first attr-dict `:` type($input) `,` type($hx) `,` type($params) `,` type($has_biases) `,` type($num_layers) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenRollOp(IRDLOperation):
    name = "torch.aten.roll"
    self = operand_def(BaseAttr(TensorType))
    shifts = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $shifts `,` $dims attr-dict `:` type($self) `,` type($shifts) `,` type($dims) `->` type($result)"


@irdl_op_definition
class Torch_AtenRot90Op(IRDLOperation):
    name = "torch.aten.rot90"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dims attr-dict `:` type($self) `,` type($k) `,` type($dims) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundDecimalsOp(IRDLOperation):
    name = "torch.aten.round.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundFloatOp(IRDLOperation):
    name = "torch.aten.round.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundIntOp(IRDLOperation):
    name = "torch.aten.round.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundOp(IRDLOperation):
    name = "torch.aten.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_DecimalsOp(IRDLOperation):
    name = "torch.aten.round_.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_Op(IRDLOperation):
    name = "torch.aten.round_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrtOp(IRDLOperation):
    name = "torch.aten.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrt_Op(IRDLOperation):
    name = "torch.aten.rsqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAddOp(IRDLOperation):
    name = "torch.aten.scatter_add"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAdd_Op(IRDLOperation):
    name = "torch.aten.scatter_add_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOp(IRDLOperation):
    name = "torch.aten.scatter.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatter_SrcOp(IRDLOperation):
    name = "torch.aten.scatter_.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectBackwardOp(IRDLOperation):
    name = "torch.aten.select_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $dim `,` $index attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectIntOp(IRDLOperation):
    name = "torch.aten.select.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectScatterOp(IRDLOperation):
    name = "torch.aten.select_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $index attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSeluOp(IRDLOperation):
    name = "torch.aten.selu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelu_Op(IRDLOperation):
    name = "torch.aten.selu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_Op(IRDLOperation):
    name = "torch.aten.set_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_SourceTensorOp(IRDLOperation):
    name = "torch.aten.set_.source_Tensor"
    self = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $source attr-dict `:` type($self) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_SourceTensorStorageOffsetOp(IRDLOperation):
    name = "torch.aten.set_.source_Tensor_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    storage_offset = operand_def(BaseAttr(IntegerType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $source `,` $storage_offset `,` $size `,` $stride attr-dict `:` type($self) `,` type($source) `,` type($storage_offset) `,` type($size) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgnOp(IRDLOperation):
    name = "torch.aten.sgn"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgn_Op(IRDLOperation):
    name = "torch.aten.sgn_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidOp(IRDLOperation):
    name = "torch.aten.sigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoid_Op(IRDLOperation):
    name = "torch.aten.sigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignOp(IRDLOperation):
    name = "torch.aten.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSign_Op(IRDLOperation):
    name = "torch.aten.sign_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignbitOp(IRDLOperation):
    name = "torch.aten.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.silu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardOp(IRDLOperation):
    name = "torch.aten.silu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluOp(IRDLOperation):
    name = "torch.aten.silu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSilu_Op(IRDLOperation):
    name = "torch.aten.silu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinFloatOp(IRDLOperation):
    name = "torch.aten.sin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinIntOp(IRDLOperation):
    name = "torch.aten.sin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinOp(IRDLOperation):
    name = "torch.aten.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSin_Op(IRDLOperation):
    name = "torch.aten.sin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSincOp(IRDLOperation):
    name = "torch.aten.sinc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinc_Op(IRDLOperation):
    name = "torch.aten.sinc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhFloatOp(IRDLOperation):
    name = "torch.aten.sinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhIntOp(IRDLOperation):
    name = "torch.aten.sinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhOp(IRDLOperation):
    name = "torch.aten.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinh_Op(IRDLOperation):
    name = "torch.aten.sinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSizeIntOp(IRDLOperation):
    name = "torch.aten.size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSizeOp(IRDLOperation):
    name = "torch.aten.size"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceBackwardOp(IRDLOperation):
    name = "torch.aten.slice_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input_sizes `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($grad_output) `,` type($input_sizes) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceScatterOp(IRDLOperation):
    name = "torch.aten.slice_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = opt_operand_def(BaseAttr(IntegerType))
    end = opt_operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $src `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceTensorOp(IRDLOperation):
    name = "torch.aten.slice.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = opt_operand_def(BaseAttr(IntegerType))
    end = opt_operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $beta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSortBoolOp(IRDLOperation):
    name = "torch.aten.sort.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortFloatOp(IRDLOperation):
    name = "torch.aten.sort.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortIntOp(IRDLOperation):
    name = "torch.aten.sort.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSortOp(IRDLOperation):
    name = "torch.aten.sort"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSortStableOp(IRDLOperation):
    name = "torch.aten.sort.stable"
    self = operand_def(BaseAttr(TensorType))
    stable = opt_operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $stable `,` $dim `,` $descending attr-dict `:` type($self) `,` type($stable) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSortTensorOp(IRDLOperation):
    name = "torch.aten.sort.Tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    reverse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $reverse attr-dict `:` type($self) `,` type($reverse)"


@irdl_op_definition
class Torch_AtenSparseDimOp(IRDLOperation):
    name = "torch.aten.sparse_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialAiryAiOp(IRDLOperation):
    name = "torch.aten.special_airy_ai"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ1Op(IRDLOperation):
    name = "torch.aten.special_bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY0Op(IRDLOperation):
    name = "torch.aten.special_bessel_y0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY1Op(IRDLOperation):
    name = "torch.aten.special_bessel_y1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialEntrOp(IRDLOperation):
    name = "torch.aten.special_entr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfcxOp(IRDLOperation):
    name = "torch.aten.special_erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI0EOp(IRDLOperation):
    name = "torch.aten.special_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1EOp(IRDLOperation):
    name = "torch.aten.special_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1Op(IRDLOperation):
    name = "torch.aten.special_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLogNdtrOp(IRDLOperation):
    name = "torch.aten.special_log_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialNdtrOp(IRDLOperation):
    name = "torch.aten.special_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialNdtriOp(IRDLOperation):
    name = "torch.aten.special_ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k1"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialSphericalBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_spherical_bessel_j0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlog1PyOp(IRDLOperation):
    name = "torch.aten.special_xlog1py"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialZetaOp(IRDLOperation):
    name = "torch.aten.special_zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSplitOp(IRDLOperation):
    name = "torch.aten.split"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitSizesOp(IRDLOperation):
    name = "torch.aten.split.sizes"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitTensorOp(IRDLOperation):
    name = "torch.aten.split.Tensor"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitWithSizesCopyOp(IRDLOperation):
    name = "torch.aten.split_with_sizes_copy"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSplitWithSizesOp(IRDLOperation):
    name = "torch.aten.split_with_sizes"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtFloatOp(IRDLOperation):
    name = "torch.aten.sqrt.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtIntOp(IRDLOperation):
    name = "torch.aten.sqrt.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtOp(IRDLOperation):
    name = "torch.aten.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrt_Op(IRDLOperation):
    name = "torch.aten.sqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquareOp(IRDLOperation):
    name = "torch.aten.square"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquare_Op(IRDLOperation):
    name = "torch.aten.square_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeCopyDimOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeCopyDimsOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeCopyOp(IRDLOperation):
    name = "torch.aten.squeeze_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeDimOp(IRDLOperation):
    name = "torch.aten.squeeze.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeDimsOp(IRDLOperation):
    name = "torch.aten.squeeze.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeOp(IRDLOperation):
    name = "torch.aten.squeeze"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenStackOp(IRDLOperation):
    name = "torch.aten.stack"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdDimOp(IRDLOperation):
    name = "torch.aten.std.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdMeanDimOp(IRDLOperation):
    name = "torch.aten.std_mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdMeanOp(IRDLOperation):
    name = "torch.aten.std_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdOp(IRDLOperation):
    name = "torch.aten.std"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenStftOp(IRDLOperation):
    name = "torch.aten.stft"
    self = operand_def(BaseAttr(TensorType))
    n_fft = operand_def(BaseAttr(IntegerType))
    hop_length = opt_operand_def(BaseAttr(IntegerType))
    win_length = opt_operand_def(BaseAttr(IntegerType))
    window = opt_operand_def(BaseAttr(TensorType))
    normalized = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    onesided = opt_operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_complex = opt_operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $n_fft `,` $hop_length `,` $win_length `,` $window `,` $normalized `,` $onesided `,` $return_complex attr-dict `:` type($self) `,` type($n_fft) `,` type($hop_length) `,` type($win_length) `,` type($window) `,` type($normalized) `,` type($onesided) `,` type($return_complex) `->` type($result)"


@irdl_op_definition
class Torch_AtenStorageOffsetOp(IRDLOperation):
    name = "torch.aten.storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenStrideIntOp(IRDLOperation):
    name = "torch.aten.stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenStrideOp(IRDLOperation):
    name = "torch.aten.stride"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubFloatIntOp(IRDLOperation):
    name = "torch.aten.sub.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubFloatOp(IRDLOperation):
    name = "torch.aten.sub.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntFloatOp(IRDLOperation):
    name = "torch.aten.sub.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntOp(IRDLOperation):
    name = "torch.aten.sub.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumBoolOp(IRDLOperation):
    name = "torch.aten.sum.bool"
    self = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumDimIntlistOp(IRDLOperation):
    name = "torch.aten.sum.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumFloatOp(IRDLOperation):
    name = "torch.aten.sum.float"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumIntOp(IRDLOperation):
    name = "torch.aten.sum.int"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumOp(IRDLOperation):
    name = "torch.aten.sum"
    self = operand_def(BaseAttr(TensorType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSvdOp(IRDLOperation):
    name = "torch.aten.svd"
    self = operand_def(BaseAttr(TensorType))
    some = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    compute_uv = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    V = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $some `,` $compute_uv attr-dict `:` type($self) `,` type($some) `,` type($compute_uv) `->` type($U) `,` type($S) `,` type($V)"


@irdl_op_definition
class Torch_AtenSymNumelOp(IRDLOperation):
    name = "torch.aten.sym_numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymSizeIntOp(IRDLOperation):
    name = "torch.aten.sym_size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSymSizeOp(IRDLOperation):
    name = "torch.aten.sym_size"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStorageOffsetOp(IRDLOperation):
    name = "torch.aten.sym_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStrideIntOp(IRDLOperation):
    name = "torch.aten.sym_stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSymStrideOp(IRDLOperation):
    name = "torch.aten.sym_stride"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTCopyOp(IRDLOperation):
    name = "torch.aten.t_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTOp(IRDLOperation):
    name = "torch.aten.t"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenT_Op(IRDLOperation):
    name = "torch.aten.t_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTakeOp(IRDLOperation):
    name = "torch.aten.take"
    self = operand_def(BaseAttr(TensorType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $index attr-dict `:` type($self) `,` type($index) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTanFloatOp(IRDLOperation):
    name = "torch.aten.tan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanIntOp(IRDLOperation):
    name = "torch.aten.tan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanOp(IRDLOperation):
    name = "torch.aten.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTan_Op(IRDLOperation):
    name = "torch.aten.tan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.tanh_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardOp(IRDLOperation):
    name = "torch.aten.tanh_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhFloatOp(IRDLOperation):
    name = "torch.aten.tanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhIntOp(IRDLOperation):
    name = "torch.aten.tanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhOp(IRDLOperation):
    name = "torch.aten.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanh_Op(IRDLOperation):
    name = "torch.aten.tanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitIndicesOp(IRDLOperation):
    name = "torch.aten.tensor_split.indices"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $indices `,` $dim attr-dict `:` type($self) `,` type($indices) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitSectionsOp(IRDLOperation):
    name = "torch.aten.tensor_split.sections"
    self = operand_def(BaseAttr(TensorType))
    sections = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $sections `,` $dim attr-dict `:` type($self) `,` type($sections) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenTensorSplitTensorIndicesOrSectionsOp(IRDLOperation):
    name = "torch.aten.tensor_split.tensor_indices_or_sections"
    self = operand_def(BaseAttr(TensorType))
    tensor_indices_or_sections = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $tensor_indices_or_sections `,` $dim attr-dict `:` type($self) `,` type($tensor_indices_or_sections) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenToDtypeOp(IRDLOperation):
    name = "torch.aten.to.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $non_blocking `,` $copy `,` $memory_format attr-dict `:` type($self) `,` type($dtype) `,` type($non_blocking) `,` type($copy) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenToOtherOp(IRDLOperation):
    name = "torch.aten.to.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $non_blocking `,` $copy `,` $memory_format attr-dict `:` type($self) `,` type($other) `,` type($non_blocking) `,` type($copy) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPrimDtypeOp(IRDLOperation):
    name = "torch.aten.to.prim_dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dtype `,` $non_blocking `,` $copy attr-dict `:` type($self) `,` type($dtype) `,` type($non_blocking) `,` type($copy) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPrimOtherOp(IRDLOperation):
    name = "torch.aten.to.prim_other"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking `,` $copy attr-dict `:` type($self) `,` type($non_blocking) `,` type($copy) `->` type($result)"


@irdl_op_definition
class Torch_AtenTopkOp(IRDLOperation):
    name = "torch.aten.topk"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTraceOp(IRDLOperation):
    name = "torch.aten.trace"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeCopyIntOp(IRDLOperation):
    name = "torch.aten.transpose_copy.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeIntOp(IRDLOperation):
    name = "torch.aten.transpose.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTranspose_Op(IRDLOperation):
    name = "torch.aten.transpose_"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriangularSolveOp(IRDLOperation):
    name = "torch.aten.triangular_solve"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTriangularSolveXOp(IRDLOperation):
    name = "torch.aten.triangular_solve.X"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    X = operand_def(BaseAttr(TensorType))
    M = operand_def(BaseAttr(TensorType))
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular `,` $X `,` $M attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `,` type($X) `,` type($M) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTrilOp(IRDLOperation):
    name = "torch.aten.tril"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTril_Op(IRDLOperation):
    name = "torch.aten.tril_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriuOp(IRDLOperation):
    name = "torch.aten.triu"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriu_Op(IRDLOperation):
    name = "torch.aten.triu_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrueDivideTensorOp(IRDLOperation):
    name = "torch.aten.true_divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTrueDivide_TensorOp(IRDLOperation):
    name = "torch.aten.true_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTruncOp(IRDLOperation):
    name = "torch.aten.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrunc_Op(IRDLOperation):
    name = "torch.aten.trunc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnbindIntOp(IRDLOperation):
    name = "torch.aten.unbind.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnfoldBackwardOp(IRDLOperation):
    name = "torch.aten.unfold_backward"
    grad_in = operand_def(BaseAttr(TensorType))
    input_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_in `,` $input_sizes `,` $dim `,` $size `,` $step attr-dict `:` type($grad_in) `,` type($input_sizes) `,` type($dim) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldCopyOp(IRDLOperation):
    name = "torch.aten.unfold_copy"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldOp(IRDLOperation):
    name = "torch.aten.unfold"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUniqueDimOp(IRDLOperation):
    name = "torch.aten.unique_dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($dim) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenUnsafeChunkOp(IRDLOperation):
    name = "torch.aten.unsafe_chunk"
    self = operand_def(BaseAttr(TensorType))
    chunks = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $chunks `,` $dim attr-dict `:` type($self) `,` type($chunks) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsafeSplitTensorOp(IRDLOperation):
    name = "torch.aten.unsafe_split.Tensor"
    self = operand_def(BaseAttr(TensorType))
    split_size = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_size `,` $dim attr-dict `:` type($self) `,` type($split_size) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsafeSplitWithSizesOp(IRDLOperation):
    name = "torch.aten.unsafe_split_with_sizes"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsqueezeCopyOp(IRDLOperation):
    name = "torch.aten.unsqueeze_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueezeOp(IRDLOperation):
    name = "torch.aten.unsqueeze"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueeze_Op(IRDLOperation):
    name = "torch.aten.unsqueeze_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBicubic2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bicubic2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleLinear1DVecOp(IRDLOperation):
    name = "torch.aten.upsample_linear1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest1DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DBackwardOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = opt_operand_def(BaseAttr(Float64Type))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest3DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_d = opt_operand_def(BaseAttr(Float64Type))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleTrilinear3DVecOp(IRDLOperation):
    name = "torch.aten.upsample_trilinear3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarDimOp(IRDLOperation):
    name = "torch.aten.var.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarMeanDimOp(IRDLOperation):
    name = "torch.aten.var_mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarMeanOp(IRDLOperation):
    name = "torch.aten.var_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarOp(IRDLOperation):
    name = "torch.aten.var"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenVdotOp(IRDLOperation):
    name = "torch.aten.vdot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewAsComplexOp(IRDLOperation):
    name = "torch.aten.view_as_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewAsRealOp(IRDLOperation):
    name = "torch.aten.view_as_real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewCopyDtypeOp(IRDLOperation):
    name = "torch.aten.view_copy.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewCopyOp(IRDLOperation):
    name = "torch.aten.view_copy"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewDtypeOp(IRDLOperation):
    name = "torch.aten.view.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewOp(IRDLOperation):
    name = "torch.aten.view"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenWhereOp(IRDLOperation):
    name = "torch.aten.where"
    condition = operand_def(BaseAttr(TensorType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$condition attr-dict `:` type($condition) `->` type($result)"


@irdl_op_definition
class Torch_AtenWhereSelfOp(IRDLOperation):
    name = "torch.aten.where.self"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyOuttensorOp(IRDLOperation):
    name = "torch.aten.xlogy.OutTensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyTensorOp(IRDLOperation):
    name = "torch.aten.xlogy.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogy_TensorOp(IRDLOperation):
    name = "torch.aten.xlogy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenZeroOp(IRDLOperation):
    name = "torch.aten.zero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenZero_Op(IRDLOperation):
    name = "torch.aten.zero_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AmpForeachNonFiniteCheckAndUnscale_Op(IRDLOperation):
    name = "torch.aten._amp_foreach_non_finite_check_and_unscale_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    found_inf = operand_def(BaseAttr(TensorType))
    inv_scale = operand_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $found_inf `,` $inv_scale attr-dict `:` type($self) `,` type($found_inf) `,` type($inv_scale)"


@irdl_op_definition
class Torch_Aten_And_BoolOp(IRDLOperation):
    name = "torch.aten.__and__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_IntOp(IRDLOperation):
    name = "torch.aten.__and__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_TensorOp(IRDLOperation):
    name = "torch.aten.__and__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_AssertAsyncOp(IRDLOperation):
    name = "torch.aten._assert_async"
    self = operand_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_BatchNormNoUpdateOp(IRDLOperation):
    name = "torch.aten._batch_norm_no_update"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = opt_operand_def(BaseAttr(TensorType))
    running_var = opt_operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_BatchNormWithUpdateFunctionalOp(IRDLOperation):
    name = "torch.aten._batch_norm_with_update_functional"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    running_mean_out = result_def(BaseAttr(TensorType))
    running_var_out = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($running_mean_out) `,` type($running_var_out)"


@irdl_op_definition
class Torch_Aten_BatchNormWithUpdateOp(IRDLOperation):
    name = "torch.aten._batch_norm_with_update"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_CdistBackwardOp(IRDLOperation):
    name = "torch.aten._cdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    cdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $x1 `,` $x2 `,` $p `,` $cdist attr-dict `:` type($grad) `,` type($x1) `,` type($x2) `,` type($p) `,` type($cdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CdistForwardOp(IRDLOperation):
    name = "torch.aten._cdist_forward"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    compute_mode = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $compute_mode attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($compute_mode) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CholeskySolveHelperOp(IRDLOperation):
    name = "torch.aten._cholesky_solve_helper"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper attr-dict `:` type($self) `,` type($A) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ChunkCatOp(IRDLOperation):
    name = "torch.aten._chunk_cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    num_chunks = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim `,` $num_chunks attr-dict `:` type($tensors) `,` type($dim) `,` type($num_chunks) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackForCpuOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CsltSparseMmOp(IRDLOperation):
    name = "torch.aten._cslt_sparse_mm"
    compressed_A = operand_def(BaseAttr(TensorType))
    dense_B = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    alpha = opt_operand_def(BaseAttr(TensorType))
    out_dtype = opt_operand_def(BaseAttr(IntegerType))
    transpose_result = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    alg_id = operand_def(BaseAttr(IntegerType))
    split_k = operand_def(BaseAttr(IntegerType))
    split_k_one_kernel = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$compressed_A `,` $dense_B `,` $bias `,` $alpha `,` $out_dtype `,` $transpose_result `,` $alg_id `,` $split_k `,` $split_k_one_kernel attr-dict `:` type($compressed_A) `,` type($dense_B) `,` type($bias) `,` type($alpha) `,` type($out_dtype) `,` type($transpose_result) `,` type($alg_id) `,` type($split_k) `,` type($split_k_one_kernel) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CudnnRnnOp(IRDLOperation):
    name = "torch.aten._cudnn_rnn"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    weight_stride0 = operand_def(BaseAttr(IntegerType))
    weight_buf = opt_operand_def(BaseAttr(TensorType))
    hx = operand_def(BaseAttr(TensorType))
    cx = opt_operand_def(BaseAttr(TensorType))
    mode = operand_def(BaseAttr(IntegerType))
    hidden_size = operand_def(BaseAttr(IntegerType))
    proj_size = operand_def(BaseAttr(IntegerType))
    num_layers = operand_def(BaseAttr(IntegerType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout = operand_def(BaseAttr(Float64Type))
    train = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    bidirectional = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    batch_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dropout_state = opt_operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))
    result4 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $weight_stride0 `,` $weight_buf `,` $hx `,` $cx `,` $mode `,` $hidden_size `,` $proj_size `,` $num_layers `,` $batch_first `,` $dropout `,` $train `,` $bidirectional `,` $batch_sizes `,` $dropout_state attr-dict `:` type($input) `,` type($weight) `,` type($weight_stride0) `,` type($weight_buf) `,` type($hx) `,` type($cx) `,` type($mode) `,` type($hidden_size) `,` type($proj_size) `,` type($num_layers) `,` type($batch_first) `,` type($dropout) `,` type($train) `,` type($bidirectional) `,` type($batch_sizes) `,` type($dropout_state) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3) `,` type($result4)"


@irdl_op_definition
class Torch_Aten_EfficientAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._efficient_attention_backward"
    grad_out_ = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    cu_seqlens_q = opt_operand_def(BaseAttr(TensorType))
    cu_seqlens_k = opt_operand_def(BaseAttr(TensorType))
    max_seqlen_q = operand_def(BaseAttr(IntegerType))
    max_seqlen_k = operand_def(BaseAttr(IntegerType))
    logsumexp = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    custom_mask_type = operand_def(BaseAttr(IntegerType))
    bias_requires_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = opt_operand_def(BaseAttr(Float64Type))
    num_splits_key = opt_operand_def(BaseAttr(IntegerType))
    window_size = opt_operand_def(BaseAttr(IntegerType))
    shared_storage_dqdkdv = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out_ `,` $query `,` $key `,` $value `,` $bias `,` $out `,` $cu_seqlens_q `,` $cu_seqlens_k `,` $max_seqlen_q `,` $max_seqlen_k `,` $logsumexp `,` $dropout_p `,` $philox_seed `,` $philox_offset `,` $custom_mask_type `,` $bias_requires_grad `,` $scale `,` $num_splits_key `,` $window_size `,` $shared_storage_dqdkdv attr-dict `:` type($grad_out_) `,` type($query) `,` type($key) `,` type($value) `,` type($bias) `,` type($out) `,` type($cu_seqlens_q) `,` type($cu_seqlens_k) `,` type($max_seqlen_q) `,` type($max_seqlen_k) `,` type($logsumexp) `,` type($dropout_p) `,` type($philox_seed) `,` type($philox_offset) `,` type($custom_mask_type) `,` type($bias_requires_grad) `,` type($scale) `,` type($num_splits_key) `,` type($window_size) `,` type($shared_storage_dqdkdv) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EfficientAttentionForwardOp(IRDLOperation):
    name = "torch.aten._efficient_attention_forward"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    cu_seqlens_q = opt_operand_def(BaseAttr(TensorType))
    cu_seqlens_k = opt_operand_def(BaseAttr(TensorType))
    max_seqlen_q = opt_operand_def(BaseAttr(IntegerType))
    max_seqlen_k = opt_operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    custom_mask_type = operand_def(BaseAttr(IntegerType))
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = opt_operand_def(BaseAttr(Float64Type))
    seqlen_k = opt_operand_def(BaseAttr(TensorType))
    window_size = opt_operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    max_seqlen_batch_q = result_def(BaseAttr(IntegerType))
    max_seqlen_batch_k = result_def(BaseAttr(IntegerType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$query `,` $key `,` $value `,` $bias `,` $cu_seqlens_q `,` $cu_seqlens_k `,` $max_seqlen_q `,` $max_seqlen_k `,` $dropout_p `,` $custom_mask_type `,` $compute_log_sumexp `,` $scale `,` $seqlen_k `,` $window_size attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($bias) `,` type($cu_seqlens_q) `,` type($cu_seqlens_k) `,` type($max_seqlen_q) `,` type($max_seqlen_k) `,` type($dropout_p) `,` type($custom_mask_type) `,` type($compute_log_sumexp) `,` type($scale) `,` type($seqlen_k) `,` type($window_size) `->` type($output) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($max_seqlen_batch_q) `,` type($max_seqlen_batch_k)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    bag_size = operand_def(BaseAttr(TensorType))
    maximum_indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = opt_operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $offsets `,` $offset2bag `,` $bag_size `,` $maximum_indices `,` $num_weights `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $padding_idx attr-dict `:` type($grad) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($bag_size) `,` type($maximum_indices) `,` type($num_weights) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagDenseBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_dense_backward"
    grad = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    bag_size = operand_def(BaseAttr(TensorType))
    maximum_indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    per_sample_weights = opt_operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $indices `,` $offset2bag `,` $bag_size `,` $maximum_indices `,` $num_weights `,` $scale_grad_by_freq `,` $mode `,` $per_sample_weights `,` $padding_idx attr-dict `:` type($grad) `,` type($indices) `,` type($offset2bag) `,` type($bag_size) `,` type($maximum_indices) `,` type($num_weights) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($per_sample_weights) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagForwardOnlyOp(IRDLOperation):
    name = "torch.aten._embedding_bag_forward_only"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = opt_operand_def(BaseAttr(TensorType))
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagOp(IRDLOperation):
    name = "torch.aten._embedding_bag"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = opt_operand_def(BaseAttr(TensorType))
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_per_sample_weights_backward"
    grad = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    mode = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $weight `,` $indices `,` $offsets `,` $offset2bag `,` $mode `,` $padding_idx attr-dict `:` type($grad) `,` type($weight) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($mode) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EuclideanDistOp(IRDLOperation):
    name = "torch.aten._euclidean_dist"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$x1 `,` $x2 attr-dict `:` type($x1) `,` type($x2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_FftC2COp(IRDLOperation):
    name = "torch.aten._fft_c2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    forward = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $forward attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($forward) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FftC2ROp(IRDLOperation):
    name = "torch.aten._fft_c2r"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    last_dim_size = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $last_dim_size attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($last_dim_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FftR2COp(IRDLOperation):
    name = "torch.aten._fft_r2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    normalization = operand_def(BaseAttr(IntegerType))
    onesided = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $normalization `,` $onesided attr-dict `:` type($self) `,` type($dim) `,` type($normalization) `,` type($onesided) `->` type($result)"


@irdl_op_definition
class Torch_Aten_FlashAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._flash_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    scale = opt_operand_def(BaseAttr(Float64Type))
    window_size_left = opt_operand_def(BaseAttr(IntegerType))
    window_size_right = opt_operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $philox_seed `,` $philox_offset `,` $scale `,` $window_size_left `,` $window_size_right attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($philox_seed) `,` type($philox_offset) `,` type($scale) `,` type($window_size_left) `,` type($window_size_right) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_FlashAttentionForwardOp(IRDLOperation):
    name = "torch.aten._flash_attention_forward"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    cum_seq_q = opt_operand_def(BaseAttr(TensorType))
    cum_seq_k = opt_operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = opt_operand_def(BaseAttr(Float64Type))
    window_size_left = opt_operand_def(BaseAttr(IntegerType))
    window_size_right = opt_operand_def(BaseAttr(IntegerType))
    seqused_k = opt_operand_def(BaseAttr(TensorType))
    alibi_slopes = opt_operand_def(BaseAttr(TensorType))
    output = result_def(BaseAttr(TensorType))
    softmax_logsumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$query `,` $key `,` $value `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale `,` $window_size_left `,` $window_size_right `,` $seqused_k `,` $alibi_slopes attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `,` type($window_size_left) `,` type($window_size_right) `,` type($seqused_k) `,` type($alibi_slopes) `->` type($output) `,` type($softmax_logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_FusedAdamOp(IRDLOperation):
    name = "torch.aten._fused_adam"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))
    self_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf) `->` type($self_out) `,` type($grads_out) `,` type($exp_avgs_out) `,` type($exp_avg_sqs_out) `,` type($max_exp_avg_sqs_out)"


@irdl_op_definition
class Torch_Aten_FusedAdamTensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adam.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))
    self_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs_out = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf) `->` type($self_out) `,` type($grads_out) `,` type($exp_avgs_out) `,` type($exp_avg_sqs_out) `,` type($max_exp_avg_sqs_out)"


@irdl_op_definition
class Torch_Aten_FusedAdam_Op(IRDLOperation):
    name = "torch.aten._fused_adam_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdam_TensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adam_.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdamw_Op(IRDLOperation):
    name = "torch.aten._fused_adamw_"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(Float64Type))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedAdamw_TensorLrOp(IRDLOperation):
    name = "torch.aten._fused_adamw_.tensor_lr"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    grads = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avgs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_exp_avg_sqs = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    state_steps = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    lr = operand_def(BaseAttr(TensorType))
    beta1 = operand_def(BaseAttr(Float64Type))
    beta2 = operand_def(BaseAttr(Float64Type))
    weight_decay = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    amsgrad = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    maximize = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    grad_scale = opt_operand_def(BaseAttr(TensorType))
    found_inf = opt_operand_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $grads `,` $exp_avgs `,` $exp_avg_sqs `,` $max_exp_avg_sqs `,` $state_steps `,` $lr `,` $beta1 `,` $beta2 `,` $weight_decay `,` $eps `,` $amsgrad `,` $maximize `,` $grad_scale `,` $found_inf attr-dict `:` type($self) `,` type($grads) `,` type($exp_avgs) `,` type($exp_avg_sqs) `,` type($max_exp_avg_sqs) `,` type($state_steps) `,` type($lr) `,` type($beta1) `,` type($beta2) `,` type($weight_decay) `,` type($eps) `,` type($amsgrad) `,` type($maximize) `,` type($grad_scale) `,` type($found_inf)"


@irdl_op_definition
class Torch_Aten_FusedMovingAvgObsFqHelperOp(IRDLOperation):
    name = "torch.aten._fused_moving_avg_obs_fq_helper"
    self = operand_def(BaseAttr(TensorType))
    observer_on = operand_def(BaseAttr(TensorType))
    fake_quant_on = operand_def(BaseAttr(TensorType))
    running_min = operand_def(BaseAttr(TensorType))
    running_max = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    averaging_const = operand_def(BaseAttr(Float64Type))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    ch_axis = operand_def(BaseAttr(IntegerType))
    per_row_fake_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    symmetric_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $observer_on `,` $fake_quant_on `,` $running_min `,` $running_max `,` $scale `,` $zero_point `,` $averaging_const `,` $quant_min `,` $quant_max `,` $ch_axis `,` $per_row_fake_quant `,` $symmetric_quant attr-dict `:` type($self) `,` type($observer_on) `,` type($fake_quant_on) `,` type($running_min) `,` type($running_max) `,` type($scale) `,` type($zero_point) `,` type($averaging_const) `,` type($quant_min) `,` type($quant_max) `,` type($ch_axis) `,` type($per_row_fake_quant) `,` type($symmetric_quant) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_Aten_Iand_TensorOp(IRDLOperation):
    name = "torch.aten.__iand__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ilshift_TensorOp(IRDLOperation):
    name = "torch.aten.__ilshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_IntMmOp(IRDLOperation):
    name = "torch.aten._int_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ior_TensorOp(IRDLOperation):
    name = "torch.aten.__ior__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Irshift_TensorOp(IRDLOperation):
    name = "torch.aten.__irshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ixor_TensorOp(IRDLOperation):
    name = "torch.aten.__ixor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_JaggedToPaddedDenseForwardOp(IRDLOperation):
    name = "torch.aten._jagged_to_padded_dense_forward"
    values = operand_def(BaseAttr(TensorType))
    offsets = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    max_lengths = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding_value = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$values `,` $offsets `,` $max_lengths `,` $padding_value attr-dict `:` type($values) `,` type($offsets) `,` type($max_lengths) `,` type($padding_value) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LinalgDetOp(IRDLOperation):
    name = "torch.aten._linalg_det"
    A = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$A attr-dict `:` type($A) `->` type($result) `,` type($LU) `,` type($pivots)"
    )


@irdl_op_definition
class Torch_Aten_LinalgEigvalsOp(IRDLOperation):
    name = "torch.aten._linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LinalgSlogdetOp(IRDLOperation):
    name = "torch.aten._linalg_slogdet"
    A = operand_def(BaseAttr(TensorType))
    sign = result_def(BaseAttr(TensorType))
    logabsdet = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($sign) `,` type($logabsdet) `,` type($LU) `,` type($pivots)"


@irdl_op_definition
class Torch_Aten_LinalgSolveExOp(IRDLOperation):
    name = "torch.aten._linalg_solve_ex"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left `,` $check_errors attr-dict `:` type($A) `,` type($B) `,` type($left) `,` type($check_errors) `->` type($result) `,` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_Aten_ListToTensorOp(IRDLOperation):
    name = "torch.aten._list_to_tensor"
    self = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._log_softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxOp(IRDLOperation):
    name = "torch.aten._log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_IntOp(IRDLOperation):
    name = "torch.aten.__lshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_TensorOp(IRDLOperation):
    name = "torch.aten.__lshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_MaskedScaleOp(IRDLOperation):
    name = "torch.aten._masked_scale"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $scale attr-dict `:` type($self) `,` type($mask) `,` type($scale) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitFunctionalOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_functional"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    running_mean_out = result_def(BaseAttr(TensorType))
    running_var_out = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($running_mean_out) `,` type($running_var_out)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoStatsOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.no_stats"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoTrainingOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_no_training"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferCopyOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer_copy"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_BoolOp(IRDLOperation):
    name = "torch.aten.__or__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_IntOp(IRDLOperation):
    name = "torch.aten.__or__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_TensorOp(IRDLOperation):
    name = "torch.aten.__or__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PackPaddedSequenceOp(IRDLOperation):
    name = "torch.aten._pack_padded_sequence"
    input = operand_def(BaseAttr(TensorType))
    lengths = operand_def(BaseAttr(TensorType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $lengths `,` $batch_first attr-dict `:` type($input) `,` type($lengths) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PaddedDenseToJaggedForwardOp(IRDLOperation):
    name = "torch.aten._padded_dense_to_jagged_forward"
    dense = operand_def(BaseAttr(TensorType))
    offsets = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    total_L = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$dense `,` $offsets `,` $total_L attr-dict `:` type($dense) `,` type($offsets) `,` type($total_L) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PdistBackwardOp(IRDLOperation):
    name = "torch.aten._pdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    pdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $p `,` $pdist attr-dict `:` type($grad) `,` type($self) `,` type($p) `,` type($pdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PdistForwardOp(IRDLOperation):
    name = "torch.aten._pdist_forward"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PreluKernelBackwardOp(IRDLOperation):
    name = "torch.aten._prelu_kernel_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $weight attr-dict `:` type($grad_output) `,` type($self) `,` type($weight) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PreluKernelOp(IRDLOperation):
    name = "torch.aten._prelu_kernel"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ReshapeAliasOp(IRDLOperation):
    name = "torch.aten._reshape_alias"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride attr-dict `:` type($self) `,` type($size) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_IntOp(IRDLOperation):
    name = "torch.aten.__rshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_TensorOp(IRDLOperation):
    name = "torch.aten.__rshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SafeSoftmaxOp(IRDLOperation):
    name = "torch.aten._safe_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductCudnnAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_cudnn_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = opt_operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $philox_seed `,` $philox_offset `,` $attn_bias `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($attn_bias) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductCudnnAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_cudnn_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = opt_operand_def(BaseAttr(TensorType))
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = opt_operand_def(BaseAttr(Float64Type))
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    cum_seq_q = result_def(BaseAttr(TensorType))
    cum_seq_k = result_def(BaseAttr(TensorType))
    max_q = result_def(BaseAttr(IntegerType))
    max_k = result_def(BaseAttr(IntegerType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$query `,` $key `,` $value `,` $attn_bias `,` $compute_log_sumexp `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($compute_log_sumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `->` type($output) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductEfficientAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_efficient_attention_backward"
    grad_out_ = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    grad_input_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = opt_operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out_ `,` $query `,` $key `,` $value `,` $attn_bias `,` $out `,` $logsumexp `,` $philox_seed `,` $philox_offset `,` $dropout_p `,` $grad_input_mask `,` $is_causal `,` $scale attr-dict `:` type($grad_out_) `,` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($out) `,` type($logsumexp) `,` type($philox_seed) `,` type($philox_offset) `,` type($dropout_p) `,` type($grad_input_mask) `,` type($is_causal) `,` type($scale) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductEfficientAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_efficient_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    attn_bias = opt_operand_def(BaseAttr(TensorType))
    compute_log_sumexp = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    scale = opt_operand_def(BaseAttr(Float64Type))
    output = result_def(BaseAttr(TensorType))
    log_sumexp = result_def(BaseAttr(TensorType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$query `,` $key `,` $value `,` $attn_bias `,` $compute_log_sumexp `,` $dropout_p `,` $is_causal `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($attn_bias) `,` type($compute_log_sumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($scale) `->` type($output) `,` type($log_sumexp) `,` type($philox_seed) `,` type($philox_offset)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    cum_seq_q = operand_def(BaseAttr(TensorType))
    cum_seq_k = operand_def(BaseAttr(TensorType))
    max_q = operand_def(BaseAttr(IntegerType))
    max_k = operand_def(BaseAttr(IntegerType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    philox_seed = operand_def(BaseAttr(TensorType))
    philox_offset = operand_def(BaseAttr(TensorType))
    scale = opt_operand_def(BaseAttr(Float64Type))
    grad_query = result_def(BaseAttr(TensorType))
    grad_key = result_def(BaseAttr(TensorType))
    grad_value = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $cum_seq_q `,` $cum_seq_k `,` $max_q `,` $max_k `,` $dropout_p `,` $is_causal `,` $philox_seed `,` $philox_offset `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($dropout_p) `,` type($is_causal) `,` type($philox_seed) `,` type($philox_offset) `,` type($scale) `->` type($grad_query) `,` type($grad_key) `,` type($grad_value)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionForCpuBackwardOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_for_cpu_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    logsumexp = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    attn_mask = opt_operand_def(BaseAttr(TensorType))
    scale = opt_operand_def(BaseAttr(Float64Type))
    grad_query = result_def(BaseAttr(TensorType))
    grad_key = result_def(BaseAttr(TensorType))
    grad_value = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_out `,` $query `,` $key `,` $value `,` $out `,` $logsumexp `,` $dropout_p `,` $is_causal `,` $attn_mask `,` $scale attr-dict `:` type($grad_out) `,` type($query) `,` type($key) `,` type($value) `,` type($out) `,` type($logsumexp) `,` type($dropout_p) `,` type($is_causal) `,` type($attn_mask) `,` type($scale) `->` type($grad_query) `,` type($grad_key) `,` type($grad_value)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionForCpuOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention_for_cpu"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    attn_mask = opt_operand_def(BaseAttr(TensorType))
    scale = opt_operand_def(BaseAttr(Float64Type))
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$query `,` $key `,` $value `,` $dropout_p `,` $is_causal `,` $attn_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($dropout_p) `,` type($is_causal) `,` type($attn_mask) `,` type($scale) `->` type($output) `,` type($logsumexp)"


@irdl_op_definition
class Torch_Aten_ScaledDotProductFlashAttentionOp(IRDLOperation):
    name = "torch.aten._scaled_dot_product_flash_attention"
    query = operand_def(BaseAttr(TensorType))
    key = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    dropout_p = operand_def(BaseAttr(Float64Type))
    is_causal = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_debug_mask = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale = opt_operand_def(BaseAttr(Float64Type))
    output = result_def(BaseAttr(TensorType))
    logsumexp = result_def(BaseAttr(TensorType))
    cum_seq_q = result_def(BaseAttr(TensorType))
    cum_seq_k = result_def(BaseAttr(TensorType))
    max_q = result_def(BaseAttr(IntegerType))
    max_k = result_def(BaseAttr(IntegerType))
    philox_seed = result_def(BaseAttr(TensorType))
    philox_offset = result_def(BaseAttr(TensorType))
    debug_attn_mask = result_def(BaseAttr(TensorType))

    assembly_format = "$query `,` $key `,` $value `,` $dropout_p `,` $is_causal `,` $return_debug_mask `,` $scale attr-dict `:` type($query) `,` type($key) `,` type($value) `,` type($dropout_p) `,` type($is_causal) `,` type($return_debug_mask) `,` type($scale) `->` type($output) `,` type($logsumexp) `,` type($cum_seq_q) `,` type($cum_seq_k) `,` type($max_q) `,` type($max_k) `,` type($philox_seed) `,` type($philox_offset) `,` type($debug_attn_mask)"


@irdl_op_definition
class Torch_Aten_ScaledMmOp(IRDLOperation):
    name = "torch.aten._scaled_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    scale_a = operand_def(BaseAttr(TensorType))
    scale_b = operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    scale_result = opt_operand_def(BaseAttr(TensorType))
    out_dtype = opt_operand_def(BaseAttr(IntegerType))
    use_fast_accum = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $mat2 `,` $scale_a `,` $scale_b `,` $bias `,` $scale_result `,` $out_dtype `,` $use_fast_accum attr-dict `:` type($self) `,` type($mat2) `,` type($scale_a) `,` type($scale_b) `,` type($bias) `,` type($scale_result) `,` type($out_dtype) `,` type($use_fast_accum) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SoftmaxOp(IRDLOperation):
    name = "torch.aten._softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SparseSemiStructuredMmOp(IRDLOperation):
    name = "torch.aten._sparse_semi_structured_mm"
    mat1 = operand_def(BaseAttr(TensorType))
    mat1_meta = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    out_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$mat1 `,` $mat1_meta `,` $mat2 `,` $out_dtype attr-dict `:` type($mat1) `,` type($mat1_meta) `,` type($mat2) `,` type($out_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ThnnFusedLstmCellBackwardImplOp(IRDLOperation):
    name = "torch.aten._thnn_fused_lstm_cell_backward_impl"
    grad_hy = opt_operand_def(BaseAttr(TensorType))
    grad_cy = opt_operand_def(BaseAttr(TensorType))
    cx = operand_def(BaseAttr(TensorType))
    cy = operand_def(BaseAttr(TensorType))
    workspace = operand_def(BaseAttr(TensorType))
    has_bias = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_hy `,` $grad_cy `,` $cx `,` $cy `,` $workspace `,` $has_bias attr-dict `:` type($grad_hy) `,` type($grad_cy) `,` type($cx) `,` type($cy) `,` type($workspace) `,` type($has_bias) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_ThnnFusedLstmCellOp(IRDLOperation):
    name = "torch.aten._thnn_fused_lstm_cell"
    input_gates = operand_def(BaseAttr(TensorType))
    hidden_gates = operand_def(BaseAttr(TensorType))
    cx = operand_def(BaseAttr(TensorType))
    input_bias = opt_operand_def(BaseAttr(TensorType))
    hidden_bias = opt_operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input_gates `,` $hidden_gates `,` $cx `,` $input_bias `,` $hidden_bias attr-dict `:` type($input_gates) `,` type($hidden_gates) `,` type($cx) `,` type($input_bias) `,` type($hidden_bias) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_Unique2Op(IRDLOperation):
    name = "torch.aten._unique2"
    self = operand_def(BaseAttr(TensorType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_UnsafeIndexPutHackedTwinOp(IRDLOperation):
    name = "torch.aten._unsafe_index_put.hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    values = operand_def(BaseAttr(TensorType))
    accumulate = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices `,` $values `,` $accumulate attr-dict `:` type($self) `,` type($indices) `,` type($values) `,` type($accumulate) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UnsafeIndexTensorHackedTwinOp(IRDLOperation):
    name = "torch.aten._unsafe_index.Tensor_hacked_twin"
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $indices attr-dict `:` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UnsafeViewOp(IRDLOperation):
    name = "torch.aten._unsafe_view"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBicubic2DAaVecOp(IRDLOperation):
    name = "torch.aten._upsample_bicubic2d_aa.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $align_corners `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($align_corners) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleBilinear2DAaVecOp(IRDLOperation):
    name = "torch.aten._upsample_bilinear2d_aa.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $scales attr-dict `:` type($self) `,` type($output_size) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact1DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact1d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w `,` $grad_input attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DBackwardOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    input_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$grad_output `,` $output_size `,` $input_size `,` $scales_h `,` $scales_w attr-dict `:` type($grad_output) `,` type($output_size) `,` type($input_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact2DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scales_d = opt_operand_def(BaseAttr(Float64Type))
    scales_h = opt_operand_def(BaseAttr(Float64Type))
    scales_w = opt_operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$self `,` $output_size `,` $scales_d `,` $scales_h `,` $scales_w attr-dict `:` type($self) `,` type($output_size) `,` type($scales_d) `,` type($scales_h) `,` type($scales_w) `->` type($result)"


@irdl_op_definition
class Torch_Aten_UpsampleNearestExact3DVecOp(IRDLOperation):
    name = "torch.aten._upsample_nearest_exact3d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    scale_factors = opt_operand_def(ContainerOf(elem_constr=BaseAttr(Float64Type)))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmForCpuOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt8PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int8pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    scales = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $scales attr-dict `:` type($self) `,` type($mat2) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightNormInterfaceOp(IRDLOperation):
    name = "torch.aten._weight_norm_interface"
    v = operand_def(BaseAttr(TensorType))
    g = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$v `,` $g `,` $dim attr-dict `:` type($v) `,` type($g) `,` type($dim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_Xor_BoolOp(IRDLOperation):
    name = "torch.aten.__xor__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_IntOp(IRDLOperation):
    name = "torch.aten.__xor__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_TensorOp(IRDLOperation):
    name = "torch.aten.__xor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_InductorAccumulateGrad_Op(IRDLOperation):
    name = "torch.inductor.accumulate_grad_"
    variable = operand_def(BaseAttr(TensorType))
    new_grad = operand_def(BaseAttr(TensorType))

    assembly_format = (
        "$variable `,` $new_grad attr-dict `:` type($variable) `,` type($new_grad)"
    )


@irdl_op_definition
class Torch_InductorResizeStorageBytes_Op(IRDLOperation):
    name = "torch.inductor.resize_storage_bytes_"
    variable = operand_def(BaseAttr(TensorType))
    new_size = operand_def(BaseAttr(IntegerType))

    assembly_format = (
        "$variable `,` $new_size attr-dict `:` type($variable) `,` type($new_size)"
    )


@irdl_op_definition
class Torch_PrimsAbsOp(IRDLOperation):
    name = "torch.prims.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcosOp(IRDLOperation):
    name = "torch.prims.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcoshOp(IRDLOperation):
    name = "torch.prims.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAddOp(IRDLOperation):
    name = "torch.prims.add"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAmaxOp(IRDLOperation):
    name = "torch.prims.amax"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAminOp(IRDLOperation):
    name = "torch.prims.amin"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsStridedOp(IRDLOperation):
    name = "torch.prims.as_strided"
    a = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($a) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsStridedScatterOp(IRDLOperation):
    name = "torch.prims.as_strided_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($src) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsinOp(IRDLOperation):
    name = "torch.prims.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsinhOp(IRDLOperation):
    name = "torch.prims.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtan2Op(IRDLOperation):
    name = "torch.prims.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAtanOp(IRDLOperation):
    name = "torch.prims.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtanhOp(IRDLOperation):
    name = "torch.prims.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0EOp(IRDLOperation):
    name = "torch.prims.bessel_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0Op(IRDLOperation):
    name = "torch.prims.bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1EOp(IRDLOperation):
    name = "torch.prims.bessel_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1Op(IRDLOperation):
    name = "torch.prims.bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ0Op(IRDLOperation):
    name = "torch.prims.bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ1Op(IRDLOperation):
    name = "torch.prims.bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseAndOp(IRDLOperation):
    name = "torch.prims.bitwise_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseNotOp(IRDLOperation):
    name = "torch.prims.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseOrOp(IRDLOperation):
    name = "torch.prims.bitwise_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseXorOp(IRDLOperation):
    name = "torch.prims.bitwise_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBroadcastInDimOp(IRDLOperation):
    name = "torch.prims.broadcast_in_dim"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    broadcast_dimensions = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $shape `,` $broadcast_dimensions attr-dict `:` type($a) `,` type($shape) `,` type($broadcast_dimensions) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCatOp(IRDLOperation):
    name = "torch.prims.cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCbrtOp(IRDLOperation):
    name = "torch.prims.cbrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCeilOp(IRDLOperation):
    name = "torch.prims.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCloneOp(IRDLOperation):
    name = "torch.prims.clone"
    self = operand_def(BaseAttr(TensorType))
    memory_format = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseOp(IRDLOperation):
    name = "torch.prims.collapse"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseViewOp(IRDLOperation):
    name = "torch.prims.collapse_view"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjOp(IRDLOperation):
    name = "torch.prims.conj"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjPhysicalOp(IRDLOperation):
    name = "torch.prims.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConvertElementTypeOp(IRDLOperation):
    name = "torch.prims.convert_element_type"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCopyStridedOp(IRDLOperation):
    name = "torch.prims.copy_strided"
    a = operand_def(BaseAttr(TensorType))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $stride attr-dict `:` type($a) `,` type($stride) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCopyToOp(IRDLOperation):
    name = "torch.prims.copy_to"
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCosOp(IRDLOperation):
    name = "torch.prims.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCoshOp(IRDLOperation):
    name = "torch.prims.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDigammaOp(IRDLOperation):
    name = "torch.prims.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDivOp(IRDLOperation):
    name = "torch.prims.div"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsEqOp(IRDLOperation):
    name = "torch.prims.eq"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsErfInvOp(IRDLOperation):
    name = "torch.prims.erf_inv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfOp(IRDLOperation):
    name = "torch.prims.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcOp(IRDLOperation):
    name = "torch.prims.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcxOp(IRDLOperation):
    name = "torch.prims.erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExp2Op(IRDLOperation):
    name = "torch.prims.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpOp(IRDLOperation):
    name = "torch.prims.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpm1Op(IRDLOperation):
    name = "torch.prims.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftC2COp(IRDLOperation):
    name = "torch.prims.fft_c2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    forward = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $forward attr-dict `:` type($self) `,` type($dim) `,` type($forward) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftC2ROp(IRDLOperation):
    name = "torch.prims.fft_c2r"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    last_dim_size = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $last_dim_size attr-dict `:` type($self) `,` type($dim) `,` type($last_dim_size) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFftR2COp(IRDLOperation):
    name = "torch.prims.fft_r2c"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    onesided = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $onesided attr-dict `:` type($self) `,` type($dim) `,` type($onesided) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFloorOp(IRDLOperation):
    name = "torch.prims.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFmaxOp(IRDLOperation):
    name = "torch.prims.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFminOp(IRDLOperation):
    name = "torch.prims.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFmodOp(IRDLOperation):
    name = "torch.prims.fmod"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFrexpOp(IRDLOperation):
    name = "torch.prims.frexp"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_PrimsGcdOp(IRDLOperation):
    name = "torch.prims.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGeOp(IRDLOperation):
    name = "torch.prims.ge"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGtOp(IRDLOperation):
    name = "torch.prims.gt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsHypotOp(IRDLOperation):
    name = "torch.prims.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammaOp(IRDLOperation):
    name = "torch.prims.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammacOp(IRDLOperation):
    name = "torch.prims.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsImagOp(IRDLOperation):
    name = "torch.prims.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsIsfiniteOp(IRDLOperation):
    name = "torch.prims.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLeOp(IRDLOperation):
    name = "torch.prims.le"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsLgammaOp(IRDLOperation):
    name = "torch.prims.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog10Op(IRDLOperation):
    name = "torch.prims.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog1POp(IRDLOperation):
    name = "torch.prims.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog2Op(IRDLOperation):
    name = "torch.prims.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLogOp(IRDLOperation):
    name = "torch.prims.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLtOp(IRDLOperation):
    name = "torch.prims.lt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMaximumOp(IRDLOperation):
    name = "torch.prims.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMinimumOp(IRDLOperation):
    name = "torch.prims.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMulOp(IRDLOperation):
    name = "torch.prims.mul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNdtriOp(IRDLOperation):
    name = "torch.prims.ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNeOp(IRDLOperation):
    name = "torch.prims.ne"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNegOp(IRDLOperation):
    name = "torch.prims.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNextafterOp(IRDLOperation):
    name = "torch.prims.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsPowOp(IRDLOperation):
    name = "torch.prims.pow"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsProdOp(IRDLOperation):
    name = "torch.prims.prod"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRealOp(IRDLOperation):
    name = "torch.prims.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsReciprocalOp(IRDLOperation):
    name = "torch.prims.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRemainderOp(IRDLOperation):
    name = "torch.prims.remainder"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsReshapeOp(IRDLOperation):
    name = "torch.prims.reshape"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $shape attr-dict `:` type($a) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsResizeOp(IRDLOperation):
    name = "torch.prims.resize"
    a = operand_def(BaseAttr(TensorType))
    shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $shape attr-dict `:` type($a) `,` type($shape) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRevOp(IRDLOperation):
    name = "torch.prims.rev"
    a = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dims attr-dict `:` type($a) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRoundOp(IRDLOperation):
    name = "torch.prims.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRsqrtOp(IRDLOperation):
    name = "torch.prims.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsShiftLeftOp(IRDLOperation):
    name = "torch.prims.shift_left"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsShiftRightArithmeticOp(IRDLOperation):
    name = "torch.prims.shift_right_arithmetic"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSignOp(IRDLOperation):
    name = "torch.prims.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSignbitOp(IRDLOperation):
    name = "torch.prims.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinOp(IRDLOperation):
    name = "torch.prims.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinhOp(IRDLOperation):
    name = "torch.prims.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSphericalBesselJ0Op(IRDLOperation):
    name = "torch.prims.spherical_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSplitDimOp(IRDLOperation):
    name = "torch.prims.split_dim"
    a = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    outer_length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $dim `,` $outer_length attr-dict `:` type($a) `,` type($dim) `,` type($outer_length) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSqrtOp(IRDLOperation):
    name = "torch.prims.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSqueezeOp(IRDLOperation):
    name = "torch.prims.squeeze"
    a = operand_def(BaseAttr(TensorType))
    dimensions = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $dimensions attr-dict `:` type($a) `,` type($dimensions) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSubOp(IRDLOperation):
    name = "torch.prims.sub"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSumOp(IRDLOperation):
    name = "torch.prims.sum"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSvdOp(IRDLOperation):
    name = "torch.prims.svd"
    A = operand_def(BaseAttr(TensorType))
    full_matrices = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    Vh = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $full_matrices attr-dict `:` type($A) `,` type($full_matrices) `->` type($U) `,` type($S) `,` type($Vh)"


@irdl_op_definition
class Torch_PrimsTanOp(IRDLOperation):
    name = "torch.prims.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTanhOp(IRDLOperation):
    name = "torch.prims.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTransposeOp(IRDLOperation):
    name = "torch.prims.transpose"
    a = operand_def(BaseAttr(TensorType))
    permutation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $permutation attr-dict `:` type($a) `,` type($permutation) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTruncOp(IRDLOperation):
    name = "torch.prims.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsVarOp(IRDLOperation):
    name = "torch.prims.var"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    correction = opt_operand_def(BaseAttr(Float64Type))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $correction `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($correction) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsViewOfDtypeOp(IRDLOperation):
    name = "torch.prims.view_of_dtype"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsViewOfOp(IRDLOperation):
    name = "torch.prims.view_of"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsWhereOp(IRDLOperation):
    name = "torch.prims.where"
    pred = operand_def(BaseAttr(TensorType))
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$pred `,` $a `,` $b attr-dict `:` type($pred) `,` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsXorSumOp(IRDLOperation):
    name = "torch.prims.xor_sum"
    inp = operand_def(BaseAttr(TensorType))
    dims = opt_operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    output_dtype = opt_operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$inp `,` $dims `,` $output_dtype attr-dict `:` type($inp) `,` type($dims) `,` type($output_dtype) `->` type($result)"


@irdl_op_definition
class Torch_PrimsZetaOp(IRDLOperation):
    name = "torch.prims.zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Prims_MakeTokenOp(IRDLOperation):
    name = "torch.prims._make_token"
    result = result_def(BaseAttr(TensorType))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_Prims_SinkTokensOp(IRDLOperation):
    name = "torch.prims._sink_tokens"
    tokens = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$tokens attr-dict `:` type($tokens)"


@irdl_op_definition
class Torch_Profiler_RecordFunctionExitOp(IRDLOperation):
    name = "torch.profiler._record_function_exit"
    _0 = operand_def(BaseAttr(TensorType))

    assembly_format = "$_0 attr-dict `:` type($_0)"


@irdl_op_definition
class Torch_QuantizedHardswishOp(IRDLOperation):
    name = "torch.quantized.hardswish"
    input = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedInstanceNormOp(IRDLOperation):
    name = "torch.quantized.instance_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $weight `,` $bias `,` $eps `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_QuantizedLayerNormOp(IRDLOperation):
    name = "torch.quantized.layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = opt_operand_def(BaseAttr(TensorType))
    bias = opt_operand_def(BaseAttr(TensorType))
    eps = operand_def(BaseAttr(Float64Type))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    irdl_options = [SameVariadicOperandSize()]

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


@irdl_op_definition
class Torch_ConstantNoneOp(IRDLOperation):
    name = "torch.constant.none"
    result = result_def(EqAttrConstraint(attr=NoneType(parameters=())))

    traits = traits_def(ConstantLike(), Pure())

    assembly_format = "attr-dict"


TorchDialect = Dialect(
    "torch",
    [
        Torch_AtenAbsOp,
        Torch_AtenAbs_Op,
        Torch_AtenAbsoluteOp,
        Torch_AtenAbsolute_Op,
        Torch_AtenAcosFloatOp,
        Torch_AtenAcosIntOp,
        Torch_AtenAcosOp,
        Torch_AtenAcos_Op,
        Torch_AtenAcoshFloatOp,
        Torch_AtenAcoshIntOp,
        Torch_AtenAcoshOp,
        Torch_AtenAcosh_Op,
        Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool2DBackwardOp,
        Torch_AtenAdaptiveMaxPool2DOp,
        Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool3DBackwardOp,
        Torch_AtenAdaptiveMaxPool3DOp,
        Torch_AtenAddFloatIntOp,
        Torch_AtenAddFloatOp,
        Torch_AtenAddIntFloatOp,
        Torch_AtenAddIntOp,
        Torch_AtenAffineGridGeneratorOp,
        Torch_AtenAliasCopyOp,
        Torch_AtenAliasOp,
        Torch_AtenAllBoolOp,
        Torch_AtenAllDimOp,
        Torch_AtenAllDimsOp,
        Torch_AtenAllFloatOp,
        Torch_AtenAllIntOp,
        Torch_AtenAllOp,
        Torch_AtenAmaxOp,
        Torch_AtenAminOp,
        Torch_AtenAminmaxOp,
        Torch_AtenAngleFloatOp,
        Torch_AtenAngleIntOp,
        Torch_AtenAngleOp,
        Torch_AtenAnyBoolOp,
        Torch_AtenAnyDimOp,
        Torch_AtenAnyDimsOp,
        Torch_AtenAnyFloatOp,
        Torch_AtenAnyIntOp,
        Torch_AtenAnyOp,
        Torch_AtenArccosOp,
        Torch_AtenArccos_Op,
        Torch_AtenArccoshOp,
        Torch_AtenArccosh_Op,
        Torch_AtenArcsinOp,
        Torch_AtenArcsin_Op,
        Torch_AtenArcsinhOp,
        Torch_AtenArcsinh_Op,
        Torch_AtenArctan2Op,
        Torch_AtenArctan2_Op,
        Torch_AtenArctanOp,
        Torch_AtenArctan_Op,
        Torch_AtenArctanhOp,
        Torch_AtenArctanh_Op,
        Torch_AtenArgmaxOp,
        Torch_AtenArgminOp,
        Torch_AtenAsStridedCopyOp,
        Torch_AtenAsStridedOp,
        Torch_AtenAsStridedScatterOp,
        Torch_AtenAsStrided_Op,
        Torch_AtenAsinFloatOp,
        Torch_AtenAsinIntOp,
        Torch_AtenAsinOp,
        Torch_AtenAsin_Op,
        Torch_AtenAsinhFloatOp,
        Torch_AtenAsinhIntOp,
        Torch_AtenAsinhOp,
        Torch_AtenAsinh_Op,
        Torch_AtenAtan2FloatIntOp,
        Torch_AtenAtan2FloatOp,
        Torch_AtenAtan2IntFloatOp,
        Torch_AtenAtan2IntOp,
        Torch_AtenAtan2Op,
        Torch_AtenAtan2_Op,
        Torch_AtenAtanFloatOp,
        Torch_AtenAtanIntOp,
        Torch_AtenAtanOp,
        Torch_AtenAtan_Op,
        Torch_AtenAtanhFloatOp,
        Torch_AtenAtanhIntOp,
        Torch_AtenAtanhOp,
        Torch_AtenAtanh_Op,
        Torch_AtenAvgPool2DBackwardGradInputOp,
        Torch_AtenAvgPool2DBackwardOp,
        Torch_AtenAvgPool2DOp,
        Torch_AtenAvgPool3DBackwardGradInputOp,
        Torch_AtenAvgPool3DBackwardOp,
        Torch_AtenAvgPool3DOp,
        Torch_AtenBatchNormBackwardOp,
        Torch_AtenBinaryCrossEntropyBackwardGradInputOp,
        Torch_AtenBinaryCrossEntropyBackwardOp,
        Torch_AtenBinaryCrossEntropyOp,
        Torch_AtenBinaryCrossEntropyWithLogitsOp,
        Torch_AtenBitwiseAndTensorOp,
        Torch_AtenBitwiseAnd_TensorOp,
        Torch_AtenBitwiseLeftShiftTensorOp,
        Torch_AtenBitwiseLeftShift_TensorOp,
        Torch_AtenBitwiseNotOp,
        Torch_AtenBitwiseNot_Op,
        Torch_AtenBitwiseOrTensorOp,
        Torch_AtenBitwiseOr_TensorOp,
        Torch_AtenBitwiseRightShiftTensorOp,
        Torch_AtenBitwiseRightShift_TensorOp,
        Torch_AtenBitwiseXorTensorOp,
        Torch_AtenBitwiseXor_TensorOp,
        Torch_AtenBlockDiagOp,
        Torch_AtenBmmOp,
        Torch_AtenBroadcastTensorsOp,
        Torch_AtenBucketizeTensorOp,
        Torch_AtenCatOp,
        Torch_AtenCeilFloatOp,
        Torch_AtenCeilIntOp,
        Torch_AtenCeilOp,
        Torch_AtenCeil_Op,
        Torch_AtenChannelShuffleOp,
        Torch_AtenCholeskyInverseOp,
        Torch_AtenCholeskyOp,
        Torch_AtenCholeskySolveOp,
        Torch_AtenClampMaxTensorOp,
        Torch_AtenClampMax_TensorOp,
        Torch_AtenClampMinTensorOp,
        Torch_AtenClampMin_TensorOp,
        Torch_AtenClampTensorOp,
        Torch_AtenClamp_TensorOp,
        Torch_AtenClipTensorOp,
        Torch_AtenClip_TensorOp,
        Torch_AtenCloneOp,
        Torch_AtenCol2ImOp,
        Torch_AtenComplexOp,
        Torch_AtenConjOp,
        Torch_AtenConjPhysicalOp,
        Torch_AtenConjPhysical_Op,
        Torch_AtenConv2DOp,
        Torch_AtenConvolutionBackwardOp,
        Torch_AtenConvolutionOp,
        Torch_AtenCopyOp,
        Torch_AtenCopy_FloatOp,
        Torch_AtenCopy_IntOp,
        Torch_AtenCopy_Op,
        Torch_AtenCopy_TensorOp,
        Torch_AtenCopysignFloatIntOp,
        Torch_AtenCopysignFloatOp,
        Torch_AtenCopysignIntFloatOp,
        Torch_AtenCopysignIntOp,
        Torch_AtenCopysignTensorOp,
        Torch_AtenCopysign_TensorOp,
        Torch_AtenCosFloatOp,
        Torch_AtenCosIntOp,
        Torch_AtenCosOp,
        Torch_AtenCos_Op,
        Torch_AtenCoshFloatOp,
        Torch_AtenCoshIntOp,
        Torch_AtenCoshOp,
        Torch_AtenCosh_Op,
        Torch_AtenCountNonzeroDimIntlistOp,
        Torch_AtenCountNonzeroOp,
        Torch_AtenCudnnBatchNormBackwardOp,
        Torch_AtenCudnnBatchNormOp,
        Torch_AtenCummaxOp,
        Torch_AtenCumminOp,
        Torch_AtenCumprodOp,
        Torch_AtenCumprod_Op,
        Torch_AtenCumsumOp,
        Torch_AtenCumsum_Op,
        Torch_AtenDeg2RadOp,
        Torch_AtenDeg2Rad_Op,
        Torch_AtenDenseDimOp,
        Torch_AtenDetachOp,
        Torch_AtenDiagEmbedOp,
        Torch_AtenDiagOp,
        Torch_AtenDiagonalBackwardOp,
        Torch_AtenDiagonalCopyOp,
        Torch_AtenDiagonalOp,
        Torch_AtenDiagonalScatterOp,
        Torch_AtenDigammaOp,
        Torch_AtenDigamma_Op,
        Torch_AtenDimOp,
        Torch_AtenDivFloatOp,
        Torch_AtenDivIntOp,
        Torch_AtenDivTensorOp,
        Torch_AtenDiv_TensorOp,
        Torch_AtenDivideTensorOp,
        Torch_AtenDivide_TensorOp,
        Torch_AtenDotOp,
        Torch_AtenEmbeddingDenseBackwardOp,
        Torch_AtenEmbeddingOp,
        Torch_AtenEqBoolListOp,
        Torch_AtenEqBoolOp,
        Torch_AtenEqFloatIntOp,
        Torch_AtenEqFloatListOp,
        Torch_AtenEqFloatOp,
        Torch_AtenEqIntFloatOp,
        Torch_AtenEqIntListOp,
        Torch_AtenEqIntOp,
        Torch_AtenEqTensorListOp,
        Torch_AtenEqTensorOp,
        Torch_AtenEq_TensorOp,
        Torch_AtenErfFloatOp,
        Torch_AtenErfIntOp,
        Torch_AtenErfOp,
        Torch_AtenErf_Op,
        Torch_AtenErfcFloatOp,
        Torch_AtenErfcIntOp,
        Torch_AtenErfcOp,
        Torch_AtenErfc_Op,
        Torch_AtenErfinvOp,
        Torch_AtenErfinv_Op,
        Torch_AtenExp2Op,
        Torch_AtenExp2_Op,
        Torch_AtenExpFloatOp,
        Torch_AtenExpIntOp,
        Torch_AtenExpOp,
        Torch_AtenExp_Op,
        Torch_AtenExpandCopyOp,
        Torch_AtenExpandOp,
        Torch_AtenExpm1FloatOp,
        Torch_AtenExpm1IntOp,
        Torch_AtenExpm1Op,
        Torch_AtenExpm1_Op,
        Torch_AtenFftFftshiftOp,
        Torch_AtenFftIfftshiftOp,
        Torch_AtenFillTensorOp,
        Torch_AtenFill_TensorOp,
        Torch_AtenFixOp,
        Torch_AtenFix_Op,
        Torch_AtenFlipOp,
        Torch_AtenFloatPower_TensorOp,
        Torch_AtenFloorDivideOp,
        Torch_AtenFloorDivide_TensorOp,
        Torch_AtenFloorFloatOp,
        Torch_AtenFloorIntOp,
        Torch_AtenFloorOp,
        Torch_AtenFloor_Op,
        Torch_AtenFmaxOp,
        Torch_AtenFminOp,
        Torch_AtenFmodFloatIntOp,
        Torch_AtenFmodFloatOp,
        Torch_AtenFmodIntFloatOp,
        Torch_AtenFmodIntOp,
        Torch_AtenFmodTensorOp,
        Torch_AtenFmod_TensorOp,
        Torch_AtenFracOp,
        Torch_AtenFrac_Op,
        Torch_AtenFractionalMaxPool2DOp,
        Torch_AtenFrexpOp,
        Torch_AtenFrexpTensorOp,
        Torch_AtenGatherOp,
        Torch_AtenGcdIntOp,
        Torch_AtenGcdOp,
        Torch_AtenGcd_Op,
        Torch_AtenGeFloatIntOp,
        Torch_AtenGeFloatOp,
        Torch_AtenGeIntFloatOp,
        Torch_AtenGeIntOp,
        Torch_AtenGeTensorOp,
        Torch_AtenGe_TensorOp,
        Torch_AtenGluBackwardGradInputOp,
        Torch_AtenGluBackwardOp,
        Torch_AtenGluOp,
        Torch_AtenGreaterEqualTensorOp,
        Torch_AtenGreaterEqual_TensorOp,
        Torch_AtenGreaterTensorOp,
        Torch_AtenGreater_TensorOp,
        Torch_AtenGridSampler2DBackwardOp,
        Torch_AtenGridSampler2DOp,
        Torch_AtenGridSampler3DBackwardOp,
        Torch_AtenGridSampler3DOp,
        Torch_AtenGruDataOp,
        Torch_AtenGruInputOp,
        Torch_AtenGtFloatIntOp,
        Torch_AtenGtFloatOp,
        Torch_AtenGtIntFloatOp,
        Torch_AtenGtIntOp,
        Torch_AtenGtTensorOp,
        Torch_AtenGt_TensorOp,
        Torch_AtenHardsigmoidBackwardGradInputOp,
        Torch_AtenHardsigmoidBackwardOp,
        Torch_AtenHardsigmoidOp,
        Torch_AtenHardsigmoid_Op,
        Torch_AtenHardswishBackwardOp,
        Torch_AtenHardswishOp,
        Torch_AtenHardswish_Op,
        Torch_AtenHeavisideOp,
        Torch_AtenHeaviside_Op,
        Torch_AtenHingeEmbeddingLossOp,
        Torch_AtenHuberLossBackwardOp,
        Torch_AtenHuberLossOp,
        Torch_AtenHypotOp,
        Torch_AtenHypot_Op,
        Torch_AtenI0Op,
        Torch_AtenI0_Op,
        Torch_AtenIgammaOp,
        Torch_AtenIgamma_Op,
        Torch_AtenIgammacOp,
        Torch_AtenIgammac_Op,
        Torch_AtenIm2ColOp,
        Torch_AtenImagOp,
        Torch_AtenIndexCopyOp,
        Torch_AtenIndexCopy_Op,
        Torch_AtenIndexFillIntTensorOp,
        Torch_AtenIndexFill_IntTensorOp,
        Torch_AtenIndexListBoolOp,
        Torch_AtenIndexListFloatOp,
        Torch_AtenIndexListIntOp,
        Torch_AtenIndexListTensorOp,
        Torch_AtenIndexPutHackedTwinOp,
        Torch_AtenIndexPut_HackedTwinOp,
        Torch_AtenIndexSelectOp,
        Torch_AtenIndexTensorHackedTwinOp,
        Torch_AtenIsCoalescedOp,
        Torch_AtenIsComplexOp,
        Torch_AtenIsContiguousMemoryFormatOp,
        Torch_AtenIsContiguousOp,
        Torch_AtenIsNonOverlappingAndDenseOp,
        Torch_AtenIsSameSizeOp,
        Torch_AtenIsStridesLikeFormatOp,
        Torch_AtenIsfiniteFloatOp,
        Torch_AtenIsfiniteOp,
        Torch_AtenIsinTensorTensorOp,
        Torch_AtenIsinfFloatOp,
        Torch_AtenIsinfOp,
        Torch_AtenIsnanFloatOp,
        Torch_AtenIsnanOp,
        Torch_AtenIsneginfOp,
        Torch_AtenIsposinfOp,
        Torch_AtenIstftOp,
        Torch_AtenKthvalueOp,
        Torch_AtenLcmOp,
        Torch_AtenLcm_Op,
        Torch_AtenLeFloatIntOp,
        Torch_AtenLeFloatOp,
        Torch_AtenLeIntFloatOp,
        Torch_AtenLeIntOp,
        Torch_AtenLeTensorOp,
        Torch_AtenLe_TensorOp,
        Torch_AtenLerpTensorOp,
        Torch_AtenLerp_TensorOp,
        Torch_AtenLessEqualTensorOp,
        Torch_AtenLessEqual_TensorOp,
        Torch_AtenLessTensorOp,
        Torch_AtenLess_TensorOp,
        Torch_AtenLgammaFloatOp,
        Torch_AtenLgammaIntOp,
        Torch_AtenLgammaOp,
        Torch_AtenLgamma_Op,
        Torch_AtenLiftFreshCopyOp,
        Torch_AtenLiftFreshOp,
        Torch_AtenLiftOp,
        Torch_AtenLinalgCholeskyExOp,
        Torch_AtenLinalgCrossOp,
        Torch_AtenLinalgEigOp,
        Torch_AtenLinalgEigvalsOp,
        Torch_AtenLinalgHouseholderProductOp,
        Torch_AtenLinalgInvExOp,
        Torch_AtenLinalgLdlFactorExOp,
        Torch_AtenLinalgLdlSolveOp,
        Torch_AtenLinalgLuFactorExOp,
        Torch_AtenLinalgLuOp,
        Torch_AtenLinalgLuSolveOp,
        Torch_AtenLinalgMatrixExpOp,
        Torch_AtenLinalgSolveTriangularOp,
        Torch_AtenLinearBackwardOp,
        Torch_AtenLinearOp,
        Torch_AtenLog10FloatOp,
        Torch_AtenLog10IntOp,
        Torch_AtenLog10Op,
        Torch_AtenLog10_Op,
        Torch_AtenLog1PFloatOp,
        Torch_AtenLog1PIntOp,
        Torch_AtenLog1POp,
        Torch_AtenLog1P_Op,
        Torch_AtenLog2Op,
        Torch_AtenLog2_Op,
        Torch_AtenLogFloatFloatOp,
        Torch_AtenLogFloatIntOp,
        Torch_AtenLogFloatOp,
        Torch_AtenLogIntFloatOp,
        Torch_AtenLogIntIntOp,
        Torch_AtenLogIntOp,
        Torch_AtenLogOp,
        Torch_AtenLogSigmoidBackwardGradInputOp,
        Torch_AtenLogSigmoidBackwardOp,
        Torch_AtenLogSigmoidForwardOp,
        Torch_AtenLog_Op,
        Torch_AtenLogaddexp2Op,
        Torch_AtenLogaddexpOp,
        Torch_AtenLogcumsumexpOp,
        Torch_AtenLogicalAndOp,
        Torch_AtenLogicalAnd_Op,
        Torch_AtenLogicalNotOp,
        Torch_AtenLogicalNot_Op,
        Torch_AtenLogicalOrOp,
        Torch_AtenLogicalOr_Op,
        Torch_AtenLogicalXorOp,
        Torch_AtenLogicalXor_Op,
        Torch_AtenLogitBackwardGradInputOp,
        Torch_AtenLogitBackwardOp,
        Torch_AtenLogitOp,
        Torch_AtenLogit_Op,
        Torch_AtenLogsumexpOp,
        Torch_AtenLstmDataOp,
        Torch_AtenLstmInputOp,
        Torch_AtenLtFloatIntOp,
        Torch_AtenLtFloatOp,
        Torch_AtenLtIntFloatOp,
        Torch_AtenLtIntOp,
        Torch_AtenLtTensorOp,
        Torch_AtenLt_TensorOp,
        Torch_AtenLuUnpackOp,
        Torch_AtenMarginRankingLossOp,
        Torch_AtenMaskedFillTensorOp,
        Torch_AtenMaskedFill_TensorOp,
        Torch_AtenMaskedScatterBackwardOp,
        Torch_AtenMaskedScatterOp,
        Torch_AtenMaskedScatter_Op,
        Torch_AtenMaskedSelectOp,
        Torch_AtenMatmulOp,
        Torch_AtenMaxDimMaxOp,
        Torch_AtenMaxDimOp,
        Torch_AtenMaxOp,
        Torch_AtenMaxOtherOp,
        Torch_AtenMaxPool2DWithIndicesBackwardGradInputOp,
        Torch_AtenMaxPool2DWithIndicesBackwardOp,
        Torch_AtenMaxPool2DWithIndicesOp,
        Torch_AtenMaxPool3DWithIndicesBackwardGradInputOp,
        Torch_AtenMaxPool3DWithIndicesBackwardOp,
        Torch_AtenMaxPool3DWithIndicesOp,
        Torch_AtenMaxUnpool2DOp,
        Torch_AtenMaxUnpool3DOp,
        Torch_AtenMaximumOp,
        Torch_AtenMeanDimOp,
        Torch_AtenMeanOp,
        Torch_AtenMedianDimOp,
        Torch_AtenMedianOp,
        Torch_AtenMeshgridOp,
        Torch_AtenMinDimMinOp,
        Torch_AtenMinDimOp,
        Torch_AtenMinOp,
        Torch_AtenMinOtherOp,
        Torch_AtenMinimumOp,
        Torch_AtenMiopenBatchNormBackwardOp,
        Torch_AtenMiopenBatchNormOp,
        Torch_AtenMishBackwardOp,
        Torch_AtenMishOp,
        Torch_AtenMish_Op,
        Torch_AtenMkldnnRnnLayerBackwardOp,
        Torch_AtenMkldnnRnnLayerOp,
        Torch_AtenMmOp,
        Torch_AtenModeOp,
        Torch_AtenMseLossBackwardGradInputOp,
        Torch_AtenMseLossBackwardOp,
        Torch_AtenMseLossOp,
        Torch_AtenMulFloatIntOp,
        Torch_AtenMulFloatOp,
        Torch_AtenMulIntFloatOp,
        Torch_AtenMulIntOp,
        Torch_AtenMulTensorOp,
        Torch_AtenMul_TensorOp,
        Torch_AtenMultilabelMarginLossForwardOp,
        Torch_AtenMultiplyTensorOp,
        Torch_AtenMultiply_TensorOp,
        Torch_AtenMvOp,
        Torch_AtenMvlgammaOp,
        Torch_AtenMvlgamma_Op,
        Torch_AtenNanToNumOp,
        Torch_AtenNanToNum_Op,
        Torch_AtenNanmedianDimOp,
        Torch_AtenNanmedianOp,
        Torch_AtenNansumOp,
        Torch_AtenNarrowCopyOp,
        Torch_AtenNarrowOp,
        Torch_AtenNarrowTensorOp,
        Torch_AtenNativeBatchNormBackwardOp,
        Torch_AtenNativeBatchNormOp,
        Torch_AtenNativeGroupNormBackwardOp,
        Torch_AtenNativeGroupNormOp,
        Torch_AtenNativeLayerNormBackwardOp,
        Torch_AtenNativeLayerNormOp,
        Torch_AtenNeBoolListOp,
        Torch_AtenNeBoolOp,
        Torch_AtenNeFloatIntOp,
        Torch_AtenNeFloatListOp,
        Torch_AtenNeFloatOp,
        Torch_AtenNeIntFloatOp,
        Torch_AtenNeIntListOp,
        Torch_AtenNeIntOp,
        Torch_AtenNeTensorListOp,
        Torch_AtenNeTensorOp,
        Torch_AtenNe_TensorOp,
        Torch_AtenNegFloatOp,
        Torch_AtenNegIntOp,
        Torch_AtenNegOp,
        Torch_AtenNeg_Op,
        Torch_AtenNegativeOp,
        Torch_AtenNegative_Op,
        Torch_AtenNextafterOp,
        Torch_AtenNextafter_Op,
        Torch_AtenNllLoss2DBackwardGradInputOp,
        Torch_AtenNllLoss2DBackwardOp,
        Torch_AtenNllLoss2DForwardOp,
        Torch_AtenNllLossBackwardGradInputOp,
        Torch_AtenNllLossBackwardOp,
        Torch_AtenNllLossForwardOp,
        Torch_AtenNllLossOp,
        Torch_AtenNonzeroNumpyOp,
        Torch_AtenNonzeroOp,
        Torch_AtenNonzeroStaticOp,
        Torch_AtenNotEqualTensorOp,
        Torch_AtenNotEqual_TensorOp,
        Torch_AtenNumelOp,
        Torch_AtenOrmqrOp,
        Torch_AtenPairwiseDistanceOp,
        Torch_AtenPdistOp,
        Torch_AtenPermuteCopyOp,
        Torch_AtenPermuteOp,
        Torch_AtenPixelShuffleOp,
        Torch_AtenPixelUnshuffleOp,
        Torch_AtenPolarOp,
        Torch_AtenPolygammaOp,
        Torch_AtenPositiveOp,
        Torch_AtenPowFloatIntOp,
        Torch_AtenPowFloatOp,
        Torch_AtenPowIntFloatOp,
        Torch_AtenPowIntOp,
        Torch_AtenPowIntToIntOp,
        Torch_AtenPowTensorTensorOp,
        Torch_AtenPow_TensorOp,
        Torch_AtenPreluOp,
        Torch_AtenProdDimIntOp,
        Torch_AtenProdOp,
        Torch_AtenQuantizedGruDataLegacyOp,
        Torch_AtenQuantizedGruInputLegacyOp,
        Torch_AtenQuantizedLstmDataLegacyOp,
        Torch_AtenQuantizedLstmInputLegacyOp,
        Torch_AtenRad2DegOp,
        Torch_AtenRad2Deg_Op,
        Torch_AtenRealOp,
        Torch_AtenReciprocalOp,
        Torch_AtenReciprocal_Op,
        Torch_AtenReflectionPad1DBackwardGradInputOp,
        Torch_AtenReflectionPad1DBackwardOp,
        Torch_AtenReflectionPad1DOp,
        Torch_AtenReflectionPad2DBackwardGradInputOp,
        Torch_AtenReflectionPad2DBackwardOp,
        Torch_AtenReflectionPad2DOp,
        Torch_AtenReflectionPad3DBackwardGradInputOp,
        Torch_AtenReflectionPad3DBackwardOp,
        Torch_AtenReflectionPad3DOp,
        Torch_AtenRelu6Op,
        Torch_AtenReluOp,
        Torch_AtenRelu_Op,
        Torch_AtenRemainderFloatIntOp,
        Torch_AtenRemainderFloatOp,
        Torch_AtenRemainderIntFloatOp,
        Torch_AtenRemainderIntOp,
        Torch_AtenRemainderTensorOp,
        Torch_AtenRemainder_TensorOp,
        Torch_AtenRepeatInterleaveSelfIntOp,
        Torch_AtenRepeatInterleaveSelfTensorOp,
        Torch_AtenRepeatInterleaveTensorOp,
        Torch_AtenRepeatOp,
        Torch_AtenReplicationPad1DBackwardGradInputOp,
        Torch_AtenReplicationPad1DBackwardOp,
        Torch_AtenReplicationPad1DOp,
        Torch_AtenReplicationPad2DBackwardGradInputOp,
        Torch_AtenReplicationPad2DBackwardOp,
        Torch_AtenReplicationPad2DOp,
        Torch_AtenReplicationPad3DBackwardGradInputOp,
        Torch_AtenReplicationPad3DBackwardOp,
        Torch_AtenReplicationPad3DOp,
        Torch_AtenReshapeOp,
        Torch_AtenResizeAsOp,
        Torch_AtenResizeAs_Op,
        Torch_AtenResizeOp,
        Torch_AtenRnnReluDataOp,
        Torch_AtenRnnReluInputOp,
        Torch_AtenRnnTanhDataOp,
        Torch_AtenRnnTanhInputOp,
        Torch_AtenRollOp,
        Torch_AtenRot90Op,
        Torch_AtenRoundDecimalsOp,
        Torch_AtenRoundFloatOp,
        Torch_AtenRoundIntOp,
        Torch_AtenRoundOp,
        Torch_AtenRound_DecimalsOp,
        Torch_AtenRound_Op,
        Torch_AtenRsqrtOp,
        Torch_AtenRsqrt_Op,
        Torch_AtenScatterAddOp,
        Torch_AtenScatterAdd_Op,
        Torch_AtenScatterSrcOp,
        Torch_AtenScatter_SrcOp,
        Torch_AtenSelectBackwardOp,
        Torch_AtenSelectIntOp,
        Torch_AtenSelectScatterOp,
        Torch_AtenSeluOp,
        Torch_AtenSelu_Op,
        Torch_AtenSet_Op,
        Torch_AtenSet_SourceTensorOp,
        Torch_AtenSet_SourceTensorStorageOffsetOp,
        Torch_AtenSgnOp,
        Torch_AtenSgn_Op,
        Torch_AtenSigmoidBackwardGradInputOp,
        Torch_AtenSigmoidBackwardOp,
        Torch_AtenSigmoidOp,
        Torch_AtenSigmoid_Op,
        Torch_AtenSignOp,
        Torch_AtenSign_Op,
        Torch_AtenSignbitOp,
        Torch_AtenSiluBackwardGradInputOp,
        Torch_AtenSiluBackwardOp,
        Torch_AtenSiluOp,
        Torch_AtenSilu_Op,
        Torch_AtenSinFloatOp,
        Torch_AtenSinIntOp,
        Torch_AtenSinOp,
        Torch_AtenSin_Op,
        Torch_AtenSincOp,
        Torch_AtenSinc_Op,
        Torch_AtenSinhFloatOp,
        Torch_AtenSinhIntOp,
        Torch_AtenSinhOp,
        Torch_AtenSinh_Op,
        Torch_AtenSizeIntOp,
        Torch_AtenSizeOp,
        Torch_AtenSliceBackwardOp,
        Torch_AtenSliceScatterOp,
        Torch_AtenSliceTensorOp,
        Torch_AtenSmoothL1LossBackwardGradInputOp,
        Torch_AtenSmoothL1LossBackwardOp,
        Torch_AtenSmoothL1LossOp,
        Torch_AtenSoftMarginLossBackwardGradInputOp,
        Torch_AtenSoftMarginLossBackwardOp,
        Torch_AtenSoftMarginLossOp,
        Torch_AtenSortBoolOp,
        Torch_AtenSortFloatOp,
        Torch_AtenSortIntOp,
        Torch_AtenSortOp,
        Torch_AtenSortStableOp,
        Torch_AtenSortTensorOp,
        Torch_AtenSparseDimOp,
        Torch_AtenSpecialAiryAiOp,
        Torch_AtenSpecialBesselJ0Op,
        Torch_AtenSpecialBesselJ1Op,
        Torch_AtenSpecialBesselY0Op,
        Torch_AtenSpecialBesselY1Op,
        Torch_AtenSpecialChebyshevPolynomialTOp,
        Torch_AtenSpecialChebyshevPolynomialUOp,
        Torch_AtenSpecialChebyshevPolynomialVOp,
        Torch_AtenSpecialChebyshevPolynomialWOp,
        Torch_AtenSpecialEntrOp,
        Torch_AtenSpecialErfcxOp,
        Torch_AtenSpecialHermitePolynomialHOp,
        Torch_AtenSpecialHermitePolynomialHeOp,
        Torch_AtenSpecialI0EOp,
        Torch_AtenSpecialI1EOp,
        Torch_AtenSpecialI1Op,
        Torch_AtenSpecialLaguerrePolynomialLOp,
        Torch_AtenSpecialLegendrePolynomialPOp,
        Torch_AtenSpecialLogNdtrOp,
        Torch_AtenSpecialModifiedBesselI0Op,
        Torch_AtenSpecialModifiedBesselI1Op,
        Torch_AtenSpecialModifiedBesselK0Op,
        Torch_AtenSpecialModifiedBesselK1Op,
        Torch_AtenSpecialNdtrOp,
        Torch_AtenSpecialNdtriOp,
        Torch_AtenSpecialScaledModifiedBesselK0Op,
        Torch_AtenSpecialScaledModifiedBesselK1Op,
        Torch_AtenSpecialShiftedChebyshevPolynomialTOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWOp,
        Torch_AtenSpecialSphericalBesselJ0Op,
        Torch_AtenSpecialXlog1PyOp,
        Torch_AtenSpecialZetaOp,
        Torch_AtenSplitOp,
        Torch_AtenSplitSizesOp,
        Torch_AtenSplitTensorOp,
        Torch_AtenSplitWithSizesCopyOp,
        Torch_AtenSplitWithSizesOp,
        Torch_AtenSqrtFloatOp,
        Torch_AtenSqrtIntOp,
        Torch_AtenSqrtOp,
        Torch_AtenSqrt_Op,
        Torch_AtenSquareOp,
        Torch_AtenSquare_Op,
        Torch_AtenSqueezeCopyDimOp,
        Torch_AtenSqueezeCopyDimsOp,
        Torch_AtenSqueezeCopyOp,
        Torch_AtenSqueezeDimOp,
        Torch_AtenSqueezeDimsOp,
        Torch_AtenSqueezeOp,
        Torch_AtenStackOp,
        Torch_AtenStdDimOp,
        Torch_AtenStdMeanDimOp,
        Torch_AtenStdMeanOp,
        Torch_AtenStdOp,
        Torch_AtenStftOp,
        Torch_AtenStorageOffsetOp,
        Torch_AtenStrideIntOp,
        Torch_AtenStrideOp,
        Torch_AtenSubFloatIntOp,
        Torch_AtenSubFloatOp,
        Torch_AtenSubIntFloatOp,
        Torch_AtenSubIntOp,
        Torch_AtenSumBoolOp,
        Torch_AtenSumDimIntlistOp,
        Torch_AtenSumFloatOp,
        Torch_AtenSumIntOp,
        Torch_AtenSumOp,
        Torch_AtenSvdOp,
        Torch_AtenSymNumelOp,
        Torch_AtenSymSizeIntOp,
        Torch_AtenSymSizeOp,
        Torch_AtenSymStorageOffsetOp,
        Torch_AtenSymStrideIntOp,
        Torch_AtenSymStrideOp,
        Torch_AtenTCopyOp,
        Torch_AtenTOp,
        Torch_AtenT_Op,
        Torch_AtenTakeOp,
        Torch_AtenTanFloatOp,
        Torch_AtenTanIntOp,
        Torch_AtenTanOp,
        Torch_AtenTan_Op,
        Torch_AtenTanhBackwardGradInputOp,
        Torch_AtenTanhBackwardOp,
        Torch_AtenTanhFloatOp,
        Torch_AtenTanhIntOp,
        Torch_AtenTanhOp,
        Torch_AtenTanh_Op,
        Torch_AtenTensorSplitIndicesOp,
        Torch_AtenTensorSplitSectionsOp,
        Torch_AtenTensorSplitTensorIndicesOrSectionsOp,
        Torch_AtenToDtypeOp,
        Torch_AtenToOtherOp,
        Torch_AtenToPrimDtypeOp,
        Torch_AtenToPrimOtherOp,
        Torch_AtenTopkOp,
        Torch_AtenTraceOp,
        Torch_AtenTransposeCopyIntOp,
        Torch_AtenTransposeIntOp,
        Torch_AtenTranspose_Op,
        Torch_AtenTriangularSolveOp,
        Torch_AtenTriangularSolveXOp,
        Torch_AtenTrilOp,
        Torch_AtenTril_Op,
        Torch_AtenTriuOp,
        Torch_AtenTriu_Op,
        Torch_AtenTrueDivideTensorOp,
        Torch_AtenTrueDivide_TensorOp,
        Torch_AtenTruncOp,
        Torch_AtenTrunc_Op,
        Torch_AtenUnbindIntOp,
        Torch_AtenUnfoldBackwardOp,
        Torch_AtenUnfoldCopyOp,
        Torch_AtenUnfoldOp,
        Torch_AtenUniqueDimOp,
        Torch_AtenUnsafeChunkOp,
        Torch_AtenUnsafeSplitTensorOp,
        Torch_AtenUnsafeSplitWithSizesOp,
        Torch_AtenUnsqueezeCopyOp,
        Torch_AtenUnsqueezeOp,
        Torch_AtenUnsqueeze_Op,
        Torch_AtenUpsampleBicubic2DOp,
        Torch_AtenUpsampleBicubic2DVecOp,
        Torch_AtenUpsampleBilinear2DOp,
        Torch_AtenUpsampleBilinear2DVecOp,
        Torch_AtenUpsampleLinear1DOp,
        Torch_AtenUpsampleLinear1DVecOp,
        Torch_AtenUpsampleNearest1DOp,
        Torch_AtenUpsampleNearest1DVecOp,
        Torch_AtenUpsampleNearest2DBackwardGradInputOp,
        Torch_AtenUpsampleNearest2DBackwardOp,
        Torch_AtenUpsampleNearest2DOp,
        Torch_AtenUpsampleNearest2DVecOp,
        Torch_AtenUpsampleNearest3DOp,
        Torch_AtenUpsampleNearest3DVecOp,
        Torch_AtenUpsampleTrilinear3DOp,
        Torch_AtenUpsampleTrilinear3DVecOp,
        Torch_AtenVarDimOp,
        Torch_AtenVarMeanDimOp,
        Torch_AtenVarMeanOp,
        Torch_AtenVarOp,
        Torch_AtenVdotOp,
        Torch_AtenViewAsComplexOp,
        Torch_AtenViewAsRealOp,
        Torch_AtenViewCopyDtypeOp,
        Torch_AtenViewCopyOp,
        Torch_AtenViewDtypeOp,
        Torch_AtenViewOp,
        Torch_AtenWhereOp,
        Torch_AtenWhereSelfOp,
        Torch_AtenXlogyOuttensorOp,
        Torch_AtenXlogyTensorOp,
        Torch_AtenXlogy_TensorOp,
        Torch_AtenZeroOp,
        Torch_AtenZero_Op,
        Torch_Aten_AdaptiveAvgPool2DBackwardOp,
        Torch_Aten_AdaptiveAvgPool2DOp,
        Torch_Aten_AdaptiveAvgPool3DBackwardOp,
        Torch_Aten_AdaptiveAvgPool3DOp,
        Torch_Aten_AmpForeachNonFiniteCheckAndUnscale_Op,
        Torch_Aten_And_BoolOp,
        Torch_Aten_And_IntOp,
        Torch_Aten_And_TensorOp,
        Torch_Aten_AssertAsyncOp,
        Torch_Aten_BatchNormNoUpdateOp,
        Torch_Aten_BatchNormWithUpdateFunctionalOp,
        Torch_Aten_BatchNormWithUpdateOp,
        Torch_Aten_CdistBackwardOp,
        Torch_Aten_CdistForwardOp,
        Torch_Aten_CholeskySolveHelperOp,
        Torch_Aten_ChunkCatOp,
        Torch_Aten_ConvertWeightToInt4PackForCpuOp,
        Torch_Aten_ConvertWeightToInt4PackOp,
        Torch_Aten_CsltSparseMmOp,
        Torch_Aten_CudnnRnnOp,
        Torch_Aten_EfficientAttentionBackwardOp,
        Torch_Aten_EfficientAttentionForwardOp,
        Torch_Aten_EmbeddingBagBackwardOp,
        Torch_Aten_EmbeddingBagDenseBackwardOp,
        Torch_Aten_EmbeddingBagForwardOnlyOp,
        Torch_Aten_EmbeddingBagOp,
        Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp,
        Torch_Aten_EuclideanDistOp,
        Torch_Aten_FftC2COp,
        Torch_Aten_FftC2ROp,
        Torch_Aten_FftR2COp,
        Torch_Aten_FlashAttentionBackwardOp,
        Torch_Aten_FlashAttentionForwardOp,
        Torch_Aten_FusedAdamOp,
        Torch_Aten_FusedAdamTensorLrOp,
        Torch_Aten_FusedAdam_Op,
        Torch_Aten_FusedAdam_TensorLrOp,
        Torch_Aten_FusedAdamw_Op,
        Torch_Aten_FusedAdamw_TensorLrOp,
        Torch_Aten_FusedMovingAvgObsFqHelperOp,
        Torch_Aten_Iand_TensorOp,
        Torch_Aten_Ilshift_TensorOp,
        Torch_Aten_IntMmOp,
        Torch_Aten_Ior_TensorOp,
        Torch_Aten_Irshift_TensorOp,
        Torch_Aten_Ixor_TensorOp,
        Torch_Aten_JaggedToPaddedDenseForwardOp,
        Torch_Aten_LinalgDetOp,
        Torch_Aten_LinalgEigvalsOp,
        Torch_Aten_LinalgSlogdetOp,
        Torch_Aten_LinalgSolveExOp,
        Torch_Aten_ListToTensorOp,
        Torch_Aten_LogSoftmaxBackwardDataOp,
        Torch_Aten_LogSoftmaxOp,
        Torch_Aten_Lshift_IntOp,
        Torch_Aten_Lshift_TensorOp,
        Torch_Aten_MaskedScaleOp,
        Torch_Aten_NativeBatchNormLegitFunctionalOp,
        Torch_Aten_NativeBatchNormLegitNoStatsOp,
        Torch_Aten_NativeBatchNormLegitNoTrainingOp,
        Torch_Aten_NativeBatchNormLegitOp,
        Torch_Aten_NestedViewFromBufferCopyOp,
        Torch_Aten_NestedViewFromBufferOp,
        Torch_Aten_Or_BoolOp,
        Torch_Aten_Or_IntOp,
        Torch_Aten_Or_TensorOp,
        Torch_Aten_PackPaddedSequenceOp,
        Torch_Aten_PaddedDenseToJaggedForwardOp,
        Torch_Aten_PdistBackwardOp,
        Torch_Aten_PdistForwardOp,
        Torch_Aten_PreluKernelBackwardOp,
        Torch_Aten_PreluKernelOp,
        Torch_Aten_ReshapeAliasOp,
        Torch_Aten_Rshift_IntOp,
        Torch_Aten_Rshift_TensorOp,
        Torch_Aten_SafeSoftmaxOp,
        Torch_Aten_ScaledDotProductCudnnAttentionBackwardOp,
        Torch_Aten_ScaledDotProductCudnnAttentionOp,
        Torch_Aten_ScaledDotProductEfficientAttentionBackwardOp,
        Torch_Aten_ScaledDotProductEfficientAttentionOp,
        Torch_Aten_ScaledDotProductFlashAttentionBackwardOp,
        Torch_Aten_ScaledDotProductFlashAttentionForCpuBackwardOp,
        Torch_Aten_ScaledDotProductFlashAttentionForCpuOp,
        Torch_Aten_ScaledDotProductFlashAttentionOp,
        Torch_Aten_ScaledMmOp,
        Torch_Aten_SoftmaxBackwardDataOp,
        Torch_Aten_SoftmaxOp,
        Torch_Aten_SparseSemiStructuredMmOp,
        Torch_Aten_ThnnFusedLstmCellBackwardImplOp,
        Torch_Aten_ThnnFusedLstmCellOp,
        Torch_Aten_Unique2Op,
        Torch_Aten_UnsafeIndexPutHackedTwinOp,
        Torch_Aten_UnsafeIndexTensorHackedTwinOp,
        Torch_Aten_UnsafeViewOp,
        Torch_Aten_UpsampleBicubic2DAaOp,
        Torch_Aten_UpsampleBicubic2DAaVecOp,
        Torch_Aten_UpsampleBilinear2DAaOp,
        Torch_Aten_UpsampleBilinear2DAaVecOp,
        Torch_Aten_UpsampleNearestExact1DOp,
        Torch_Aten_UpsampleNearestExact1DVecOp,
        Torch_Aten_UpsampleNearestExact2DBackwardGradInputOp,
        Torch_Aten_UpsampleNearestExact2DBackwardOp,
        Torch_Aten_UpsampleNearestExact2DOp,
        Torch_Aten_UpsampleNearestExact2DVecOp,
        Torch_Aten_UpsampleNearestExact3DOp,
        Torch_Aten_UpsampleNearestExact3DVecOp,
        Torch_Aten_WeightInt4PackMmForCpuOp,
        Torch_Aten_WeightInt4PackMmOp,
        Torch_Aten_WeightInt8PackMmOp,
        Torch_Aten_WeightNormInterfaceOp,
        Torch_Aten_Xor_BoolOp,
        Torch_Aten_Xor_IntOp,
        Torch_Aten_Xor_TensorOp,
        Torch_InductorAccumulateGrad_Op,
        Torch_InductorResizeStorageBytes_Op,
        Torch_PrimsAbsOp,
        Torch_PrimsAcosOp,
        Torch_PrimsAcoshOp,
        Torch_PrimsAddOp,
        Torch_PrimsAmaxOp,
        Torch_PrimsAminOp,
        Torch_PrimsAsStridedOp,
        Torch_PrimsAsStridedScatterOp,
        Torch_PrimsAsinOp,
        Torch_PrimsAsinhOp,
        Torch_PrimsAtan2Op,
        Torch_PrimsAtanOp,
        Torch_PrimsAtanhOp,
        Torch_PrimsBesselI0EOp,
        Torch_PrimsBesselI0Op,
        Torch_PrimsBesselI1EOp,
        Torch_PrimsBesselI1Op,
        Torch_PrimsBesselJ0Op,
        Torch_PrimsBesselJ1Op,
        Torch_PrimsBitwiseAndOp,
        Torch_PrimsBitwiseNotOp,
        Torch_PrimsBitwiseOrOp,
        Torch_PrimsBitwiseXorOp,
        Torch_PrimsBroadcastInDimOp,
        Torch_PrimsCatOp,
        Torch_PrimsCbrtOp,
        Torch_PrimsCeilOp,
        Torch_PrimsCloneOp,
        Torch_PrimsCollapseOp,
        Torch_PrimsCollapseViewOp,
        Torch_PrimsConjOp,
        Torch_PrimsConjPhysicalOp,
        Torch_PrimsConvertElementTypeOp,
        Torch_PrimsCopyStridedOp,
        Torch_PrimsCopyToOp,
        Torch_PrimsCosOp,
        Torch_PrimsCoshOp,
        Torch_PrimsDigammaOp,
        Torch_PrimsDivOp,
        Torch_PrimsEqOp,
        Torch_PrimsErfInvOp,
        Torch_PrimsErfOp,
        Torch_PrimsErfcOp,
        Torch_PrimsErfcxOp,
        Torch_PrimsExp2Op,
        Torch_PrimsExpOp,
        Torch_PrimsExpm1Op,
        Torch_PrimsFftC2COp,
        Torch_PrimsFftC2ROp,
        Torch_PrimsFftR2COp,
        Torch_PrimsFloorOp,
        Torch_PrimsFmaxOp,
        Torch_PrimsFminOp,
        Torch_PrimsFmodOp,
        Torch_PrimsFrexpOp,
        Torch_PrimsGcdOp,
        Torch_PrimsGeOp,
        Torch_PrimsGtOp,
        Torch_PrimsHypotOp,
        Torch_PrimsIgammaOp,
        Torch_PrimsIgammacOp,
        Torch_PrimsImagOp,
        Torch_PrimsIsfiniteOp,
        Torch_PrimsLeOp,
        Torch_PrimsLgammaOp,
        Torch_PrimsLog10Op,
        Torch_PrimsLog1POp,
        Torch_PrimsLog2Op,
        Torch_PrimsLogOp,
        Torch_PrimsLtOp,
        Torch_PrimsMaximumOp,
        Torch_PrimsMinimumOp,
        Torch_PrimsMulOp,
        Torch_PrimsNdtriOp,
        Torch_PrimsNeOp,
        Torch_PrimsNegOp,
        Torch_PrimsNextafterOp,
        Torch_PrimsPowOp,
        Torch_PrimsProdOp,
        Torch_PrimsRealOp,
        Torch_PrimsReciprocalOp,
        Torch_PrimsRemainderOp,
        Torch_PrimsReshapeOp,
        Torch_PrimsResizeOp,
        Torch_PrimsRevOp,
        Torch_PrimsRoundOp,
        Torch_PrimsRsqrtOp,
        Torch_PrimsShiftLeftOp,
        Torch_PrimsShiftRightArithmeticOp,
        Torch_PrimsSignOp,
        Torch_PrimsSignbitOp,
        Torch_PrimsSinOp,
        Torch_PrimsSinhOp,
        Torch_PrimsSphericalBesselJ0Op,
        Torch_PrimsSplitDimOp,
        Torch_PrimsSqrtOp,
        Torch_PrimsSqueezeOp,
        Torch_PrimsSubOp,
        Torch_PrimsSumOp,
        Torch_PrimsSvdOp,
        Torch_PrimsTanOp,
        Torch_PrimsTanhOp,
        Torch_PrimsTransposeOp,
        Torch_PrimsTruncOp,
        Torch_PrimsVarOp,
        Torch_PrimsViewOfDtypeOp,
        Torch_PrimsViewOfOp,
        Torch_PrimsWhereOp,
        Torch_PrimsXorSumOp,
        Torch_PrimsZetaOp,
        Torch_Prims_MakeTokenOp,
        Torch_Prims_SinkTokensOp,
        Torch_Profiler_RecordFunctionExitOp,
        Torch_QuantizedHardswishOp,
        Torch_QuantizedInstanceNormOp,
        Torch_QuantizedLayerNormOp,
        Torch_ConstantNoneOp,
    ],
    [],
)
