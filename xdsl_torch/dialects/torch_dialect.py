###
# This dialect is automatically generated by xdsl_torch/tools/gen_torch_dialect.py
# Please don't edit it manually!
###

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *
from xdsl.traits import *

# ruff: noqa: F403, F405


@irdl_op_definition
class Torch_AtenAbsOp(IRDLOperation):
    name = "torch.aten.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosOp(IRDLOperation):
    name = "torch.aten.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshOp(IRDLOperation):
    name = "torch.aten.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddScalarOp(IRDLOperation):
    name = "torch.aten.add.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddTensorOp(IRDLOperation):
    name = "torch.aten.add.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddmmOp(IRDLOperation):
    name = "torch.aten.addmm"
    self = operand_def(BaseAttr(TensorType))
    mat1 = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    beta = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat1 `,` $mat2 `,` $beta `,` $alpha attr-dict `:` type($self) `,` type($mat1) `,` type($mat2) `,` type($beta) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasOp(IRDLOperation):
    name = "torch.aten.alias"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAmaxOp(IRDLOperation):
    name = "torch.aten.amax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAminOp(IRDLOperation):
    name = "torch.aten.amin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimOp(IRDLOperation):
    name = "torch.aten.any.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimsOp(IRDLOperation):
    name = "torch.aten.any.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyOp(IRDLOperation):
    name = "torch.aten.any"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgmaxOp(IRDLOperation):
    name = "torch.aten.argmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenArgminOp(IRDLOperation):
    name = "torch.aten.argmin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsStridedOp(IRDLOperation):
    name = "torch.aten.as_strided"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    storage_offset = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $stride `,` $storage_offset attr-dict `:` type($self) `,` type($size) `,` type($stride) `,` type($storage_offset) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinOp(IRDLOperation):
    name = "torch.aten.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhOp(IRDLOperation):
    name = "torch.aten.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2Op(IRDLOperation):
    name = "torch.aten.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtanOp(IRDLOperation):
    name = "torch.aten.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhOp(IRDLOperation):
    name = "torch.aten.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool2DOp(IRDLOperation):
    name = "torch.aten.avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenAvgPool3DOp(IRDLOperation):
    name = "torch.aten.avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    count_include_pad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    divisor_override = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $ceil_mode `,` $count_include_pad `,` $divisor_override attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($ceil_mode) `,` type($count_include_pad) `,` type($divisor_override) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseNotOp(IRDLOperation):
    name = "torch.aten.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorScalarOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBmmOp(IRDLOperation):
    name = "torch.aten.bmm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCatOp(IRDLOperation):
    name = "torch.aten.cat"
    tensors = operand_def(ContainerOf(elem_constr=BaseAttr(TensorType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$tensors `,` $dim attr-dict `:` type($tensors) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilOp(IRDLOperation):
    name = "torch.aten.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampOp(IRDLOperation):
    name = "torch.aten.clamp"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampTensorOp(IRDLOperation):
    name = "torch.aten.clamp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    max = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min `,` $max attr-dict `:` type($self) `,` type($min) `,` type($max) `->` type($result)"


@irdl_op_definition
class Torch_AtenCloneOp(IRDLOperation):
    name = "torch.aten.clone"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenCol2ImOp(IRDLOperation):
    name = "torch.aten.col2im"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size `,` $kernel_size `,` $dilation `,` $padding `,` $stride attr-dict `:` type($self) `,` type($output_size) `,` type($kernel_size) `,` type($dilation) `,` type($padding) `,` type($stride) `->` type($result)"


@irdl_op_definition
class Torch_AtenConstantPadNdOp(IRDLOperation):
    name = "torch.aten.constant_pad_nd"
    self = operand_def(BaseAttr(TensorType))
    pad = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $pad `,` $value attr-dict `:` type($self) `,` type($pad) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenConvolutionBackwardOp(IRDLOperation):
    name = "torch.aten.convolution_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias_sizes = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $input `,` $weight `,` $bias_sizes `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups `,` $output_mask attr-dict `:` type($grad_output) `,` type($input) `,` type($weight) `,` type($bias_sizes) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenConvolutionOp(IRDLOperation):
    name = "torch.aten.convolution"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    transposed = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    output_padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $stride `,` $padding `,` $dilation `,` $transposed `,` $output_padding `,` $groups attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($transposed) `,` type($output_padding) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopyOp(IRDLOperation):
    name = "torch.aten.copy"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosOp(IRDLOperation):
    name = "torch.aten.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshOp(IRDLOperation):
    name = "torch.aten.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCumsumOp(IRDLOperation):
    name = "torch.aten.cumsum"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalOp(IRDLOperation):
    name = "torch.aten.diagonal"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivScalarOp(IRDLOperation):
    name = "torch.aten.div.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivTensorOp(IRDLOperation):
    name = "torch.aten.div.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEmbeddingDenseBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_dense_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad_output) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingOp(IRDLOperation):
    name = "torch.aten.embedding"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($weight) `,` type($indices) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqScalarOp(IRDLOperation):
    name = "torch.aten.eq.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEqTensorOp(IRDLOperation):
    name = "torch.aten.eq.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenErfOp(IRDLOperation):
    name = "torch.aten.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpOp(IRDLOperation):
    name = "torch.aten.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpandOp(IRDLOperation):
    name = "torch.aten.expand"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    implicit = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $implicit attr-dict `:` type($self) `,` type($size) `,` type($implicit) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1Op(IRDLOperation):
    name = "torch.aten.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFillScalarOp(IRDLOperation):
    name = "torch.aten.fill.Scalar"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFlipOp(IRDLOperation):
    name = "torch.aten.flip"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorOp(IRDLOperation):
    name = "torch.aten.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodScalarOp(IRDLOperation):
    name = "torch.aten.fmod.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodTensorOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGatherOp(IRDLOperation):
    name = "torch.aten.gather"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeScalarOp(IRDLOperation):
    name = "torch.aten.ge.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeTensorOp(IRDLOperation):
    name = "torch.aten.ge.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGridSampler2DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtScalarOp(IRDLOperation):
    name = "torch.aten.gt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGtTensorOp(IRDLOperation):
    name = "torch.aten.gt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHardtanhOp(IRDLOperation):
    name = "torch.aten.hardtanh"
    self = operand_def(BaseAttr(TensorType))
    min_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    max_val = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $min_val `,` $max_val attr-dict `:` type($self) `,` type($min_val) `,` type($max_val) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectOp(IRDLOperation):
    name = "torch.aten.index_select"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfOp(IRDLOperation):
    name = "torch.aten.isinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanOp(IRDLOperation):
    name = "torch.aten.isnan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeScalarOp(IRDLOperation):
    name = "torch.aten.le.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeTensorOp(IRDLOperation):
    name = "torch.aten.le.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeakyReluOp(IRDLOperation):
    name = "torch.aten.leaky_relu"
    self = operand_def(BaseAttr(TensorType))
    negative_slope = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $negative_slope attr-dict `:` type($self) `,` type($negative_slope) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10Op(IRDLOperation):
    name = "torch.aten.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1POp(IRDLOperation):
    name = "torch.aten.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2Op(IRDLOperation):
    name = "torch.aten.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogOp(IRDLOperation):
    name = "torch.aten.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalAndOp(IRDLOperation):
    name = "torch.aten.logical_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalNotOp(IRDLOperation):
    name = "torch.aten.logical_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalOrOp(IRDLOperation):
    name = "torch.aten.logical_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXorOp(IRDLOperation):
    name = "torch.aten.logical_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtScalarOp(IRDLOperation):
    name = "torch.aten.lt.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtTensorOp(IRDLOperation):
    name = "torch.aten.lt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaskedScatterOp(IRDLOperation):
    name = "torch.aten.masked_scatter"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxDimOp(IRDLOperation):
    name = "torch.aten.max.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesBackwardOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxPool2DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool2d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaxPool3DWithIndicesOp(IRDLOperation):
    name = "torch.aten.max_pool3d_with_indices"
    self = operand_def(BaseAttr(TensorType))
    kernel_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    stride = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dilation = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    ceil_mode = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $kernel_size `,` $stride `,` $padding `,` $dilation `,` $ceil_mode attr-dict `:` type($self) `,` type($kernel_size) `,` type($stride) `,` type($padding) `,` type($dilation) `,` type($ceil_mode) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenMaximumOp(IRDLOperation):
    name = "torch.aten.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMeanDimOp(IRDLOperation):
    name = "torch.aten.mean.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenMeanOp(IRDLOperation):
    name = "torch.aten.mean"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMinDimOp(IRDLOperation):
    name = "torch.aten.min.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinimumOp(IRDLOperation):
    name = "torch.aten.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMmOp(IRDLOperation):
    name = "torch.aten.mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMulScalarOp(IRDLOperation):
    name = "torch.aten.mul.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMulTensorOp(IRDLOperation):
    name = "torch.aten.mul.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNativeDropoutOp(IRDLOperation):
    name = "torch.aten.native_dropout"
    input = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    train = operand_def(
        AnyOf(
            attr_constrs=(
                EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $p `,` $train attr-dict `:` type($input) `,` type($p) `,` type($train) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenNativeGroupNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_group_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $mean `,` $rstd `,` $weight `,` $N `,` $C `,` $HxW `,` $group `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeGroupNormOp(IRDLOperation):
    name = "torch.aten.native_group_norm"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    N = operand_def(BaseAttr(IntegerType))
    C = operand_def(BaseAttr(IntegerType))
    HxW = operand_def(BaseAttr(IntegerType))
    group = operand_def(BaseAttr(IntegerType))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $N `,` $C `,` $HxW `,` $group `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($N) `,` type($C) `,` type($HxW) `,` type($group) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormBackwardOp(IRDLOperation):
    name = "torch.aten.native_layer_norm_backward"
    grad_out = operand_def(BaseAttr(TensorType))
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    mean = operand_def(BaseAttr(TensorType))
    rstd = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    output_mask = operand_def(
        ContainerOf(
            elem_constr=EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
        )
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_out `,` $input `,` $normalized_shape `,` $mean `,` $rstd `,` $weight `,` $bias `,` $output_mask attr-dict `:` type($grad_out) `,` type($input) `,` type($normalized_shape) `,` type($mean) `,` type($rstd) `,` type($weight) `,` type($bias) `,` type($output_mask) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNativeLayerNormOp(IRDLOperation):
    name = "torch.aten.native_layer_norm"
    input = operand_def(BaseAttr(TensorType))
    normalized_shape = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $normalized_shape `,` $weight `,` $bias `,` $eps attr-dict `:` type($input) `,` type($normalized_shape) `,` type($weight) `,` type($bias) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenNeScalarOp(IRDLOperation):
    name = "torch.aten.ne.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNeTensorOp(IRDLOperation):
    name = "torch.aten.ne.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNegOp(IRDLOperation):
    name = "torch.aten.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroOp(IRDLOperation):
    name = "torch.aten.nonzero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPermuteOp(IRDLOperation):
    name = "torch.aten.permute"
    self = operand_def(BaseAttr(TensorType))
    dims = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dims attr-dict `:` type($self) `,` type($dims) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPowScalarOp(IRDLOperation):
    name = "torch.aten.pow.Scalar"
    self = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorScalarOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Scalar"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdDimIntOp(IRDLOperation):
    name = "torch.aten.prod.dim_int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenProdOp(IRDLOperation):
    name = "torch.aten.prod"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenReciprocalOp(IRDLOperation):
    name = "torch.aten.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad1DOp(IRDLOperation):
    name = "torch.aten.reflection_pad1d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad2DOp(IRDLOperation):
    name = "torch.aten.reflection_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReflectionPad3DOp(IRDLOperation):
    name = "torch.aten.reflection_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReluOp(IRDLOperation):
    name = "torch.aten.relu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderScalarOp(IRDLOperation):
    name = "torch.aten.remainder.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainderTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRepeatOp(IRDLOperation):
    name = "torch.aten.repeat"
    self = operand_def(BaseAttr(TensorType))
    repeats = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $repeats attr-dict `:` type($self) `,` type($repeats) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad2DOp(IRDLOperation):
    name = "torch.aten.replication_pad2d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenReplicationPad3DOp(IRDLOperation):
    name = "torch.aten.replication_pad3d"
    self = operand_def(BaseAttr(TensorType))
    padding = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $padding attr-dict `:` type($self) `,` type($padding) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundOp(IRDLOperation):
    name = "torch.aten.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrtOp(IRDLOperation):
    name = "torch.aten.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAddOp(IRDLOperation):
    name = "torch.aten.scatter_add"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOp(IRDLOperation):
    name = "torch.aten.scatter.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterValueOp(IRDLOperation):
    name = "torch.aten.scatter.value"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectIntOp(IRDLOperation):
    name = "torch.aten.select.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectScatterOp(IRDLOperation):
    name = "torch.aten.select_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $index attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidOp(IRDLOperation):
    name = "torch.aten.sigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignOp(IRDLOperation):
    name = "torch.aten.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinOp(IRDLOperation):
    name = "torch.aten.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhOp(IRDLOperation):
    name = "torch.aten.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceScatterOp(IRDLOperation):
    name = "torch.aten.slice_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSliceTensorOp(IRDLOperation):
    name = "torch.aten.slice.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    end = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $end `,` $step attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($end) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenSortOp(IRDLOperation):
    name = "torch.aten.sort"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSplitWithSizesOp(IRDLOperation):
    name = "torch.aten.split_with_sizes"
    self = operand_def(BaseAttr(TensorType))
    split_sizes = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(ContainerOf(elem_constr=BaseAttr(TensorType)))

    assembly_format = "$self `,` $split_sizes `,` $dim attr-dict `:` type($self) `,` type($split_sizes) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtOp(IRDLOperation):
    name = "torch.aten.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeDimOp(IRDLOperation):
    name = "torch.aten.squeeze.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeDimsOp(IRDLOperation):
    name = "torch.aten.squeeze.dims"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSubScalarOp(IRDLOperation):
    name = "torch.aten.sub.Scalar"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubTensorOp(IRDLOperation):
    name = "torch.aten.sub.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    alpha = operand_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $alpha attr-dict `:` type($self) `,` type($other) `,` type($alpha) `->` type($result)"


@irdl_op_definition
class Torch_AtenSumDimIntlistOp(IRDLOperation):
    name = "torch.aten.sum.dim_IntList"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    dtype = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $dtype attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($dtype) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymNumelOp(IRDLOperation):
    name = "torch.aten.sym_numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStorageOffsetOp(IRDLOperation):
    name = "torch.aten.sym_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanOp(IRDLOperation):
    name = "torch.aten.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhOp(IRDLOperation):
    name = "torch.aten.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTopkOp(IRDLOperation):
    name = "torch.aten.topk"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTruncOp(IRDLOperation):
    name = "torch.aten.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnsqueezeOp(IRDLOperation):
    name = "torch.aten.unsqueeze"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUpsampleBilinear2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_bilinear2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $align_corners `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($align_corners) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenUpsampleNearest2DVecOp(IRDLOperation):
    name = "torch.aten.upsample_nearest2d.vec"
    input = operand_def(BaseAttr(TensorType))
    output_size = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    scale_factors = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(Float64Type)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_size `,` $scale_factors attr-dict `:` type($input) `,` type($output_size) `,` type($scale_factors) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarCorrectionOp(IRDLOperation):
    name = "torch.aten.var.correction"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    correction = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                BaseAttr(Float64Type),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $correction `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($correction) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenVarDimOp(IRDLOperation):
    name = "torch.aten.var.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(
        AnyOf(
            attr_constrs=(
                ContainerOf(elem_constr=BaseAttr(IntegerType)),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $unbiased `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($unbiased) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewOp(IRDLOperation):
    name = "torch.aten.view"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $size attr-dict `:` type($self) `,` type($size) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenWhereSelfOp(IRDLOperation):
    name = "torch.aten.where.self"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d"
    self = operand_def(BaseAttr(TensorType))
    output_size = operand_def(ContainerOf(elem_constr=BaseAttr(IntegerType)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $output_size attr-dict `:` type($self) `,` type($output_size) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CdistForwardOp(IRDLOperation):
    name = "torch.aten._cdist_forward"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    compute_mode = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(IntegerType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $compute_mode attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($compute_mode) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagOp(IRDLOperation):
    name = "torch.aten._embedding_bag"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    mode = operand_def(BaseAttr(IntegerType))
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    per_sample_weights = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    include_last_offset = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    padding_idx = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))
    result3 = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $offsets `,` $scale_grad_by_freq `,` $mode `,` $sparse `,` $per_sample_weights `,` $include_last_offset `,` $padding_idx attr-dict `:` type($weight) `,` type($indices) `,` type($offsets) `,` type($scale_grad_by_freq) `,` type($mode) `,` type($sparse) `,` type($per_sample_weights) `,` type($include_last_offset) `,` type($padding_idx) `->` type($result0) `,` type($result1) `,` type($result2) `,` type($result3)"


@irdl_op_definition
class Torch_Aten_LocalScalarDenseOp(IRDLOperation):
    name = "torch.aten._local_scalar_dense"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(
        AnyOf(attr_constrs=(BaseAttr(IntegerType), BaseAttr(Float64Type)))
    )

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxOp(IRDLOperation):
    name = "torch.aten._log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoStatsOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit.no_stats"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitNoTrainingOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit_no_training"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_NativeBatchNormLegitOp(IRDLOperation):
    name = "torch.aten._native_batch_norm_legit"
    input = operand_def(BaseAttr(TensorType))
    weight = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    bias = operand_def(
        AnyOf(
            attr_constrs=(
                BaseAttr(TensorType),
                EqAttrConstraint(attr=NoneType(parameters=())),
            )
        )
    )
    running_mean = operand_def(BaseAttr(TensorType))
    running_var = operand_def(BaseAttr(TensorType))
    training = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    momentum = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $weight `,` $bias `,` $running_mean `,` $running_var `,` $training `,` $momentum `,` $eps attr-dict `:` type($input) `,` type($weight) `,` type($bias) `,` type($running_mean) `,` type($running_var) `,` type($training) `,` type($momentum) `,` type($eps) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_PdistForwardOp(IRDLOperation):
    name = "torch.aten._pdist_forward"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SoftmaxOp(IRDLOperation):
    name = "torch.aten._softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_ConstantNoneOp(IRDLOperation):
    name = "torch.constant.none"
    result = result_def(EqAttrConstraint(attr=NoneType(parameters=())))

    traits = traits_def(ConstantLike(), Pure())

    assembly_format = "attr-dict"


@irdl_op_definition
class Torch_PrimListConstructOp(IRDLOperation):
    name = "torch.prim.ListConstruct"
    elements = var_operand_def(AnyAttr())
    result = result_def(ContainerOf(elem_constr=AnyAttr()))

    traits = traits_def(Pure())

    assembly_format = "$elements attr-dict `:` functional-type($elements, $result)"


TorchDialect = Dialect(
    "torch",
    [
        Torch_AtenAbsOp,
        Torch_AtenAcosOp,
        Torch_AtenAcoshOp,
        Torch_AtenAddScalarOp,
        Torch_AtenAddTensorOp,
        Torch_AtenAddmmOp,
        Torch_AtenAliasOp,
        Torch_AtenAmaxOp,
        Torch_AtenAminOp,
        Torch_AtenAnyDimOp,
        Torch_AtenAnyDimsOp,
        Torch_AtenAnyOp,
        Torch_AtenArgmaxOp,
        Torch_AtenArgminOp,
        Torch_AtenAsStridedOp,
        Torch_AtenAsinOp,
        Torch_AtenAsinhOp,
        Torch_AtenAtan2Op,
        Torch_AtenAtanOp,
        Torch_AtenAtanhOp,
        Torch_AtenAvgPool2DBackwardOp,
        Torch_AtenAvgPool2DOp,
        Torch_AtenAvgPool3DOp,
        Torch_AtenBitwiseAndScalarOp,
        Torch_AtenBitwiseAndTensorOp,
        Torch_AtenBitwiseNotOp,
        Torch_AtenBitwiseOrScalarOp,
        Torch_AtenBitwiseOrTensorOp,
        Torch_AtenBitwiseXorScalarOp,
        Torch_AtenBitwiseXorTensorOp,
        Torch_AtenBmmOp,
        Torch_AtenCatOp,
        Torch_AtenCeilOp,
        Torch_AtenClampOp,
        Torch_AtenClampTensorOp,
        Torch_AtenCloneOp,
        Torch_AtenCol2ImOp,
        Torch_AtenConstantPadNdOp,
        Torch_AtenConvolutionBackwardOp,
        Torch_AtenConvolutionOp,
        Torch_AtenCopyOp,
        Torch_AtenCosOp,
        Torch_AtenCoshOp,
        Torch_AtenCumsumOp,
        Torch_AtenDiagonalOp,
        Torch_AtenDivScalarOp,
        Torch_AtenDivTensorOp,
        Torch_AtenEmbeddingDenseBackwardOp,
        Torch_AtenEmbeddingOp,
        Torch_AtenEqScalarOp,
        Torch_AtenEqTensorOp,
        Torch_AtenErfOp,
        Torch_AtenExpOp,
        Torch_AtenExpandOp,
        Torch_AtenExpm1Op,
        Torch_AtenFillScalarOp,
        Torch_AtenFlipOp,
        Torch_AtenFloorOp,
        Torch_AtenFmodScalarOp,
        Torch_AtenFmodTensorOp,
        Torch_AtenGatherOp,
        Torch_AtenGeScalarOp,
        Torch_AtenGeTensorOp,
        Torch_AtenGridSampler2DOp,
        Torch_AtenGtScalarOp,
        Torch_AtenGtTensorOp,
        Torch_AtenHardtanhOp,
        Torch_AtenIndexSelectOp,
        Torch_AtenIsinfOp,
        Torch_AtenIsnanOp,
        Torch_AtenLeScalarOp,
        Torch_AtenLeTensorOp,
        Torch_AtenLeakyReluOp,
        Torch_AtenLog10Op,
        Torch_AtenLog1POp,
        Torch_AtenLog2Op,
        Torch_AtenLogOp,
        Torch_AtenLogicalAndOp,
        Torch_AtenLogicalNotOp,
        Torch_AtenLogicalOrOp,
        Torch_AtenLogicalXorOp,
        Torch_AtenLtScalarOp,
        Torch_AtenLtTensorOp,
        Torch_AtenMaskedScatterOp,
        Torch_AtenMaxDimOp,
        Torch_AtenMaxPool2DWithIndicesBackwardOp,
        Torch_AtenMaxPool2DWithIndicesOp,
        Torch_AtenMaxPool3DWithIndicesOp,
        Torch_AtenMaximumOp,
        Torch_AtenMeanDimOp,
        Torch_AtenMeanOp,
        Torch_AtenMinDimOp,
        Torch_AtenMinimumOp,
        Torch_AtenMmOp,
        Torch_AtenMulScalarOp,
        Torch_AtenMulTensorOp,
        Torch_AtenNativeDropoutOp,
        Torch_AtenNativeGroupNormBackwardOp,
        Torch_AtenNativeGroupNormOp,
        Torch_AtenNativeLayerNormBackwardOp,
        Torch_AtenNativeLayerNormOp,
        Torch_AtenNeScalarOp,
        Torch_AtenNeTensorOp,
        Torch_AtenNegOp,
        Torch_AtenNonzeroOp,
        Torch_AtenPermuteOp,
        Torch_AtenPowScalarOp,
        Torch_AtenPowTensorScalarOp,
        Torch_AtenPowTensorTensorOp,
        Torch_AtenProdDimIntOp,
        Torch_AtenProdOp,
        Torch_AtenReciprocalOp,
        Torch_AtenReflectionPad1DOp,
        Torch_AtenReflectionPad2DOp,
        Torch_AtenReflectionPad3DOp,
        Torch_AtenReluOp,
        Torch_AtenRemainderScalarOp,
        Torch_AtenRemainderTensorOp,
        Torch_AtenRepeatOp,
        Torch_AtenReplicationPad2DOp,
        Torch_AtenReplicationPad3DOp,
        Torch_AtenRoundOp,
        Torch_AtenRsqrtOp,
        Torch_AtenScatterAddOp,
        Torch_AtenScatterSrcOp,
        Torch_AtenScatterValueOp,
        Torch_AtenSelectIntOp,
        Torch_AtenSelectScatterOp,
        Torch_AtenSigmoidOp,
        Torch_AtenSignOp,
        Torch_AtenSinOp,
        Torch_AtenSinhOp,
        Torch_AtenSliceScatterOp,
        Torch_AtenSliceTensorOp,
        Torch_AtenSortOp,
        Torch_AtenSplitWithSizesOp,
        Torch_AtenSqrtOp,
        Torch_AtenSqueezeDimOp,
        Torch_AtenSqueezeDimsOp,
        Torch_AtenSubScalarOp,
        Torch_AtenSubTensorOp,
        Torch_AtenSumDimIntlistOp,
        Torch_AtenSymNumelOp,
        Torch_AtenSymStorageOffsetOp,
        Torch_AtenTanOp,
        Torch_AtenTanhOp,
        Torch_AtenTopkOp,
        Torch_AtenTruncOp,
        Torch_AtenUnsqueezeOp,
        Torch_AtenUpsampleBilinear2DVecOp,
        Torch_AtenUpsampleNearest2DVecOp,
        Torch_AtenVarCorrectionOp,
        Torch_AtenVarDimOp,
        Torch_AtenViewOp,
        Torch_AtenWhereSelfOp,
        Torch_Aten_AdaptiveAvgPool2DBackwardOp,
        Torch_Aten_AdaptiveAvgPool2DOp,
        Torch_Aten_AdaptiveAvgPool3DOp,
        Torch_Aten_CdistForwardOp,
        Torch_Aten_EmbeddingBagOp,
        Torch_Aten_LocalScalarDenseOp,
        Torch_Aten_LogSoftmaxOp,
        Torch_Aten_NativeBatchNormLegitNoStatsOp,
        Torch_Aten_NativeBatchNormLegitNoTrainingOp,
        Torch_Aten_NativeBatchNormLegitOp,
        Torch_Aten_PdistForwardOp,
        Torch_Aten_SoftmaxOp,
        Torch_ConstantNoneOp,
        Torch_PrimListConstructOp,
    ],
    [],
)
