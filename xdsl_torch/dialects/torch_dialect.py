###
# This dialect is automatically generated by xdsl_torch/tools/gen_torch_dialect.py
# Please don't edit it manually!
###

from xdsl.dialects.builtin import *
from xdsl.ir import *
from xdsl.irdl import *

# ruff: noqa: F403, F405


@irdl_op_definition
class Torch_AtenAbsOp(IRDLOperation):
    name = "torch.aten.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbs_Op(IRDLOperation):
    name = "torch.aten.abs_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsoluteOp(IRDLOperation):
    name = "torch.aten.absolute"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAbsolute_Op(IRDLOperation):
    name = "torch.aten.absolute_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosFloatOp(IRDLOperation):
    name = "torch.aten.acos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosIntOp(IRDLOperation):
    name = "torch.aten.acos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosOp(IRDLOperation):
    name = "torch.aten.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcos_Op(IRDLOperation):
    name = "torch.aten.acos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshFloatOp(IRDLOperation):
    name = "torch.aten.acosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshIntOp(IRDLOperation):
    name = "torch.aten.acosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcoshOp(IRDLOperation):
    name = "torch.aten.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAcosh_Op(IRDLOperation):
    name = "torch.aten.acosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool2DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenAdaptiveMaxPool3DBackwardOp(IRDLOperation):
    name = "torch.aten.adaptive_max_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $indices attr-dict `:` type($grad_output) `,` type($self) `,` type($indices) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddFloatIntOp(IRDLOperation):
    name = "torch.aten.add.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddFloatOp(IRDLOperation):
    name = "torch.aten.add.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntFloatOp(IRDLOperation):
    name = "torch.aten.add.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAddIntOp(IRDLOperation):
    name = "torch.aten.add.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasCopyOp(IRDLOperation):
    name = "torch.aten.alias_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAliasOp(IRDLOperation):
    name = "torch.aten.alias"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllDimOp(IRDLOperation):
    name = "torch.aten.all.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAllOp(IRDLOperation):
    name = "torch.aten.all"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleFloatOp(IRDLOperation):
    name = "torch.aten.angle.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleIntOp(IRDLOperation):
    name = "torch.aten.angle.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAngleOp(IRDLOperation):
    name = "torch.aten.angle"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyDimOp(IRDLOperation):
    name = "torch.aten.any.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenAnyOp(IRDLOperation):
    name = "torch.aten.any"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosOp(IRDLOperation):
    name = "torch.aten.arccos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccos_Op(IRDLOperation):
    name = "torch.aten.arccos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccoshOp(IRDLOperation):
    name = "torch.aten.arccosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArccosh_Op(IRDLOperation):
    name = "torch.aten.arccosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinOp(IRDLOperation):
    name = "torch.aten.arcsin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsin_Op(IRDLOperation):
    name = "torch.aten.arcsin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinhOp(IRDLOperation):
    name = "torch.aten.arcsinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArcsinh_Op(IRDLOperation):
    name = "torch.aten.arcsinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan2Op(IRDLOperation):
    name = "torch.aten.arctan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctan2_Op(IRDLOperation):
    name = "torch.aten.arctan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenArctanOp(IRDLOperation):
    name = "torch.aten.arctan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctan_Op(IRDLOperation):
    name = "torch.aten.arctan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanhOp(IRDLOperation):
    name = "torch.aten.arctanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenArctanh_Op(IRDLOperation):
    name = "torch.aten.arctanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinFloatOp(IRDLOperation):
    name = "torch.aten.asin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinIntOp(IRDLOperation):
    name = "torch.aten.asin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinOp(IRDLOperation):
    name = "torch.aten.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsin_Op(IRDLOperation):
    name = "torch.aten.asin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhFloatOp(IRDLOperation):
    name = "torch.aten.asinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhIntOp(IRDLOperation):
    name = "torch.aten.asinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinhOp(IRDLOperation):
    name = "torch.aten.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAsinh_Op(IRDLOperation):
    name = "torch.aten.asinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatIntOp(IRDLOperation):
    name = "torch.aten.atan2.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2FloatOp(IRDLOperation):
    name = "torch.aten.atan2.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntFloatOp(IRDLOperation):
    name = "torch.aten.atan2.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2IntOp(IRDLOperation):
    name = "torch.aten.atan2.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan2Op(IRDLOperation):
    name = "torch.aten.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtan2_Op(IRDLOperation):
    name = "torch.aten.atan2_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenAtanFloatOp(IRDLOperation):
    name = "torch.aten.atan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanIntOp(IRDLOperation):
    name = "torch.aten.atan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanOp(IRDLOperation):
    name = "torch.aten.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtan_Op(IRDLOperation):
    name = "torch.aten.atan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhFloatOp(IRDLOperation):
    name = "torch.aten.atanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhIntOp(IRDLOperation):
    name = "torch.aten.atanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanhOp(IRDLOperation):
    name = "torch.aten.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenAtanh_Op(IRDLOperation):
    name = "torch.aten.atanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseAndTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseAnd_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_and_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseLeftShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_left_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseNotOp(IRDLOperation):
    name = "torch.aten.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseNot_Op(IRDLOperation):
    name = "torch.aten.bitwise_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenBitwiseOrTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseOr_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_or_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShiftTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseRightShift_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_right_shift_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXorTensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBitwiseXor_TensorOp(IRDLOperation):
    name = "torch.aten.bitwise_xor_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBmmOp(IRDLOperation):
    name = "torch.aten.bmm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenBucketizeTensorOp(IRDLOperation):
    name = "torch.aten.bucketize.Tensor"
    self = operand_def(BaseAttr(TensorType))
    boundaries = operand_def(BaseAttr(TensorType))
    out_int32 = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    right = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $boundaries `,` $out_int32 `,` $right attr-dict `:` type($self) `,` type($boundaries) `,` type($out_int32) `,` type($right) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilFloatOp(IRDLOperation):
    name = "torch.aten.ceil.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilIntOp(IRDLOperation):
    name = "torch.aten.ceil.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeilOp(IRDLOperation):
    name = "torch.aten.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCeil_Op(IRDLOperation):
    name = "torch.aten.ceil_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenChannelShuffleOp(IRDLOperation):
    name = "torch.aten.channel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    groups = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $groups attr-dict `:` type($self) `,` type($groups) `->` type($result)"


@irdl_op_definition
class Torch_AtenCholeskyInverseOp(IRDLOperation):
    name = "torch.aten.cholesky_inverse"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskyOp(IRDLOperation):
    name = "torch.aten.cholesky"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $upper attr-dict `:` type($self) `,` type($upper) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCholeskySolveOp(IRDLOperation):
    name = "torch.aten.cholesky_solve"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $upper attr-dict `:` type($self) `,` type($input2) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_AtenClampMaxTensorOp(IRDLOperation):
    name = "torch.aten.clamp_max.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMax_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_max_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    max = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $max attr-dict `:` type($self) `,` type($max) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMinTensorOp(IRDLOperation):
    name = "torch.aten.clamp_min.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenClampMin_TensorOp(IRDLOperation):
    name = "torch.aten.clamp_min_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    min = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $min attr-dict `:` type($self) `,` type($min) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenComplexOp(IRDLOperation):
    name = "torch.aten.complex"
    real = operand_def(BaseAttr(TensorType))
    imag = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$real `,` $imag attr-dict `:` type($real) `,` type($imag) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenConjOp(IRDLOperation):
    name = "torch.aten.conj"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysicalOp(IRDLOperation):
    name = "torch.aten.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenConjPhysical_Op(IRDLOperation):
    name = "torch.aten.conj_physical_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopyOp(IRDLOperation):
    name = "torch.aten.copy"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_FloatOp(IRDLOperation):
    name = "torch.aten.copy_.float"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_IntOp(IRDLOperation):
    name = "torch.aten.copy_.int"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopy_Op(IRDLOperation):
    name = "torch.aten.copy_"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $non_blocking attr-dict `:` type($self) `,` type($src) `,` type($non_blocking) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopy_TensorOp(IRDLOperation):
    name = "torch.aten.copy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysignFloatIntOp(IRDLOperation):
    name = "torch.aten.copysign.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignFloatOp(IRDLOperation):
    name = "torch.aten.copysign.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntFloatOp(IRDLOperation):
    name = "torch.aten.copysign.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignIntOp(IRDLOperation):
    name = "torch.aten.copysign.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenCopysignTensorOp(IRDLOperation):
    name = "torch.aten.copysign.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCopysign_TensorOp(IRDLOperation):
    name = "torch.aten.copysign_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenCosFloatOp(IRDLOperation):
    name = "torch.aten.cos.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosIntOp(IRDLOperation):
    name = "torch.aten.cos.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosOp(IRDLOperation):
    name = "torch.aten.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCos_Op(IRDLOperation):
    name = "torch.aten.cos_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshFloatOp(IRDLOperation):
    name = "torch.aten.cosh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshIntOp(IRDLOperation):
    name = "torch.aten.cosh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenCoshOp(IRDLOperation):
    name = "torch.aten.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCosh_Op(IRDLOperation):
    name = "torch.aten.cosh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenCummaxOp(IRDLOperation):
    name = "torch.aten.cummax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenCumminOp(IRDLOperation):
    name = "torch.aten.cummin"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenDeg2RadOp(IRDLOperation):
    name = "torch.aten.deg2rad"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDeg2Rad_Op(IRDLOperation):
    name = "torch.aten.deg2rad_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDenseDimOp(IRDLOperation):
    name = "torch.aten.dense_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDetachOp(IRDLOperation):
    name = "torch.aten.detach"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagEmbedOp(IRDLOperation):
    name = "torch.aten.diag_embed"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagOp(IRDLOperation):
    name = "torch.aten.diag"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalCopyOp(IRDLOperation):
    name = "torch.aten.diagonal_copy"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalOp(IRDLOperation):
    name = "torch.aten.diagonal"
    self = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDiagonalScatterOp(IRDLOperation):
    name = "torch.aten.diagonal_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    offset = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    dim2 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $offset `,` $dim1 `,` $dim2 attr-dict `:` type($self) `,` type($src) `,` type($offset) `,` type($dim1) `,` type($dim2) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigammaOp(IRDLOperation):
    name = "torch.aten.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDigamma_Op(IRDLOperation):
    name = "torch.aten.digamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDimOp(IRDLOperation):
    name = "torch.aten.dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivFloatOp(IRDLOperation):
    name = "torch.aten.div.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivIntOp(IRDLOperation):
    name = "torch.aten.div.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenDivTensorOp(IRDLOperation):
    name = "torch.aten.div.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDiv_TensorOp(IRDLOperation):
    name = "torch.aten.div_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivideTensorOp(IRDLOperation):
    name = "torch.aten.divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDivide_TensorOp(IRDLOperation):
    name = "torch.aten.divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenDotOp(IRDLOperation):
    name = "torch.aten.dot"
    self = operand_def(BaseAttr(TensorType))
    tensor = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $tensor attr-dict `:` type($self) `,` type($tensor) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingDenseBackwardOp(IRDLOperation):
    name = "torch.aten.embedding_dense_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    num_weights = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $indices `,` $num_weights `,` $padding_idx `,` $scale_grad_by_freq attr-dict `:` type($grad_output) `,` type($indices) `,` type($num_weights) `,` type($padding_idx) `,` type($scale_grad_by_freq) `->` type($result)"


@irdl_op_definition
class Torch_AtenEmbeddingOp(IRDLOperation):
    name = "torch.aten.embedding"
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    scale_grad_by_freq = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    sparse = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$weight `,` $indices `,` $padding_idx `,` $scale_grad_by_freq `,` $sparse attr-dict `:` type($weight) `,` type($indices) `,` type($padding_idx) `,` type($scale_grad_by_freq) `,` type($sparse) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqBoolOp(IRDLOperation):
    name = "torch.aten.eq.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatIntOp(IRDLOperation):
    name = "torch.aten.eq.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqFloatOp(IRDLOperation):
    name = "torch.aten.eq.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntFloatOp(IRDLOperation):
    name = "torch.aten.eq.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqIntOp(IRDLOperation):
    name = "torch.aten.eq.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenEqTensorOp(IRDLOperation):
    name = "torch.aten.eq.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenEq_TensorOp(IRDLOperation):
    name = "torch.aten.eq_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenErfFloatOp(IRDLOperation):
    name = "torch.aten.erf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfIntOp(IRDLOperation):
    name = "torch.aten.erf.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfOp(IRDLOperation):
    name = "torch.aten.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErf_Op(IRDLOperation):
    name = "torch.aten.erf_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcFloatOp(IRDLOperation):
    name = "torch.aten.erfc.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcIntOp(IRDLOperation):
    name = "torch.aten.erfc.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfcOp(IRDLOperation):
    name = "torch.aten.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfc_Op(IRDLOperation):
    name = "torch.aten.erfc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinvOp(IRDLOperation):
    name = "torch.aten.erfinv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenErfinv_Op(IRDLOperation):
    name = "torch.aten.erfinv_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2Op(IRDLOperation):
    name = "torch.aten.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp2_Op(IRDLOperation):
    name = "torch.aten.exp2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpFloatOp(IRDLOperation):
    name = "torch.aten.exp.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpIntOp(IRDLOperation):
    name = "torch.aten.exp.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpOp(IRDLOperation):
    name = "torch.aten.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExp_Op(IRDLOperation):
    name = "torch.aten.exp_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1FloatOp(IRDLOperation):
    name = "torch.aten.expm1.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1IntOp(IRDLOperation):
    name = "torch.aten.expm1.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1Op(IRDLOperation):
    name = "torch.aten.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenExpm1_Op(IRDLOperation):
    name = "torch.aten.expm1_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFillTensorOp(IRDLOperation):
    name = "torch.aten.fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFill_TensorOp(IRDLOperation):
    name = "torch.aten.fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $value attr-dict `:` type($self) `,` type($value) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFixOp(IRDLOperation):
    name = "torch.aten.fix"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFix_Op(IRDLOperation):
    name = "torch.aten.fix_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloatPower_TensorOp(IRDLOperation):
    name = "torch.aten.float_power_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorDivideOp(IRDLOperation):
    name = "torch.aten.floor_divide"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorDivide_TensorOp(IRDLOperation):
    name = "torch.aten.floor_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFloorFloatOp(IRDLOperation):
    name = "torch.aten.floor.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorIntOp(IRDLOperation):
    name = "torch.aten.floor.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloorOp(IRDLOperation):
    name = "torch.aten.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFloor_Op(IRDLOperation):
    name = "torch.aten.floor_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmaxOp(IRDLOperation):
    name = "torch.aten.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFminOp(IRDLOperation):
    name = "torch.aten.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmodFloatIntOp(IRDLOperation):
    name = "torch.aten.fmod.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodFloatOp(IRDLOperation):
    name = "torch.aten.fmod.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntFloatOp(IRDLOperation):
    name = "torch.aten.fmod.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodIntOp(IRDLOperation):
    name = "torch.aten.fmod.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenFmodTensorOp(IRDLOperation):
    name = "torch.aten.fmod.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFmod_TensorOp(IRDLOperation):
    name = "torch.aten.fmod_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenFracOp(IRDLOperation):
    name = "torch.aten.frac"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFrac_Op(IRDLOperation):
    name = "torch.aten.frac_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenFrexpOp(IRDLOperation):
    name = "torch.aten.frexp"
    a = operand_def(BaseAttr(Float64Type))
    result0 = result_def(BaseAttr(Float64Type))
    result1 = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenFrexpTensorOp(IRDLOperation):
    name = "torch.aten.frexp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_AtenGatherOp(IRDLOperation):
    name = "torch.aten.gather"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    sparse_grad = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $sparse_grad attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($sparse_grad) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdIntOp(IRDLOperation):
    name = "torch.aten.gcd.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGcdOp(IRDLOperation):
    name = "torch.aten.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGcd_Op(IRDLOperation):
    name = "torch.aten.gcd_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGeFloatIntOp(IRDLOperation):
    name = "torch.aten.ge.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeFloatOp(IRDLOperation):
    name = "torch.aten.ge.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntFloatOp(IRDLOperation):
    name = "torch.aten.ge.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeIntOp(IRDLOperation):
    name = "torch.aten.ge.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGeTensorOp(IRDLOperation):
    name = "torch.aten.ge.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGe_TensorOp(IRDLOperation):
    name = "torch.aten.ge_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.glu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluBackwardOp(IRDLOperation):
    name = "torch.aten.glu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $dim attr-dict `:` type($grad_output) `,` type($self) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenGluOp(IRDLOperation):
    name = "torch.aten.glu"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqualTensorOp(IRDLOperation):
    name = "torch.aten.greater_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterEqual_TensorOp(IRDLOperation):
    name = "torch.aten.greater_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreaterTensorOp(IRDLOperation):
    name = "torch.aten.greater.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGreater_TensorOp(IRDLOperation):
    name = "torch.aten.greater_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGridSampler2DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_2d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGridSampler3DOp(IRDLOperation):
    name = "torch.aten.grid_sampler_3d"
    input = operand_def(BaseAttr(TensorType))
    grid = operand_def(BaseAttr(TensorType))
    interpolation_mode = operand_def(BaseAttr(IntegerType))
    padding_mode = operand_def(BaseAttr(IntegerType))
    align_corners = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $grid `,` $interpolation_mode `,` $padding_mode `,` $align_corners attr-dict `:` type($input) `,` type($grid) `,` type($interpolation_mode) `,` type($padding_mode) `,` type($align_corners) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtFloatIntOp(IRDLOperation):
    name = "torch.aten.gt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtFloatOp(IRDLOperation):
    name = "torch.aten.gt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntFloatOp(IRDLOperation):
    name = "torch.aten.gt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtIntOp(IRDLOperation):
    name = "torch.aten.gt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenGtTensorOp(IRDLOperation):
    name = "torch.aten.gt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenGt_TensorOp(IRDLOperation):
    name = "torch.aten.gt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.hardsigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoidOp(IRDLOperation):
    name = "torch.aten.hardsigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardsigmoid_Op(IRDLOperation):
    name = "torch.aten.hardsigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishBackwardOp(IRDLOperation):
    name = "torch.aten.hardswish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswishOp(IRDLOperation):
    name = "torch.aten.hardswish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHardswish_Op(IRDLOperation):
    name = "torch.aten.hardswish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeavisideOp(IRDLOperation):
    name = "torch.aten.heaviside"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHeaviside_Op(IRDLOperation):
    name = "torch.aten.heaviside_"
    self = operand_def(BaseAttr(TensorType))
    values = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $values attr-dict `:` type($self) `,` type($values) `->` type($result)"


@irdl_op_definition
class Torch_AtenHingeEmbeddingLossOp(IRDLOperation):
    name = "torch.aten.hinge_embedding_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $margin `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossBackwardOp(IRDLOperation):
    name = "torch.aten.huber_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $delta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHuberLossOp(IRDLOperation):
    name = "torch.aten.huber_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    delta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $delta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($delta) `->` type($result)"


@irdl_op_definition
class Torch_AtenHypotOp(IRDLOperation):
    name = "torch.aten.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenHypot_Op(IRDLOperation):
    name = "torch.aten.hypot_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenI0Op(IRDLOperation):
    name = "torch.aten.i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenI0_Op(IRDLOperation):
    name = "torch.aten.i0_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIgammaOp(IRDLOperation):
    name = "torch.aten.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgamma_Op(IRDLOperation):
    name = "torch.aten.igamma_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammacOp(IRDLOperation):
    name = "torch.aten.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIgammac_Op(IRDLOperation):
    name = "torch.aten.igammac_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenImagOp(IRDLOperation):
    name = "torch.aten.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopyOp(IRDLOperation):
    name = "torch.aten.index_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexCopy_Op(IRDLOperation):
    name = "torch.aten.index_copy_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $source attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFillIntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexFill_IntTensorOp(IRDLOperation):
    name = "torch.aten.index_fill_.int_Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $value attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenIndexSelectOp(IRDLOperation):
    name = "torch.aten.index_select"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsCoalescedOp(IRDLOperation):
    name = "torch.aten.is_coalesced"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsComplexOp(IRDLOperation):
    name = "torch.aten.is_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousMemoryFormatOp(IRDLOperation):
    name = "torch.aten.is_contiguous.memory_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsContiguousOp(IRDLOperation):
    name = "torch.aten.is_contiguous"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsNonOverlappingAndDenseOp(IRDLOperation):
    name = "torch.aten.is_non_overlapping_and_dense"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsSameSizeOp(IRDLOperation):
    name = "torch.aten.is_same_size"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenIsStridesLikeFormatOp(IRDLOperation):
    name = "torch.aten.is_strides_like_format"
    self = operand_def(BaseAttr(TensorType))
    memory_format = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$self `,` $memory_format attr-dict `:` type($self) `,` type($memory_format) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteFloatOp(IRDLOperation):
    name = "torch.aten.isfinite.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsfiniteOp(IRDLOperation):
    name = "torch.aten.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinTensorTensorOp(IRDLOperation):
    name = "torch.aten.isin.Tensor_Tensor"
    elements = operand_def(BaseAttr(TensorType))
    test_elements = operand_def(BaseAttr(TensorType))
    assume_unique = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    invert = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$elements `,` $test_elements `,` $assume_unique `,` $invert attr-dict `:` type($elements) `,` type($test_elements) `,` type($assume_unique) `,` type($invert) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfFloatOp(IRDLOperation):
    name = "torch.aten.isinf.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsinfOp(IRDLOperation):
    name = "torch.aten.isinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanFloatOp(IRDLOperation):
    name = "torch.aten.isnan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsnanOp(IRDLOperation):
    name = "torch.aten.isnan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsneginfOp(IRDLOperation):
    name = "torch.aten.isneginf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenIsposinfOp(IRDLOperation):
    name = "torch.aten.isposinf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenKthvalueOp(IRDLOperation):
    name = "torch.aten.kthvalue"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenLcmOp(IRDLOperation):
    name = "torch.aten.lcm"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLcm_Op(IRDLOperation):
    name = "torch.aten.lcm_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLeFloatIntOp(IRDLOperation):
    name = "torch.aten.le.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeFloatOp(IRDLOperation):
    name = "torch.aten.le.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntFloatOp(IRDLOperation):
    name = "torch.aten.le.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeIntOp(IRDLOperation):
    name = "torch.aten.le.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLeTensorOp(IRDLOperation):
    name = "torch.aten.le.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLe_TensorOp(IRDLOperation):
    name = "torch.aten.le_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLerpTensorOp(IRDLOperation):
    name = "torch.aten.lerp.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLerp_TensorOp(IRDLOperation):
    name = "torch.aten.lerp_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    end = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $end `,` $weight attr-dict `:` type($self) `,` type($end) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenLessEqualTensorOp(IRDLOperation):
    name = "torch.aten.less_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessEqual_TensorOp(IRDLOperation):
    name = "torch.aten.less_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLessTensorOp(IRDLOperation):
    name = "torch.aten.less.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLess_TensorOp(IRDLOperation):
    name = "torch.aten.less_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLgammaFloatOp(IRDLOperation):
    name = "torch.aten.lgamma.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaIntOp(IRDLOperation):
    name = "torch.aten.lgamma.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgammaOp(IRDLOperation):
    name = "torch.aten.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLgamma_Op(IRDLOperation):
    name = "torch.aten.lgamma_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshCopyOp(IRDLOperation):
    name = "torch.aten.lift_fresh_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftFreshOp(IRDLOperation):
    name = "torch.aten.lift_fresh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLiftOp(IRDLOperation):
    name = "torch.aten.lift"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgCholeskyExOp(IRDLOperation):
    name = "torch.aten.linalg_cholesky_ex"
    self = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    L = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upper `,` $check_errors attr-dict `:` type($self) `,` type($upper) `,` type($check_errors) `->` type($L) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgCrossOp(IRDLOperation):
    name = "torch.aten.linalg_cross"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $dim attr-dict `:` type($self) `,` type($other) `,` type($dim) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgEigOp(IRDLOperation):
    name = "torch.aten.linalg_eig"
    self = operand_def(BaseAttr(TensorType))
    eigenvalues = result_def(BaseAttr(TensorType))
    eigenvectors = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($eigenvalues) `,` type($eigenvectors)"


@irdl_op_definition
class Torch_AtenLinalgEigvalsOp(IRDLOperation):
    name = "torch.aten.linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgHouseholderProductOp(IRDLOperation):
    name = "torch.aten.linalg_householder_product"
    input = operand_def(BaseAttr(TensorType))
    tau = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$input `,` $tau attr-dict `:` type($input) `,` type($tau) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLinalgInvExOp(IRDLOperation):
    name = "torch.aten.linalg_inv_ex"
    A = operand_def(BaseAttr(TensorType))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    inverse = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $check_errors attr-dict `:` type($A) `,` type($check_errors) `->` type($inverse) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLdlFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_factor_ex"
    self = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LD = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $hermitian `,` $check_errors attr-dict `:` type($self) `,` type($hermitian) `,` type($check_errors) `->` type($LD) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLdlSolveOp(IRDLOperation):
    name = "torch.aten.linalg_ldl_solve"
    LD = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    hermitian = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LD `,` $pivots `,` $B `,` $hermitian attr-dict `:` type($LD) `,` type($pivots) `,` type($B) `,` type($hermitian) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgLuFactorExOp(IRDLOperation):
    name = "torch.aten.linalg_lu_factor_ex"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot `,` $check_errors attr-dict `:` type($A) `,` type($pivot) `,` type($check_errors) `->` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_AtenLinalgLuOp(IRDLOperation):
    name = "torch.aten.linalg_lu"
    A = operand_def(BaseAttr(TensorType))
    pivot = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $pivot attr-dict `:` type($A) `,` type($pivot) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenLinalgLuSolveOp(IRDLOperation):
    name = "torch.aten.linalg_lu_solve"
    LU = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    adjoint = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$LU `,` $pivots `,` $B `,` $left `,` $adjoint attr-dict `:` type($LU) `,` type($pivots) `,` type($B) `,` type($left) `,` type($adjoint) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgMatrixExpOp(IRDLOperation):
    name = "torch.aten.linalg_matrix_exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLinalgSolveTriangularOp(IRDLOperation):
    name = "torch.aten.linalg_solve_triangular"
    self = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $B `,` $upper `,` $left `,` $unitriangular attr-dict `:` type($self) `,` type($B) `,` type($upper) `,` type($left) `,` type($unitriangular) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10FloatOp(IRDLOperation):
    name = "torch.aten.log10.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10IntOp(IRDLOperation):
    name = "torch.aten.log10.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10Op(IRDLOperation):
    name = "torch.aten.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog10_Op(IRDLOperation):
    name = "torch.aten.log10_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PFloatOp(IRDLOperation):
    name = "torch.aten.log1p.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1PIntOp(IRDLOperation):
    name = "torch.aten.log1p.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1POp(IRDLOperation):
    name = "torch.aten.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog1P_Op(IRDLOperation):
    name = "torch.aten.log1p_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2Op(IRDLOperation):
    name = "torch.aten.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLog2_Op(IRDLOperation):
    name = "torch.aten.log2_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatFloatOp(IRDLOperation):
    name = "torch.aten.log.float_float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatIntOp(IRDLOperation):
    name = "torch.aten.log.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogFloatOp(IRDLOperation):
    name = "torch.aten.log.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntFloatOp(IRDLOperation):
    name = "torch.aten.log.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntIntOp(IRDLOperation):
    name = "torch.aten.log.int_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogIntOp(IRDLOperation):
    name = "torch.aten.log.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogOp(IRDLOperation):
    name = "torch.aten.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    buffer = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $buffer attr-dict `:` type($grad_output) `,` type($self) `,` type($buffer) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogSigmoidForwardOp(IRDLOperation):
    name = "torch.aten.log_sigmoid_forward"
    self = operand_def(BaseAttr(TensorType))
    output = result_def(BaseAttr(TensorType))
    buffer = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($output) `,` type($buffer)"
    )


@irdl_op_definition
class Torch_AtenLog_Op(IRDLOperation):
    name = "torch.aten.log_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogaddexp2Op(IRDLOperation):
    name = "torch.aten.logaddexp2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogaddexpOp(IRDLOperation):
    name = "torch.aten.logaddexp"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogcumsumexpOp(IRDLOperation):
    name = "torch.aten.logcumsumexp"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalAndOp(IRDLOperation):
    name = "torch.aten.logical_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalAnd_Op(IRDLOperation):
    name = "torch.aten.logical_and_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalNotOp(IRDLOperation):
    name = "torch.aten.logical_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalNot_Op(IRDLOperation):
    name = "torch.aten.logical_not_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenLogicalOrOp(IRDLOperation):
    name = "torch.aten.logical_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalOr_Op(IRDLOperation):
    name = "torch.aten.logical_or_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXorOp(IRDLOperation):
    name = "torch.aten.logical_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLogicalXor_Op(IRDLOperation):
    name = "torch.aten.logical_xor_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLtFloatIntOp(IRDLOperation):
    name = "torch.aten.lt.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtFloatOp(IRDLOperation):
    name = "torch.aten.lt.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntFloatOp(IRDLOperation):
    name = "torch.aten.lt.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtIntOp(IRDLOperation):
    name = "torch.aten.lt.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenLtTensorOp(IRDLOperation):
    name = "torch.aten.lt.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLt_TensorOp(IRDLOperation):
    name = "torch.aten.lt_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenLuUnpackOp(IRDLOperation):
    name = "torch.aten.lu_unpack"
    LU_data = operand_def(BaseAttr(TensorType))
    LU_pivots = operand_def(BaseAttr(TensorType))
    unpack_data = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    unpack_pivots = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    P = result_def(BaseAttr(TensorType))
    L = result_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))

    assembly_format = "$LU_data `,` $LU_pivots `,` $unpack_data `,` $unpack_pivots attr-dict `:` type($LU_data) `,` type($LU_pivots) `,` type($unpack_data) `,` type($unpack_pivots) `->` type($P) `,` type($L) `,` type($U)"


@irdl_op_definition
class Torch_AtenMarginRankingLossOp(IRDLOperation):
    name = "torch.aten.margin_ranking_loss"
    input1 = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    margin = operand_def(BaseAttr(Float64Type))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input1 `,` $input2 `,` $target `,` $margin `,` $reduction attr-dict `:` type($input1) `,` type($input2) `,` type($target) `,` type($margin) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFillTensorOp(IRDLOperation):
    name = "torch.aten.masked_fill.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedFill_TensorOp(IRDLOperation):
    name = "torch.aten.masked_fill_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    value = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $value attr-dict `:` type($self) `,` type($mask) `,` type($value) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatterOp(IRDLOperation):
    name = "torch.aten.masked_scatter"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedScatter_Op(IRDLOperation):
    name = "torch.aten.masked_scatter_"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $source attr-dict `:` type($self) `,` type($mask) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaskedSelectOp(IRDLOperation):
    name = "torch.aten.masked_select"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mask attr-dict `:` type($self) `,` type($mask) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMatmulOp(IRDLOperation):
    name = "torch.aten.matmul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaxDimMaxOp(IRDLOperation):
    name = "torch.aten.max.dim_max"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    max = operand_def(BaseAttr(TensorType))
    max_values = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $max `,` $max_values attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($max) `,` type($max_values) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxDimOp(IRDLOperation):
    name = "torch.aten.max.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMaxOp(IRDLOperation):
    name = "torch.aten.max"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMaxOtherOp(IRDLOperation):
    name = "torch.aten.max.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMaximumOp(IRDLOperation):
    name = "torch.aten.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMedianDimOp(IRDLOperation):
    name = "torch.aten.median.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMedianOp(IRDLOperation):
    name = "torch.aten.median"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinDimMinOp(IRDLOperation):
    name = "torch.aten.min.dim_min"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    min = operand_def(BaseAttr(TensorType))
    min_indices = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim `,` $min `,` $min_indices attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `,` type($min) `,` type($min_indices) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinDimOp(IRDLOperation):
    name = "torch.aten.min.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMinOp(IRDLOperation):
    name = "torch.aten.min"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMinOtherOp(IRDLOperation):
    name = "torch.aten.min.other"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMinimumOp(IRDLOperation):
    name = "torch.aten.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMishBackwardOp(IRDLOperation):
    name = "torch.aten.mish_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMishOp(IRDLOperation):
    name = "torch.aten.mish"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMish_Op(IRDLOperation):
    name = "torch.aten.mish_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenMmOp(IRDLOperation):
    name = "torch.aten.mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenModeOp(IRDLOperation):
    name = "torch.aten.mode"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenMseLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossBackwardOp(IRDLOperation):
    name = "torch.aten.mse_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMseLossOp(IRDLOperation):
    name = "torch.aten.mse_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatIntOp(IRDLOperation):
    name = "torch.aten.mul.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulFloatOp(IRDLOperation):
    name = "torch.aten.mul.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntFloatOp(IRDLOperation):
    name = "torch.aten.mul.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulIntOp(IRDLOperation):
    name = "torch.aten.mul.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenMulTensorOp(IRDLOperation):
    name = "torch.aten.mul.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMul_TensorOp(IRDLOperation):
    name = "torch.aten.mul_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultilabelMarginLossForwardOp(IRDLOperation):
    name = "torch.aten.multilabel_margin_loss_forward"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    output = result_def(BaseAttr(TensorType))
    is_target = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($output) `,` type($is_target)"


@irdl_op_definition
class Torch_AtenMultiplyTensorOp(IRDLOperation):
    name = "torch.aten.multiply.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMultiply_TensorOp(IRDLOperation):
    name = "torch.aten.multiply_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvOp(IRDLOperation):
    name = "torch.aten.mv"
    self = operand_def(BaseAttr(TensorType))
    vec = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $vec attr-dict `:` type($self) `,` type($vec) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgammaOp(IRDLOperation):
    name = "torch.aten.mvlgamma"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenMvlgamma_Op(IRDLOperation):
    name = "torch.aten.mvlgamma_"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNanmedianDimOp(IRDLOperation):
    name = "torch.aten.nanmedian.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $keepdim attr-dict `:` type($self) `,` type($dim) `,` type($keepdim) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenNanmedianOp(IRDLOperation):
    name = "torch.aten.nanmedian"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowCopyOp(IRDLOperation):
    name = "torch.aten.narrow_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowOp(IRDLOperation):
    name = "torch.aten.narrow"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(IntegerType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNarrowTensorOp(IRDLOperation):
    name = "torch.aten.narrow.Tensor"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    start = operand_def(BaseAttr(TensorType))
    length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $start `,` $length attr-dict `:` type($self) `,` type($dim) `,` type($start) `,` type($length) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeBoolOp(IRDLOperation):
    name = "torch.aten.ne.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatIntOp(IRDLOperation):
    name = "torch.aten.ne.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeFloatOp(IRDLOperation):
    name = "torch.aten.ne.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntFloatOp(IRDLOperation):
    name = "torch.aten.ne.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeIntOp(IRDLOperation):
    name = "torch.aten.ne.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeTensorOp(IRDLOperation):
    name = "torch.aten.ne.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNe_TensorOp(IRDLOperation):
    name = "torch.aten.ne_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNegFloatOp(IRDLOperation):
    name = "torch.aten.neg.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegIntOp(IRDLOperation):
    name = "torch.aten.neg.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegOp(IRDLOperation):
    name = "torch.aten.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNeg_Op(IRDLOperation):
    name = "torch.aten.neg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegativeOp(IRDLOperation):
    name = "torch.aten.negative"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNegative_Op(IRDLOperation):
    name = "torch.aten.negative_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNextafterOp(IRDLOperation):
    name = "torch.aten.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNextafter_Op(IRDLOperation):
    name = "torch.aten.nextafter_"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNonzeroOp(IRDLOperation):
    name = "torch.aten.nonzero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenNonzeroStaticOp(IRDLOperation):
    name = "torch.aten.nonzero_static"
    self = operand_def(BaseAttr(TensorType))
    size = operand_def(BaseAttr(IntegerType))
    fill_value = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $size `,` $fill_value attr-dict `:` type($self) `,` type($size) `,` type($fill_value) `->` type($result)"


@irdl_op_definition
class Torch_AtenNotEqualTensorOp(IRDLOperation):
    name = "torch.aten.not_equal.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNotEqual_TensorOp(IRDLOperation):
    name = "torch.aten.not_equal_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenNumelOp(IRDLOperation):
    name = "torch.aten.numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenOrmqrOp(IRDLOperation):
    name = "torch.aten.ormqr"
    self = operand_def(BaseAttr(TensorType))
    input2 = operand_def(BaseAttr(TensorType))
    input3 = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $input2 `,` $input3 `,` $left `,` $transpose attr-dict `:` type($self) `,` type($input2) `,` type($input3) `,` type($left) `,` type($transpose) `->` type($result)"


@irdl_op_definition
class Torch_AtenPairwiseDistanceOp(IRDLOperation):
    name = "torch.aten.pairwise_distance"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    eps = operand_def(BaseAttr(Float64Type))
    keepdim = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x1 `,` $x2 `,` $p `,` $eps `,` $keepdim attr-dict `:` type($x1) `,` type($x2) `,` type($p) `,` type($eps) `,` type($keepdim) `->` type($result)"


@irdl_op_definition
class Torch_AtenPdistOp(IRDLOperation):
    name = "torch.aten.pdist"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPixelShuffleOp(IRDLOperation):
    name = "torch.aten.pixel_shuffle"
    self = operand_def(BaseAttr(TensorType))
    upscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $upscale_factor attr-dict `:` type($self) `,` type($upscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPixelUnshuffleOp(IRDLOperation):
    name = "torch.aten.pixel_unshuffle"
    self = operand_def(BaseAttr(TensorType))
    downscale_factor = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $downscale_factor attr-dict `:` type($self) `,` type($downscale_factor) `->` type($result)"


@irdl_op_definition
class Torch_AtenPolarOp(IRDLOperation):
    name = "torch.aten.polar"
    abs = operand_def(BaseAttr(TensorType))
    angle = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$abs `,` $angle attr-dict `:` type($abs) `,` type($angle) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPolygammaOp(IRDLOperation):
    name = "torch.aten.polygamma"
    n = operand_def(BaseAttr(IntegerType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$n `,` $self attr-dict `:` type($n) `,` type($self) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenPositiveOp(IRDLOperation):
    name = "torch.aten.positive"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatIntOp(IRDLOperation):
    name = "torch.aten.pow.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowFloatOp(IRDLOperation):
    name = "torch.aten.pow.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntFloatOp(IRDLOperation):
    name = "torch.aten.pow.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntOp(IRDLOperation):
    name = "torch.aten.pow.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowIntToIntOp(IRDLOperation):
    name = "torch.aten.pow.int_to_int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenPowTensorTensorOp(IRDLOperation):
    name = "torch.aten.pow.Tensor_Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPow_TensorOp(IRDLOperation):
    name = "torch.aten.pow_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    exponent = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $exponent attr-dict `:` type($self) `,` type($exponent) `->` type($result)"


@irdl_op_definition
class Torch_AtenPreluOp(IRDLOperation):
    name = "torch.aten.prelu"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_AtenRad2DegOp(IRDLOperation):
    name = "torch.aten.rad2deg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRad2Deg_Op(IRDLOperation):
    name = "torch.aten.rad2deg_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRealOp(IRDLOperation):
    name = "torch.aten.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocalOp(IRDLOperation):
    name = "torch.aten.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReciprocal_Op(IRDLOperation):
    name = "torch.aten.reciprocal_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu6Op(IRDLOperation):
    name = "torch.aten.relu6"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenReluOp(IRDLOperation):
    name = "torch.aten.relu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRelu_Op(IRDLOperation):
    name = "torch.aten.relu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatIntOp(IRDLOperation):
    name = "torch.aten.remainder.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderFloatOp(IRDLOperation):
    name = "torch.aten.remainder.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntFloatOp(IRDLOperation):
    name = "torch.aten.remainder.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderIntOp(IRDLOperation):
    name = "torch.aten.remainder.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenRemainderTensorOp(IRDLOperation):
    name = "torch.aten.remainder.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRemainder_TensorOp(IRDLOperation):
    name = "torch.aten.remainder_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenRoundDecimalsOp(IRDLOperation):
    name = "torch.aten.round.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundFloatOp(IRDLOperation):
    name = "torch.aten.round.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundIntOp(IRDLOperation):
    name = "torch.aten.round.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenRoundOp(IRDLOperation):
    name = "torch.aten.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_DecimalsOp(IRDLOperation):
    name = "torch.aten.round_.decimals"
    self = operand_def(BaseAttr(TensorType))
    decimals = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $decimals attr-dict `:` type($self) `,` type($decimals) `->` type($result)"


@irdl_op_definition
class Torch_AtenRound_Op(IRDLOperation):
    name = "torch.aten.round_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrtOp(IRDLOperation):
    name = "torch.aten.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenRsqrt_Op(IRDLOperation):
    name = "torch.aten.rsqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAddOp(IRDLOperation):
    name = "torch.aten.scatter_add"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterAdd_Op(IRDLOperation):
    name = "torch.aten.scatter_add_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatterSrcOp(IRDLOperation):
    name = "torch.aten.scatter.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenScatter_SrcOp(IRDLOperation):
    name = "torch.aten.scatter_.src"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index `,` $src attr-dict `:` type($self) `,` type($dim) `,` type($index) `,` type($src) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectIntOp(IRDLOperation):
    name = "torch.aten.select.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $index attr-dict `:` type($self) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelectScatterOp(IRDLOperation):
    name = "torch.aten.select_scatter"
    self = operand_def(BaseAttr(TensorType))
    src = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    index = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $src `,` $dim `,` $index attr-dict `:` type($self) `,` type($src) `,` type($dim) `,` type($index) `->` type($result)"


@irdl_op_definition
class Torch_AtenSeluOp(IRDLOperation):
    name = "torch.aten.selu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSelu_Op(IRDLOperation):
    name = "torch.aten.selu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_Op(IRDLOperation):
    name = "torch.aten.set_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSet_SourceTensorOp(IRDLOperation):
    name = "torch.aten.set_.source_Tensor"
    self = operand_def(BaseAttr(TensorType))
    source = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $source attr-dict `:` type($self) `,` type($source) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgnOp(IRDLOperation):
    name = "torch.aten.sgn"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSgn_Op(IRDLOperation):
    name = "torch.aten.sgn_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidBackwardOp(IRDLOperation):
    name = "torch.aten.sigmoid_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoidOp(IRDLOperation):
    name = "torch.aten.sigmoid"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSigmoid_Op(IRDLOperation):
    name = "torch.aten.sigmoid_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignOp(IRDLOperation):
    name = "torch.aten.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSign_Op(IRDLOperation):
    name = "torch.aten.sign_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSignbitOp(IRDLOperation):
    name = "torch.aten.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.silu_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluBackwardOp(IRDLOperation):
    name = "torch.aten.silu_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSiluOp(IRDLOperation):
    name = "torch.aten.silu"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSilu_Op(IRDLOperation):
    name = "torch.aten.silu_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinFloatOp(IRDLOperation):
    name = "torch.aten.sin.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinIntOp(IRDLOperation):
    name = "torch.aten.sin.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinOp(IRDLOperation):
    name = "torch.aten.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSin_Op(IRDLOperation):
    name = "torch.aten.sin_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSincOp(IRDLOperation):
    name = "torch.aten.sinc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinc_Op(IRDLOperation):
    name = "torch.aten.sinc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhFloatOp(IRDLOperation):
    name = "torch.aten.sinh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhIntOp(IRDLOperation):
    name = "torch.aten.sinh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinhOp(IRDLOperation):
    name = "torch.aten.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSinh_Op(IRDLOperation):
    name = "torch.aten.sinh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSizeIntOp(IRDLOperation):
    name = "torch.aten.size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossBackwardOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $beta attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSmoothL1LossOp(IRDLOperation):
    name = "torch.aten.smooth_l1_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    beta = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction `,` $beta attr-dict `:` type($self) `,` type($target) `,` type($reduction) `,` type($beta) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction `,` $grad_input attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossBackwardOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $target `,` $reduction attr-dict `:` type($grad_output) `,` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSoftMarginLossOp(IRDLOperation):
    name = "torch.aten.soft_margin_loss"
    self = operand_def(BaseAttr(TensorType))
    target = operand_def(BaseAttr(TensorType))
    reduction = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $target `,` $reduction attr-dict `:` type($self) `,` type($target) `,` type($reduction) `->` type($result)"


@irdl_op_definition
class Torch_AtenSortOp(IRDLOperation):
    name = "torch.aten.sort"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending attr-dict `:` type($self) `,` type($dim) `,` type($descending) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSortValuesOp(IRDLOperation):
    name = "torch.aten.sort.values"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    descending = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $descending `,` $values `,` $indices attr-dict `:` type($self) `,` type($dim) `,` type($descending) `,` type($values) `,` type($indices) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenSparseDimOp(IRDLOperation):
    name = "torch.aten.sparse_dim"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialAiryAiOp(IRDLOperation):
    name = "torch.aten.special_airy_ai"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselJ1Op(IRDLOperation):
    name = "torch.aten.special_bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY0Op(IRDLOperation):
    name = "torch.aten.special_bessel_y0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialBesselY1Op(IRDLOperation):
    name = "torch.aten.special_bessel_y1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialEntrOp(IRDLOperation):
    name = "torch.aten.special_entr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialErfcxOp(IRDLOperation):
    name = "torch.aten.special_erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_h"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialHermitePolynomialHeOp(IRDLOperation):
    name = "torch.aten.special_hermite_polynomial_he"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI0EOp(IRDLOperation):
    name = "torch.aten.special_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1EOp(IRDLOperation):
    name = "torch.aten.special_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialI1Op(IRDLOperation):
    name = "torch.aten.special_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLaguerrePolynomialLOp(IRDLOperation):
    name = "torch.aten.special_laguerre_polynomial_l"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLegendrePolynomialPOp(IRDLOperation):
    name = "torch.aten.special_legendre_polynomial_p"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialLogNdtrOp(IRDLOperation):
    name = "torch.aten.special_log_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselI1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_modified_bessel_k1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialNdtrOp(IRDLOperation):
    name = "torch.aten.special_ndtr"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialNdtriOp(IRDLOperation):
    name = "torch.aten.special_ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK0Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialScaledModifiedBesselK1Op(IRDLOperation):
    name = "torch.aten.special_scaled_modified_bessel_k1"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialTOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_t"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialUOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_u"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialVOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_v"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialShiftedChebyshevPolynomialWOp(IRDLOperation):
    name = "torch.aten.special_shifted_chebyshev_polynomial_w"
    x = operand_def(BaseAttr(TensorType))
    n = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x `,` $n attr-dict `:` type($x) `,` type($n) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialSphericalBesselJ0Op(IRDLOperation):
    name = "torch.aten.special_spherical_bessel_j0"
    x = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$x attr-dict `:` type($x) `->` type($result)"


@irdl_op_definition
class Torch_AtenSpecialXlog1PyOp(IRDLOperation):
    name = "torch.aten.special_xlog1py"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSpecialZetaOp(IRDLOperation):
    name = "torch.aten.special_zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqrtFloatOp(IRDLOperation):
    name = "torch.aten.sqrt.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtIntOp(IRDLOperation):
    name = "torch.aten.sqrt.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrtOp(IRDLOperation):
    name = "torch.aten.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqrt_Op(IRDLOperation):
    name = "torch.aten.sqrt_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquareOp(IRDLOperation):
    name = "torch.aten.square"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSquare_Op(IRDLOperation):
    name = "torch.aten.square_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeCopyDimOp(IRDLOperation):
    name = "torch.aten.squeeze_copy.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeCopyOp(IRDLOperation):
    name = "torch.aten.squeeze_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSqueezeDimOp(IRDLOperation):
    name = "torch.aten.squeeze.dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSqueezeOp(IRDLOperation):
    name = "torch.aten.squeeze"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenStdMeanOp(IRDLOperation):
    name = "torch.aten.std_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenStdOp(IRDLOperation):
    name = "torch.aten.std"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenStorageOffsetOp(IRDLOperation):
    name = "torch.aten.storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenStrideIntOp(IRDLOperation):
    name = "torch.aten.stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSubFloatIntOp(IRDLOperation):
    name = "torch.aten.sub.float_int"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubFloatOp(IRDLOperation):
    name = "torch.aten.sub.float"
    a = operand_def(BaseAttr(Float64Type))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntFloatOp(IRDLOperation):
    name = "torch.aten.sub.int_float"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSubIntOp(IRDLOperation):
    name = "torch.aten.sub.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_AtenSvdOp(IRDLOperation):
    name = "torch.aten.svd"
    self = operand_def(BaseAttr(TensorType))
    some = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    compute_uv = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    V = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $some `,` $compute_uv attr-dict `:` type($self) `,` type($some) `,` type($compute_uv) `->` type($U) `,` type($S) `,` type($V)"


@irdl_op_definition
class Torch_AtenSvdUOp(IRDLOperation):
    name = "torch.aten.svd.U"
    self = operand_def(BaseAttr(TensorType))
    some = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    compute_uv = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    U = operand_def(BaseAttr(TensorType))
    S = operand_def(BaseAttr(TensorType))
    V = operand_def(BaseAttr(TensorType))
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    V = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $some `,` $compute_uv `,` $U `,` $S `,` $V attr-dict `:` type($self) `,` type($some) `,` type($compute_uv) `,` type($U) `,` type($S) `,` type($V) `->` type($U) `,` type($S) `,` type($V)"


@irdl_op_definition
class Torch_AtenSymNumelOp(IRDLOperation):
    name = "torch.aten.sym_numel"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymSizeIntOp(IRDLOperation):
    name = "torch.aten.sym_size.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenSymStorageOffsetOp(IRDLOperation):
    name = "torch.aten.sym_storage_offset"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenSymStrideIntOp(IRDLOperation):
    name = "torch.aten.sym_stride.int"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTCopyOp(IRDLOperation):
    name = "torch.aten.t_copy"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTOp(IRDLOperation):
    name = "torch.aten.t"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenT_Op(IRDLOperation):
    name = "torch.aten.t_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTakeOp(IRDLOperation):
    name = "torch.aten.take"
    self = operand_def(BaseAttr(TensorType))
    index = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $index attr-dict `:` type($self) `,` type($index) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTanFloatOp(IRDLOperation):
    name = "torch.aten.tan.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanIntOp(IRDLOperation):
    name = "torch.aten.tan.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanOp(IRDLOperation):
    name = "torch.aten.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTan_Op(IRDLOperation):
    name = "torch.aten.tan_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardGradInputOp(IRDLOperation):
    name = "torch.aten.tanh_backward.grad_input"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    grad_input = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $grad_input attr-dict `:` type($grad_output) `,` type($output) `,` type($grad_input) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhBackwardOp(IRDLOperation):
    name = "torch.aten.tanh_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output attr-dict `:` type($grad_output) `,` type($output) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhFloatOp(IRDLOperation):
    name = "torch.aten.tanh.float"
    a = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhIntOp(IRDLOperation):
    name = "torch.aten.tanh.int"
    a = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(Float64Type))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanhOp(IRDLOperation):
    name = "torch.aten.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTanh_Op(IRDLOperation):
    name = "torch.aten.tanh_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenToPrimOtherOp(IRDLOperation):
    name = "torch.aten.to.prim_other"
    self = operand_def(BaseAttr(TensorType))
    non_blocking = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    copy = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $non_blocking `,` $copy attr-dict `:` type($self) `,` type($non_blocking) `,` type($copy) `->` type($result)"


@irdl_op_definition
class Torch_AtenTopkOp(IRDLOperation):
    name = "torch.aten.topk"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTopkValuesOp(IRDLOperation):
    name = "torch.aten.topk.values"
    self = operand_def(BaseAttr(TensorType))
    k = operand_def(BaseAttr(IntegerType))
    dim = operand_def(BaseAttr(IntegerType))
    largest = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    values = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    values = result_def(BaseAttr(TensorType))
    indices = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $k `,` $dim `,` $largest `,` $sorted `,` $values `,` $indices attr-dict `:` type($self) `,` type($k) `,` type($dim) `,` type($largest) `,` type($sorted) `,` type($values) `,` type($indices) `->` type($values) `,` type($indices)"


@irdl_op_definition
class Torch_AtenTraceOp(IRDLOperation):
    name = "torch.aten.trace"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeCopyIntOp(IRDLOperation):
    name = "torch.aten.transpose_copy.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTransposeIntOp(IRDLOperation):
    name = "torch.aten.transpose.int"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTranspose_Op(IRDLOperation):
    name = "torch.aten.transpose_"
    self = operand_def(BaseAttr(TensorType))
    dim0 = operand_def(BaseAttr(IntegerType))
    dim1 = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim0 `,` $dim1 attr-dict `:` type($self) `,` type($dim0) `,` type($dim1) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriangularSolveOp(IRDLOperation):
    name = "torch.aten.triangular_solve"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTriangularSolveXOp(IRDLOperation):
    name = "torch.aten.triangular_solve.X"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    transpose = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    unitriangular = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    X = operand_def(BaseAttr(TensorType))
    M = operand_def(BaseAttr(TensorType))
    solution = result_def(BaseAttr(TensorType))
    cloned_coefficient = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper `,` $transpose `,` $unitriangular `,` $X `,` $M attr-dict `:` type($self) `,` type($A) `,` type($upper) `,` type($transpose) `,` type($unitriangular) `,` type($X) `,` type($M) `->` type($solution) `,` type($cloned_coefficient)"


@irdl_op_definition
class Torch_AtenTrilOp(IRDLOperation):
    name = "torch.aten.tril"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTril_Op(IRDLOperation):
    name = "torch.aten.tril_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriuOp(IRDLOperation):
    name = "torch.aten.triu"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTriu_Op(IRDLOperation):
    name = "torch.aten.triu_"
    self = operand_def(BaseAttr(TensorType))
    diagonal = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $diagonal attr-dict `:` type($self) `,` type($diagonal) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrueDivideTensorOp(IRDLOperation):
    name = "torch.aten.true_divide.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTrueDivide_TensorOp(IRDLOperation):
    name = "torch.aten.true_divide_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenTruncOp(IRDLOperation):
    name = "torch.aten.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenTrunc_Op(IRDLOperation):
    name = "torch.aten.trunc_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldCopyOp(IRDLOperation):
    name = "torch.aten.unfold_copy"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUnfoldOp(IRDLOperation):
    name = "torch.aten.unfold"
    self = operand_def(BaseAttr(TensorType))
    dimension = operand_def(BaseAttr(IntegerType))
    size = operand_def(BaseAttr(IntegerType))
    step = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dimension `,` $size `,` $step attr-dict `:` type($self) `,` type($dimension) `,` type($size) `,` type($step) `->` type($result)"


@irdl_op_definition
class Torch_AtenUniqueDimOp(IRDLOperation):
    name = "torch.aten.unique_dim"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($dim) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_AtenUnsqueezeCopyOp(IRDLOperation):
    name = "torch.aten.unsqueeze_copy"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueezeOp(IRDLOperation):
    name = "torch.aten.unsqueeze"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenUnsqueeze_Op(IRDLOperation):
    name = "torch.aten.unsqueeze_"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dim attr-dict `:` type($self) `,` type($dim) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenVarMeanOp(IRDLOperation):
    name = "torch.aten.var_mean"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_AtenVarOp(IRDLOperation):
    name = "torch.aten.var"
    self = operand_def(BaseAttr(TensorType))
    unbiased = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $unbiased attr-dict `:` type($self) `,` type($unbiased) `->` type($result)"


@irdl_op_definition
class Torch_AtenVdotOp(IRDLOperation):
    name = "torch.aten.vdot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewAsComplexOp(IRDLOperation):
    name = "torch.aten.view_as_complex"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewAsRealOp(IRDLOperation):
    name = "torch.aten.view_as_real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenViewCopyDtypeOp(IRDLOperation):
    name = "torch.aten.view_copy.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenViewDtypeOp(IRDLOperation):
    name = "torch.aten.view.dtype"
    self = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $dtype attr-dict `:` type($self) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenWhereSelfOp(IRDLOperation):
    name = "torch.aten.where.self"
    condition = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$condition `,` $self `,` $other attr-dict `:` type($condition) `,` type($self) `,` type($other) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyOuttensorOp(IRDLOperation):
    name = "torch.aten.xlogy.OutTensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    out = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $other `,` $out attr-dict `:` type($self) `,` type($other) `,` type($out) `->` type($result)"


@irdl_op_definition
class Torch_AtenXlogyTensorOp(IRDLOperation):
    name = "torch.aten.xlogy.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenXlogy_TensorOp(IRDLOperation):
    name = "torch.aten.xlogy_.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_AtenZeroOp(IRDLOperation):
    name = "torch.aten.zero"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_AtenZero_Op(IRDLOperation):
    name = "torch.aten.zero_"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool2DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool2d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_AdaptiveAvgPool3DBackwardOp(IRDLOperation):
    name = "torch.aten._adaptive_avg_pool3d_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self attr-dict `:` type($grad_output) `,` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_BoolOp(IRDLOperation):
    name = "torch.aten.__and__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_IntOp(IRDLOperation):
    name = "torch.aten.__and__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_And_TensorOp(IRDLOperation):
    name = "torch.aten.__and__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_AssertAsyncOp(IRDLOperation):
    name = "torch.aten._assert_async"
    self = operand_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self)"


@irdl_op_definition
class Torch_Aten_CdistBackwardOp(IRDLOperation):
    name = "torch.aten._cdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    cdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $x1 `,` $x2 `,` $p `,` $cdist attr-dict `:` type($grad) `,` type($x1) `,` type($x2) `,` type($p) `,` type($cdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_CholeskySolveHelperOp(IRDLOperation):
    name = "torch.aten._cholesky_solve_helper"
    self = operand_def(BaseAttr(TensorType))
    A = operand_def(BaseAttr(TensorType))
    upper = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $A `,` $upper attr-dict `:` type($self) `,` type($A) `,` type($upper) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackForCpuOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_ConvertWeightToInt4PackOp(IRDLOperation):
    name = "torch.aten._convert_weight_to_int4pack"
    self = operand_def(BaseAttr(TensorType))
    innerKTiles = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $innerKTiles attr-dict `:` type($self) `,` type($innerKTiles) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp(IRDLOperation):
    name = "torch.aten._embedding_bag_per_sample_weights_backward"
    grad = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    indices = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    offset2bag = operand_def(BaseAttr(TensorType))
    mode = operand_def(BaseAttr(IntegerType))
    padding_idx = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $weight `,` $indices `,` $offsets `,` $offset2bag `,` $mode `,` $padding_idx attr-dict `:` type($grad) `,` type($weight) `,` type($indices) `,` type($offsets) `,` type($offset2bag) `,` type($mode) `,` type($padding_idx) `->` type($result)"


@irdl_op_definition
class Torch_Aten_EuclideanDistOp(IRDLOperation):
    name = "torch.aten._euclidean_dist"
    x1 = operand_def(BaseAttr(TensorType))
    x2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$x1 `,` $x2 attr-dict `:` type($x1) `,` type($x2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_FusedMovingAvgObsFqHelperOp(IRDLOperation):
    name = "torch.aten._fused_moving_avg_obs_fq_helper"
    self = operand_def(BaseAttr(TensorType))
    observer_on = operand_def(BaseAttr(TensorType))
    fake_quant_on = operand_def(BaseAttr(TensorType))
    running_min = operand_def(BaseAttr(TensorType))
    running_max = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(TensorType))
    zero_point = operand_def(BaseAttr(TensorType))
    averaging_const = operand_def(BaseAttr(Float64Type))
    quant_min = operand_def(BaseAttr(IntegerType))
    quant_max = operand_def(BaseAttr(IntegerType))
    ch_axis = operand_def(BaseAttr(IntegerType))
    per_row_fake_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    symmetric_quant = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    output = result_def(BaseAttr(TensorType))
    mask = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $observer_on `,` $fake_quant_on `,` $running_min `,` $running_max `,` $scale `,` $zero_point `,` $averaging_const `,` $quant_min `,` $quant_max `,` $ch_axis `,` $per_row_fake_quant `,` $symmetric_quant attr-dict `:` type($self) `,` type($observer_on) `,` type($fake_quant_on) `,` type($running_min) `,` type($running_max) `,` type($scale) `,` type($zero_point) `,` type($averaging_const) `,` type($quant_min) `,` type($quant_max) `,` type($ch_axis) `,` type($per_row_fake_quant) `,` type($symmetric_quant) `->` type($output) `,` type($mask)"


@irdl_op_definition
class Torch_Aten_Iand_TensorOp(IRDLOperation):
    name = "torch.aten.__iand__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ilshift_TensorOp(IRDLOperation):
    name = "torch.aten.__ilshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_IntMmOp(IRDLOperation):
    name = "torch.aten._int_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $mat2 attr-dict `:` type($self) `,` type($mat2) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ior_TensorOp(IRDLOperation):
    name = "torch.aten.__ior__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Irshift_TensorOp(IRDLOperation):
    name = "torch.aten.__irshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_Ixor_TensorOp(IRDLOperation):
    name = "torch.aten.__ixor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_LinalgDetOp(IRDLOperation):
    name = "torch.aten._linalg_det"
    A = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$A attr-dict `:` type($A) `->` type($result) `,` type($LU) `,` type($pivots)"
    )


@irdl_op_definition
class Torch_Aten_LinalgEigvalsOp(IRDLOperation):
    name = "torch.aten._linalg_eigvals"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LinalgSlogdetOp(IRDLOperation):
    name = "torch.aten._linalg_slogdet"
    A = operand_def(BaseAttr(TensorType))
    sign = result_def(BaseAttr(TensorType))
    logabsdet = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))

    assembly_format = "$A attr-dict `:` type($A) `->` type($sign) `,` type($logabsdet) `,` type($LU) `,` type($pivots)"


@irdl_op_definition
class Torch_Aten_LinalgSolveExOp(IRDLOperation):
    name = "torch.aten._linalg_solve_ex"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left `,` $check_errors attr-dict `:` type($A) `,` type($B) `,` type($left) `,` type($check_errors) `->` type($result) `,` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_Aten_LinalgSolveExResultOp(IRDLOperation):
    name = "torch.aten._linalg_solve_ex.result"
    A = operand_def(BaseAttr(TensorType))
    B = operand_def(BaseAttr(TensorType))
    left = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    check_errors = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = operand_def(BaseAttr(TensorType))
    LU = operand_def(BaseAttr(TensorType))
    pivots = operand_def(BaseAttr(TensorType))
    info = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))
    LU = result_def(BaseAttr(TensorType))
    pivots = result_def(BaseAttr(TensorType))
    info = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $B `,` $left `,` $check_errors `,` $result `,` $LU `,` $pivots `,` $info attr-dict `:` type($A) `,` type($B) `,` type($left) `,` type($check_errors) `,` type($result) `,` type($LU) `,` type($pivots) `,` type($info) `->` type($result) `,` type($LU) `,` type($pivots) `,` type($info)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._log_softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_LogSoftmaxOp(IRDLOperation):
    name = "torch.aten._log_softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_IntOp(IRDLOperation):
    name = "torch.aten.__lshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Lshift_TensorOp(IRDLOperation):
    name = "torch.aten.__lshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_MaskedScaleOp(IRDLOperation):
    name = "torch.aten._masked_scale"
    self = operand_def(BaseAttr(TensorType))
    mask = operand_def(BaseAttr(TensorType))
    scale = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mask `,` $scale attr-dict `:` type($self) `,` type($mask) `,` type($scale) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferCopyOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer_copy"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_NestedViewFromBufferOp(IRDLOperation):
    name = "torch.aten._nested_view_from_buffer"
    self = operand_def(BaseAttr(TensorType))
    nested_size = operand_def(BaseAttr(TensorType))
    nested_strides = operand_def(BaseAttr(TensorType))
    offsets = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $nested_size `,` $nested_strides `,` $offsets attr-dict `:` type($self) `,` type($nested_size) `,` type($nested_strides) `,` type($offsets) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_BoolOp(IRDLOperation):
    name = "torch.aten.__or__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_IntOp(IRDLOperation):
    name = "torch.aten.__or__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Or_TensorOp(IRDLOperation):
    name = "torch.aten.__or__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PackPaddedSequenceOp(IRDLOperation):
    name = "torch.aten._pack_padded_sequence"
    input = operand_def(BaseAttr(TensorType))
    lengths = operand_def(BaseAttr(TensorType))
    batch_first = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $lengths `,` $batch_first attr-dict `:` type($input) `,` type($lengths) `,` type($batch_first) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PdistBackwardOp(IRDLOperation):
    name = "torch.aten._pdist_backward"
    grad = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    pdist = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad `,` $self `,` $p `,` $pdist attr-dict `:` type($grad) `,` type($self) `,` type($p) `,` type($pdist) `->` type($result)"


@irdl_op_definition
class Torch_Aten_PdistForwardOp(IRDLOperation):
    name = "torch.aten._pdist_forward"
    self = operand_def(BaseAttr(TensorType))
    p = operand_def(BaseAttr(Float64Type))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $p attr-dict `:` type($self) `,` type($p) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_PreluKernelBackwardOp(IRDLOperation):
    name = "torch.aten._prelu_kernel_backward"
    grad_output = operand_def(BaseAttr(TensorType))
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $self `,` $weight attr-dict `:` type($grad_output) `,` type($self) `,` type($weight) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_PreluKernelOp(IRDLOperation):
    name = "torch.aten._prelu_kernel"
    self = operand_def(BaseAttr(TensorType))
    weight = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $weight attr-dict `:` type($self) `,` type($weight) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_IntOp(IRDLOperation):
    name = "torch.aten.__rshift__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Rshift_TensorOp(IRDLOperation):
    name = "torch.aten.__rshift__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Aten_SoftmaxBackwardDataOp(IRDLOperation):
    name = "torch.aten._softmax_backward_data"
    grad_output = operand_def(BaseAttr(TensorType))
    output = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    input_dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$grad_output `,` $output `,` $dim `,` $input_dtype attr-dict `:` type($grad_output) `,` type($output) `,` type($dim) `,` type($input_dtype) `->` type($result)"


@irdl_op_definition
class Torch_Aten_SoftmaxOp(IRDLOperation):
    name = "torch.aten._softmax"
    self = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    half_to_float = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $dim `,` $half_to_float attr-dict `:` type($self) `,` type($dim) `,` type($half_to_float) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Unique2Op(IRDLOperation):
    name = "torch.aten._unique2"
    self = operand_def(BaseAttr(TensorType))
    sorted = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    return_inverse = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    return_counts = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))
    result2 = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $sorted `,` $return_inverse `,` $return_counts attr-dict `:` type($self) `,` type($sorted) `,` type($return_inverse) `,` type($return_counts) `->` type($result0) `,` type($result1) `,` type($result2)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmForCpuOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm_for_cpu"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt4PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int4pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    qGroupSize = operand_def(BaseAttr(IntegerType))
    qScaleAndZeros = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $qGroupSize `,` $qScaleAndZeros attr-dict `:` type($self) `,` type($mat2) `,` type($qGroupSize) `,` type($qScaleAndZeros) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightInt8PackMmOp(IRDLOperation):
    name = "torch.aten._weight_int8pack_mm"
    self = operand_def(BaseAttr(TensorType))
    mat2 = operand_def(BaseAttr(TensorType))
    scales = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self `,` $mat2 `,` $scales attr-dict `:` type($self) `,` type($mat2) `,` type($scales) `->` type($result)"


@irdl_op_definition
class Torch_Aten_WeightNormInterfaceOp(IRDLOperation):
    name = "torch.aten._weight_norm_interface"
    v = operand_def(BaseAttr(TensorType))
    g = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    result0 = result_def(BaseAttr(TensorType))
    result1 = result_def(BaseAttr(TensorType))

    assembly_format = "$v `,` $g `,` $dim attr-dict `:` type($v) `,` type($g) `,` type($dim) `->` type($result0) `,` type($result1)"


@irdl_op_definition
class Torch_Aten_Xor_BoolOp(IRDLOperation):
    name = "torch.aten.__xor__.bool"
    a = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    b = operand_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))
    result = result_def(EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED)))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_IntOp(IRDLOperation):
    name = "torch.aten.__xor__.int"
    a = operand_def(BaseAttr(IntegerType))
    b = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(IntegerType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_Aten_Xor_TensorOp(IRDLOperation):
    name = "torch.aten.__xor__.Tensor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_InductorAccumulateGrad_Op(IRDLOperation):
    name = "torch.inductor.accumulate_grad_"
    variable = operand_def(BaseAttr(TensorType))
    new_grad = operand_def(BaseAttr(TensorType))

    assembly_format = (
        "$variable `,` $new_grad attr-dict `:` type($variable) `,` type($new_grad)"
    )


@irdl_op_definition
class Torch_InductorResizeStorageBytes_Op(IRDLOperation):
    name = "torch.inductor.resize_storage_bytes_"
    variable = operand_def(BaseAttr(TensorType))
    new_size = operand_def(BaseAttr(IntegerType))

    assembly_format = (
        "$variable `,` $new_size attr-dict `:` type($variable) `,` type($new_size)"
    )


@irdl_op_definition
class Torch_PrimsAbsOp(IRDLOperation):
    name = "torch.prims.abs"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcosOp(IRDLOperation):
    name = "torch.prims.acos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAcoshOp(IRDLOperation):
    name = "torch.prims.acosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAddOp(IRDLOperation):
    name = "torch.prims.add"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAsinOp(IRDLOperation):
    name = "torch.prims.asin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAsinhOp(IRDLOperation):
    name = "torch.prims.asinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtan2Op(IRDLOperation):
    name = "torch.prims.atan2"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsAtanOp(IRDLOperation):
    name = "torch.prims.atan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsAtanhOp(IRDLOperation):
    name = "torch.prims.atanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0EOp(IRDLOperation):
    name = "torch.prims.bessel_i0e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI0Op(IRDLOperation):
    name = "torch.prims.bessel_i0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1EOp(IRDLOperation):
    name = "torch.prims.bessel_i1e"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselI1Op(IRDLOperation):
    name = "torch.prims.bessel_i1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ0Op(IRDLOperation):
    name = "torch.prims.bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBesselJ1Op(IRDLOperation):
    name = "torch.prims.bessel_j1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseAndOp(IRDLOperation):
    name = "torch.prims.bitwise_and"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseNotOp(IRDLOperation):
    name = "torch.prims.bitwise_not"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsBitwiseOrOp(IRDLOperation):
    name = "torch.prims.bitwise_or"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsBitwiseXorOp(IRDLOperation):
    name = "torch.prims.bitwise_xor"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCbrtOp(IRDLOperation):
    name = "torch.prims.cbrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCeilOp(IRDLOperation):
    name = "torch.prims.ceil"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseOp(IRDLOperation):
    name = "torch.prims.collapse"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCollapseViewOp(IRDLOperation):
    name = "torch.prims.collapse_view"
    a = operand_def(BaseAttr(TensorType))
    start = operand_def(BaseAttr(IntegerType))
    end = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $start `,` $end attr-dict `:` type($a) `,` type($start) `,` type($end) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjOp(IRDLOperation):
    name = "torch.prims.conj"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConjPhysicalOp(IRDLOperation):
    name = "torch.prims.conj_physical"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsConvertElementTypeOp(IRDLOperation):
    name = "torch.prims.convert_element_type"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsCopyToOp(IRDLOperation):
    name = "torch.prims.copy_to"
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $b attr-dict `:` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCosOp(IRDLOperation):
    name = "torch.prims.cos"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsCoshOp(IRDLOperation):
    name = "torch.prims.cosh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDigammaOp(IRDLOperation):
    name = "torch.prims.digamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsDivOp(IRDLOperation):
    name = "torch.prims.div"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsEqOp(IRDLOperation):
    name = "torch.prims.eq"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsErfInvOp(IRDLOperation):
    name = "torch.prims.erf_inv"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfOp(IRDLOperation):
    name = "torch.prims.erf"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcOp(IRDLOperation):
    name = "torch.prims.erfc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsErfcxOp(IRDLOperation):
    name = "torch.prims.erfcx"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExp2Op(IRDLOperation):
    name = "torch.prims.exp2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpOp(IRDLOperation):
    name = "torch.prims.exp"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsExpm1Op(IRDLOperation):
    name = "torch.prims.expm1"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFloorOp(IRDLOperation):
    name = "torch.prims.floor"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsFmaxOp(IRDLOperation):
    name = "torch.prims.fmax"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFminOp(IRDLOperation):
    name = "torch.prims.fmin"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFmodOp(IRDLOperation):
    name = "torch.prims.fmod"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsFrexpOp(IRDLOperation):
    name = "torch.prims.frexp"
    self = operand_def(BaseAttr(TensorType))
    mantissa = result_def(BaseAttr(TensorType))
    exponent = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self attr-dict `:` type($self) `->` type($mantissa) `,` type($exponent)"
    )


@irdl_op_definition
class Torch_PrimsGcdOp(IRDLOperation):
    name = "torch.prims.gcd"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGeOp(IRDLOperation):
    name = "torch.prims.ge"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsGtOp(IRDLOperation):
    name = "torch.prims.gt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsHypotOp(IRDLOperation):
    name = "torch.prims.hypot"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammaOp(IRDLOperation):
    name = "torch.prims.igamma"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsIgammacOp(IRDLOperation):
    name = "torch.prims.igammac"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsImagOp(IRDLOperation):
    name = "torch.prims.imag"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsIsfiniteOp(IRDLOperation):
    name = "torch.prims.isfinite"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLeOp(IRDLOperation):
    name = "torch.prims.le"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsLgammaOp(IRDLOperation):
    name = "torch.prims.lgamma"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog10Op(IRDLOperation):
    name = "torch.prims.log10"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog1POp(IRDLOperation):
    name = "torch.prims.log1p"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLog2Op(IRDLOperation):
    name = "torch.prims.log2"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLogOp(IRDLOperation):
    name = "torch.prims.log"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsLtOp(IRDLOperation):
    name = "torch.prims.lt"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMaximumOp(IRDLOperation):
    name = "torch.prims.maximum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMinimumOp(IRDLOperation):
    name = "torch.prims.minimum"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsMulOp(IRDLOperation):
    name = "torch.prims.mul"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNdtriOp(IRDLOperation):
    name = "torch.prims.ndtri"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNeOp(IRDLOperation):
    name = "torch.prims.ne"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsNegOp(IRDLOperation):
    name = "torch.prims.neg"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsNextafterOp(IRDLOperation):
    name = "torch.prims.nextafter"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsPowOp(IRDLOperation):
    name = "torch.prims.pow"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRealOp(IRDLOperation):
    name = "torch.prims.real"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsReciprocalOp(IRDLOperation):
    name = "torch.prims.reciprocal"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRemainderOp(IRDLOperation):
    name = "torch.prims.remainder"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsRoundOp(IRDLOperation):
    name = "torch.prims.round"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsRsqrtOp(IRDLOperation):
    name = "torch.prims.rsqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsShiftLeftOp(IRDLOperation):
    name = "torch.prims.shift_left"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsShiftRightArithmeticOp(IRDLOperation):
    name = "torch.prims.shift_right_arithmetic"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSignOp(IRDLOperation):
    name = "torch.prims.sign"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSignbitOp(IRDLOperation):
    name = "torch.prims.signbit"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinOp(IRDLOperation):
    name = "torch.prims.sin"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSinhOp(IRDLOperation):
    name = "torch.prims.sinh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSphericalBesselJ0Op(IRDLOperation):
    name = "torch.prims.spherical_bessel_j0"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSplitDimOp(IRDLOperation):
    name = "torch.prims.split_dim"
    a = operand_def(BaseAttr(TensorType))
    dim = operand_def(BaseAttr(IntegerType))
    outer_length = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a `,` $dim `,` $outer_length attr-dict `:` type($a) `,` type($dim) `,` type($outer_length) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSqrtOp(IRDLOperation):
    name = "torch.prims.sqrt"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsSubOp(IRDLOperation):
    name = "torch.prims.sub"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsSvdOp(IRDLOperation):
    name = "torch.prims.svd"
    A = operand_def(BaseAttr(TensorType))
    full_matrices = operand_def(
        EqAttrConstraint(attr=IntegerType(1, Signedness.UNSIGNED))
    )
    U = result_def(BaseAttr(TensorType))
    S = result_def(BaseAttr(TensorType))
    Vh = result_def(BaseAttr(TensorType))

    assembly_format = "$A `,` $full_matrices attr-dict `:` type($A) `,` type($full_matrices) `->` type($U) `,` type($S) `,` type($Vh)"


@irdl_op_definition
class Torch_PrimsTanOp(IRDLOperation):
    name = "torch.prims.tan"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTanhOp(IRDLOperation):
    name = "torch.prims.tanh"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsTruncOp(IRDLOperation):
    name = "torch.prims.trunc"
    self = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$self attr-dict `:` type($self) `->` type($result)"


@irdl_op_definition
class Torch_PrimsViewOfDtypeOp(IRDLOperation):
    name = "torch.prims.view_of_dtype"
    a = operand_def(BaseAttr(TensorType))
    dtype = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$a `,` $dtype attr-dict `:` type($a) `,` type($dtype) `->` type($result)"
    )


@irdl_op_definition
class Torch_PrimsViewOfOp(IRDLOperation):
    name = "torch.prims.view_of"
    a = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$a attr-dict `:` type($a) `->` type($result)"


@irdl_op_definition
class Torch_PrimsWhereOp(IRDLOperation):
    name = "torch.prims.where"
    pred = operand_def(BaseAttr(TensorType))
    a = operand_def(BaseAttr(TensorType))
    b = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$pred `,` $a `,` $b attr-dict `:` type($pred) `,` type($a) `,` type($b) `->` type($result)"


@irdl_op_definition
class Torch_PrimsZetaOp(IRDLOperation):
    name = "torch.prims.zeta"
    self = operand_def(BaseAttr(TensorType))
    other = operand_def(BaseAttr(TensorType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = (
        "$self `,` $other attr-dict `:` type($self) `,` type($other) `->` type($result)"
    )


@irdl_op_definition
class Torch_Prims_MakeTokenOp(IRDLOperation):
    name = "torch.prims._make_token"
    result = result_def(BaseAttr(TensorType))

    assembly_format = " attr-dict `:`  `->` type($result)"


@irdl_op_definition
class Torch_Profiler_RecordFunctionExitOp(IRDLOperation):
    name = "torch.profiler._record_function_exit"
    _0 = operand_def(BaseAttr(TensorType))

    assembly_format = "$_0 attr-dict `:` type($_0)"


@irdl_op_definition
class Torch_QuantizedHardswishOp(IRDLOperation):
    name = "torch.quantized.hardswish"
    input = operand_def(BaseAttr(TensorType))
    output_scale = operand_def(BaseAttr(Float64Type))
    output_zero_point = operand_def(BaseAttr(IntegerType))
    result = result_def(BaseAttr(TensorType))

    assembly_format = "$input `,` $output_scale `,` $output_zero_point attr-dict `:` type($input) `,` type($output_scale) `,` type($output_zero_point) `->` type($result)"


TorchDialect = Dialect(
    "torch",
    [
        Torch_AtenAbsOp,
        Torch_AtenAbs_Op,
        Torch_AtenAbsoluteOp,
        Torch_AtenAbsolute_Op,
        Torch_AtenAcosFloatOp,
        Torch_AtenAcosIntOp,
        Torch_AtenAcosOp,
        Torch_AtenAcos_Op,
        Torch_AtenAcoshFloatOp,
        Torch_AtenAcoshIntOp,
        Torch_AtenAcoshOp,
        Torch_AtenAcosh_Op,
        Torch_AtenAdaptiveMaxPool2DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool2DBackwardOp,
        Torch_AtenAdaptiveMaxPool3DBackwardGradInputOp,
        Torch_AtenAdaptiveMaxPool3DBackwardOp,
        Torch_AtenAddFloatIntOp,
        Torch_AtenAddFloatOp,
        Torch_AtenAddIntFloatOp,
        Torch_AtenAddIntOp,
        Torch_AtenAliasCopyOp,
        Torch_AtenAliasOp,
        Torch_AtenAllDimOp,
        Torch_AtenAllOp,
        Torch_AtenAngleFloatOp,
        Torch_AtenAngleIntOp,
        Torch_AtenAngleOp,
        Torch_AtenAnyDimOp,
        Torch_AtenAnyOp,
        Torch_AtenArccosOp,
        Torch_AtenArccos_Op,
        Torch_AtenArccoshOp,
        Torch_AtenArccosh_Op,
        Torch_AtenArcsinOp,
        Torch_AtenArcsin_Op,
        Torch_AtenArcsinhOp,
        Torch_AtenArcsinh_Op,
        Torch_AtenArctan2Op,
        Torch_AtenArctan2_Op,
        Torch_AtenArctanOp,
        Torch_AtenArctan_Op,
        Torch_AtenArctanhOp,
        Torch_AtenArctanh_Op,
        Torch_AtenAsinFloatOp,
        Torch_AtenAsinIntOp,
        Torch_AtenAsinOp,
        Torch_AtenAsin_Op,
        Torch_AtenAsinhFloatOp,
        Torch_AtenAsinhIntOp,
        Torch_AtenAsinhOp,
        Torch_AtenAsinh_Op,
        Torch_AtenAtan2FloatIntOp,
        Torch_AtenAtan2FloatOp,
        Torch_AtenAtan2IntFloatOp,
        Torch_AtenAtan2IntOp,
        Torch_AtenAtan2Op,
        Torch_AtenAtan2_Op,
        Torch_AtenAtanFloatOp,
        Torch_AtenAtanIntOp,
        Torch_AtenAtanOp,
        Torch_AtenAtan_Op,
        Torch_AtenAtanhFloatOp,
        Torch_AtenAtanhIntOp,
        Torch_AtenAtanhOp,
        Torch_AtenAtanh_Op,
        Torch_AtenBitwiseAndTensorOp,
        Torch_AtenBitwiseAnd_TensorOp,
        Torch_AtenBitwiseLeftShiftTensorOp,
        Torch_AtenBitwiseLeftShift_TensorOp,
        Torch_AtenBitwiseNotOp,
        Torch_AtenBitwiseNot_Op,
        Torch_AtenBitwiseOrTensorOp,
        Torch_AtenBitwiseOr_TensorOp,
        Torch_AtenBitwiseRightShiftTensorOp,
        Torch_AtenBitwiseRightShift_TensorOp,
        Torch_AtenBitwiseXorTensorOp,
        Torch_AtenBitwiseXor_TensorOp,
        Torch_AtenBmmOp,
        Torch_AtenBucketizeTensorOp,
        Torch_AtenCeilFloatOp,
        Torch_AtenCeilIntOp,
        Torch_AtenCeilOp,
        Torch_AtenCeil_Op,
        Torch_AtenChannelShuffleOp,
        Torch_AtenCholeskyInverseOp,
        Torch_AtenCholeskyOp,
        Torch_AtenCholeskySolveOp,
        Torch_AtenClampMaxTensorOp,
        Torch_AtenClampMax_TensorOp,
        Torch_AtenClampMinTensorOp,
        Torch_AtenClampMin_TensorOp,
        Torch_AtenComplexOp,
        Torch_AtenConjOp,
        Torch_AtenConjPhysicalOp,
        Torch_AtenConjPhysical_Op,
        Torch_AtenCopyOp,
        Torch_AtenCopy_FloatOp,
        Torch_AtenCopy_IntOp,
        Torch_AtenCopy_Op,
        Torch_AtenCopy_TensorOp,
        Torch_AtenCopysignFloatIntOp,
        Torch_AtenCopysignFloatOp,
        Torch_AtenCopysignIntFloatOp,
        Torch_AtenCopysignIntOp,
        Torch_AtenCopysignTensorOp,
        Torch_AtenCopysign_TensorOp,
        Torch_AtenCosFloatOp,
        Torch_AtenCosIntOp,
        Torch_AtenCosOp,
        Torch_AtenCos_Op,
        Torch_AtenCoshFloatOp,
        Torch_AtenCoshIntOp,
        Torch_AtenCoshOp,
        Torch_AtenCosh_Op,
        Torch_AtenCummaxOp,
        Torch_AtenCumminOp,
        Torch_AtenDeg2RadOp,
        Torch_AtenDeg2Rad_Op,
        Torch_AtenDenseDimOp,
        Torch_AtenDetachOp,
        Torch_AtenDiagEmbedOp,
        Torch_AtenDiagOp,
        Torch_AtenDiagonalCopyOp,
        Torch_AtenDiagonalOp,
        Torch_AtenDiagonalScatterOp,
        Torch_AtenDigammaOp,
        Torch_AtenDigamma_Op,
        Torch_AtenDimOp,
        Torch_AtenDivFloatOp,
        Torch_AtenDivIntOp,
        Torch_AtenDivTensorOp,
        Torch_AtenDiv_TensorOp,
        Torch_AtenDivideTensorOp,
        Torch_AtenDivide_TensorOp,
        Torch_AtenDotOp,
        Torch_AtenEmbeddingDenseBackwardOp,
        Torch_AtenEmbeddingOp,
        Torch_AtenEqBoolOp,
        Torch_AtenEqFloatIntOp,
        Torch_AtenEqFloatOp,
        Torch_AtenEqIntFloatOp,
        Torch_AtenEqIntOp,
        Torch_AtenEqTensorOp,
        Torch_AtenEq_TensorOp,
        Torch_AtenErfFloatOp,
        Torch_AtenErfIntOp,
        Torch_AtenErfOp,
        Torch_AtenErf_Op,
        Torch_AtenErfcFloatOp,
        Torch_AtenErfcIntOp,
        Torch_AtenErfcOp,
        Torch_AtenErfc_Op,
        Torch_AtenErfinvOp,
        Torch_AtenErfinv_Op,
        Torch_AtenExp2Op,
        Torch_AtenExp2_Op,
        Torch_AtenExpFloatOp,
        Torch_AtenExpIntOp,
        Torch_AtenExpOp,
        Torch_AtenExp_Op,
        Torch_AtenExpm1FloatOp,
        Torch_AtenExpm1IntOp,
        Torch_AtenExpm1Op,
        Torch_AtenExpm1_Op,
        Torch_AtenFillTensorOp,
        Torch_AtenFill_TensorOp,
        Torch_AtenFixOp,
        Torch_AtenFix_Op,
        Torch_AtenFloatPower_TensorOp,
        Torch_AtenFloorDivideOp,
        Torch_AtenFloorDivide_TensorOp,
        Torch_AtenFloorFloatOp,
        Torch_AtenFloorIntOp,
        Torch_AtenFloorOp,
        Torch_AtenFloor_Op,
        Torch_AtenFmaxOp,
        Torch_AtenFminOp,
        Torch_AtenFmodFloatIntOp,
        Torch_AtenFmodFloatOp,
        Torch_AtenFmodIntFloatOp,
        Torch_AtenFmodIntOp,
        Torch_AtenFmodTensorOp,
        Torch_AtenFmod_TensorOp,
        Torch_AtenFracOp,
        Torch_AtenFrac_Op,
        Torch_AtenFrexpOp,
        Torch_AtenFrexpTensorOp,
        Torch_AtenGatherOp,
        Torch_AtenGcdIntOp,
        Torch_AtenGcdOp,
        Torch_AtenGcd_Op,
        Torch_AtenGeFloatIntOp,
        Torch_AtenGeFloatOp,
        Torch_AtenGeIntFloatOp,
        Torch_AtenGeIntOp,
        Torch_AtenGeTensorOp,
        Torch_AtenGe_TensorOp,
        Torch_AtenGluBackwardGradInputOp,
        Torch_AtenGluBackwardOp,
        Torch_AtenGluOp,
        Torch_AtenGreaterEqualTensorOp,
        Torch_AtenGreaterEqual_TensorOp,
        Torch_AtenGreaterTensorOp,
        Torch_AtenGreater_TensorOp,
        Torch_AtenGridSampler2DOp,
        Torch_AtenGridSampler3DOp,
        Torch_AtenGtFloatIntOp,
        Torch_AtenGtFloatOp,
        Torch_AtenGtIntFloatOp,
        Torch_AtenGtIntOp,
        Torch_AtenGtTensorOp,
        Torch_AtenGt_TensorOp,
        Torch_AtenHardsigmoidBackwardGradInputOp,
        Torch_AtenHardsigmoidBackwardOp,
        Torch_AtenHardsigmoidOp,
        Torch_AtenHardsigmoid_Op,
        Torch_AtenHardswishBackwardOp,
        Torch_AtenHardswishOp,
        Torch_AtenHardswish_Op,
        Torch_AtenHeavisideOp,
        Torch_AtenHeaviside_Op,
        Torch_AtenHingeEmbeddingLossOp,
        Torch_AtenHuberLossBackwardOp,
        Torch_AtenHuberLossOp,
        Torch_AtenHypotOp,
        Torch_AtenHypot_Op,
        Torch_AtenI0Op,
        Torch_AtenI0_Op,
        Torch_AtenIgammaOp,
        Torch_AtenIgamma_Op,
        Torch_AtenIgammacOp,
        Torch_AtenIgammac_Op,
        Torch_AtenImagOp,
        Torch_AtenIndexCopyOp,
        Torch_AtenIndexCopy_Op,
        Torch_AtenIndexFillIntTensorOp,
        Torch_AtenIndexFill_IntTensorOp,
        Torch_AtenIndexSelectOp,
        Torch_AtenIsCoalescedOp,
        Torch_AtenIsComplexOp,
        Torch_AtenIsContiguousMemoryFormatOp,
        Torch_AtenIsContiguousOp,
        Torch_AtenIsNonOverlappingAndDenseOp,
        Torch_AtenIsSameSizeOp,
        Torch_AtenIsStridesLikeFormatOp,
        Torch_AtenIsfiniteFloatOp,
        Torch_AtenIsfiniteOp,
        Torch_AtenIsinTensorTensorOp,
        Torch_AtenIsinfFloatOp,
        Torch_AtenIsinfOp,
        Torch_AtenIsnanFloatOp,
        Torch_AtenIsnanOp,
        Torch_AtenIsneginfOp,
        Torch_AtenIsposinfOp,
        Torch_AtenKthvalueOp,
        Torch_AtenLcmOp,
        Torch_AtenLcm_Op,
        Torch_AtenLeFloatIntOp,
        Torch_AtenLeFloatOp,
        Torch_AtenLeIntFloatOp,
        Torch_AtenLeIntOp,
        Torch_AtenLeTensorOp,
        Torch_AtenLe_TensorOp,
        Torch_AtenLerpTensorOp,
        Torch_AtenLerp_TensorOp,
        Torch_AtenLessEqualTensorOp,
        Torch_AtenLessEqual_TensorOp,
        Torch_AtenLessTensorOp,
        Torch_AtenLess_TensorOp,
        Torch_AtenLgammaFloatOp,
        Torch_AtenLgammaIntOp,
        Torch_AtenLgammaOp,
        Torch_AtenLgamma_Op,
        Torch_AtenLiftFreshCopyOp,
        Torch_AtenLiftFreshOp,
        Torch_AtenLiftOp,
        Torch_AtenLinalgCholeskyExOp,
        Torch_AtenLinalgCrossOp,
        Torch_AtenLinalgEigOp,
        Torch_AtenLinalgEigvalsOp,
        Torch_AtenLinalgHouseholderProductOp,
        Torch_AtenLinalgInvExOp,
        Torch_AtenLinalgLdlFactorExOp,
        Torch_AtenLinalgLdlSolveOp,
        Torch_AtenLinalgLuFactorExOp,
        Torch_AtenLinalgLuOp,
        Torch_AtenLinalgLuSolveOp,
        Torch_AtenLinalgMatrixExpOp,
        Torch_AtenLinalgSolveTriangularOp,
        Torch_AtenLog10FloatOp,
        Torch_AtenLog10IntOp,
        Torch_AtenLog10Op,
        Torch_AtenLog10_Op,
        Torch_AtenLog1PFloatOp,
        Torch_AtenLog1PIntOp,
        Torch_AtenLog1POp,
        Torch_AtenLog1P_Op,
        Torch_AtenLog2Op,
        Torch_AtenLog2_Op,
        Torch_AtenLogFloatFloatOp,
        Torch_AtenLogFloatIntOp,
        Torch_AtenLogFloatOp,
        Torch_AtenLogIntFloatOp,
        Torch_AtenLogIntIntOp,
        Torch_AtenLogIntOp,
        Torch_AtenLogOp,
        Torch_AtenLogSigmoidBackwardGradInputOp,
        Torch_AtenLogSigmoidBackwardOp,
        Torch_AtenLogSigmoidForwardOp,
        Torch_AtenLog_Op,
        Torch_AtenLogaddexp2Op,
        Torch_AtenLogaddexpOp,
        Torch_AtenLogcumsumexpOp,
        Torch_AtenLogicalAndOp,
        Torch_AtenLogicalAnd_Op,
        Torch_AtenLogicalNotOp,
        Torch_AtenLogicalNot_Op,
        Torch_AtenLogicalOrOp,
        Torch_AtenLogicalOr_Op,
        Torch_AtenLogicalXorOp,
        Torch_AtenLogicalXor_Op,
        Torch_AtenLtFloatIntOp,
        Torch_AtenLtFloatOp,
        Torch_AtenLtIntFloatOp,
        Torch_AtenLtIntOp,
        Torch_AtenLtTensorOp,
        Torch_AtenLt_TensorOp,
        Torch_AtenLuUnpackOp,
        Torch_AtenMarginRankingLossOp,
        Torch_AtenMaskedFillTensorOp,
        Torch_AtenMaskedFill_TensorOp,
        Torch_AtenMaskedScatterOp,
        Torch_AtenMaskedScatter_Op,
        Torch_AtenMaskedSelectOp,
        Torch_AtenMatmulOp,
        Torch_AtenMaxDimMaxOp,
        Torch_AtenMaxDimOp,
        Torch_AtenMaxOp,
        Torch_AtenMaxOtherOp,
        Torch_AtenMaximumOp,
        Torch_AtenMedianDimOp,
        Torch_AtenMedianOp,
        Torch_AtenMinDimMinOp,
        Torch_AtenMinDimOp,
        Torch_AtenMinOp,
        Torch_AtenMinOtherOp,
        Torch_AtenMinimumOp,
        Torch_AtenMishBackwardOp,
        Torch_AtenMishOp,
        Torch_AtenMish_Op,
        Torch_AtenMmOp,
        Torch_AtenModeOp,
        Torch_AtenMseLossBackwardGradInputOp,
        Torch_AtenMseLossBackwardOp,
        Torch_AtenMseLossOp,
        Torch_AtenMulFloatIntOp,
        Torch_AtenMulFloatOp,
        Torch_AtenMulIntFloatOp,
        Torch_AtenMulIntOp,
        Torch_AtenMulTensorOp,
        Torch_AtenMul_TensorOp,
        Torch_AtenMultilabelMarginLossForwardOp,
        Torch_AtenMultiplyTensorOp,
        Torch_AtenMultiply_TensorOp,
        Torch_AtenMvOp,
        Torch_AtenMvlgammaOp,
        Torch_AtenMvlgamma_Op,
        Torch_AtenNanmedianDimOp,
        Torch_AtenNanmedianOp,
        Torch_AtenNarrowCopyOp,
        Torch_AtenNarrowOp,
        Torch_AtenNarrowTensorOp,
        Torch_AtenNeBoolOp,
        Torch_AtenNeFloatIntOp,
        Torch_AtenNeFloatOp,
        Torch_AtenNeIntFloatOp,
        Torch_AtenNeIntOp,
        Torch_AtenNeTensorOp,
        Torch_AtenNe_TensorOp,
        Torch_AtenNegFloatOp,
        Torch_AtenNegIntOp,
        Torch_AtenNegOp,
        Torch_AtenNeg_Op,
        Torch_AtenNegativeOp,
        Torch_AtenNegative_Op,
        Torch_AtenNextafterOp,
        Torch_AtenNextafter_Op,
        Torch_AtenNonzeroOp,
        Torch_AtenNonzeroStaticOp,
        Torch_AtenNotEqualTensorOp,
        Torch_AtenNotEqual_TensorOp,
        Torch_AtenNumelOp,
        Torch_AtenOrmqrOp,
        Torch_AtenPairwiseDistanceOp,
        Torch_AtenPdistOp,
        Torch_AtenPixelShuffleOp,
        Torch_AtenPixelUnshuffleOp,
        Torch_AtenPolarOp,
        Torch_AtenPolygammaOp,
        Torch_AtenPositiveOp,
        Torch_AtenPowFloatIntOp,
        Torch_AtenPowFloatOp,
        Torch_AtenPowIntFloatOp,
        Torch_AtenPowIntOp,
        Torch_AtenPowIntToIntOp,
        Torch_AtenPowTensorTensorOp,
        Torch_AtenPow_TensorOp,
        Torch_AtenPreluOp,
        Torch_AtenRad2DegOp,
        Torch_AtenRad2Deg_Op,
        Torch_AtenRealOp,
        Torch_AtenReciprocalOp,
        Torch_AtenReciprocal_Op,
        Torch_AtenRelu6Op,
        Torch_AtenReluOp,
        Torch_AtenRelu_Op,
        Torch_AtenRemainderFloatIntOp,
        Torch_AtenRemainderFloatOp,
        Torch_AtenRemainderIntFloatOp,
        Torch_AtenRemainderIntOp,
        Torch_AtenRemainderTensorOp,
        Torch_AtenRemainder_TensorOp,
        Torch_AtenRoundDecimalsOp,
        Torch_AtenRoundFloatOp,
        Torch_AtenRoundIntOp,
        Torch_AtenRoundOp,
        Torch_AtenRound_DecimalsOp,
        Torch_AtenRound_Op,
        Torch_AtenRsqrtOp,
        Torch_AtenRsqrt_Op,
        Torch_AtenScatterAddOp,
        Torch_AtenScatterAdd_Op,
        Torch_AtenScatterSrcOp,
        Torch_AtenScatter_SrcOp,
        Torch_AtenSelectIntOp,
        Torch_AtenSelectScatterOp,
        Torch_AtenSeluOp,
        Torch_AtenSelu_Op,
        Torch_AtenSet_Op,
        Torch_AtenSet_SourceTensorOp,
        Torch_AtenSgnOp,
        Torch_AtenSgn_Op,
        Torch_AtenSigmoidBackwardGradInputOp,
        Torch_AtenSigmoidBackwardOp,
        Torch_AtenSigmoidOp,
        Torch_AtenSigmoid_Op,
        Torch_AtenSignOp,
        Torch_AtenSign_Op,
        Torch_AtenSignbitOp,
        Torch_AtenSiluBackwardGradInputOp,
        Torch_AtenSiluBackwardOp,
        Torch_AtenSiluOp,
        Torch_AtenSilu_Op,
        Torch_AtenSinFloatOp,
        Torch_AtenSinIntOp,
        Torch_AtenSinOp,
        Torch_AtenSin_Op,
        Torch_AtenSincOp,
        Torch_AtenSinc_Op,
        Torch_AtenSinhFloatOp,
        Torch_AtenSinhIntOp,
        Torch_AtenSinhOp,
        Torch_AtenSinh_Op,
        Torch_AtenSizeIntOp,
        Torch_AtenSmoothL1LossBackwardGradInputOp,
        Torch_AtenSmoothL1LossBackwardOp,
        Torch_AtenSmoothL1LossOp,
        Torch_AtenSoftMarginLossBackwardGradInputOp,
        Torch_AtenSoftMarginLossBackwardOp,
        Torch_AtenSoftMarginLossOp,
        Torch_AtenSortOp,
        Torch_AtenSortValuesOp,
        Torch_AtenSparseDimOp,
        Torch_AtenSpecialAiryAiOp,
        Torch_AtenSpecialBesselJ0Op,
        Torch_AtenSpecialBesselJ1Op,
        Torch_AtenSpecialBesselY0Op,
        Torch_AtenSpecialBesselY1Op,
        Torch_AtenSpecialChebyshevPolynomialTOp,
        Torch_AtenSpecialChebyshevPolynomialUOp,
        Torch_AtenSpecialChebyshevPolynomialVOp,
        Torch_AtenSpecialChebyshevPolynomialWOp,
        Torch_AtenSpecialEntrOp,
        Torch_AtenSpecialErfcxOp,
        Torch_AtenSpecialHermitePolynomialHOp,
        Torch_AtenSpecialHermitePolynomialHeOp,
        Torch_AtenSpecialI0EOp,
        Torch_AtenSpecialI1EOp,
        Torch_AtenSpecialI1Op,
        Torch_AtenSpecialLaguerrePolynomialLOp,
        Torch_AtenSpecialLegendrePolynomialPOp,
        Torch_AtenSpecialLogNdtrOp,
        Torch_AtenSpecialModifiedBesselI0Op,
        Torch_AtenSpecialModifiedBesselI1Op,
        Torch_AtenSpecialModifiedBesselK0Op,
        Torch_AtenSpecialModifiedBesselK1Op,
        Torch_AtenSpecialNdtrOp,
        Torch_AtenSpecialNdtriOp,
        Torch_AtenSpecialScaledModifiedBesselK0Op,
        Torch_AtenSpecialScaledModifiedBesselK1Op,
        Torch_AtenSpecialShiftedChebyshevPolynomialTOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialUOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialVOp,
        Torch_AtenSpecialShiftedChebyshevPolynomialWOp,
        Torch_AtenSpecialSphericalBesselJ0Op,
        Torch_AtenSpecialXlog1PyOp,
        Torch_AtenSpecialZetaOp,
        Torch_AtenSqrtFloatOp,
        Torch_AtenSqrtIntOp,
        Torch_AtenSqrtOp,
        Torch_AtenSqrt_Op,
        Torch_AtenSquareOp,
        Torch_AtenSquare_Op,
        Torch_AtenSqueezeCopyDimOp,
        Torch_AtenSqueezeCopyOp,
        Torch_AtenSqueezeDimOp,
        Torch_AtenSqueezeOp,
        Torch_AtenStdMeanOp,
        Torch_AtenStdOp,
        Torch_AtenStorageOffsetOp,
        Torch_AtenStrideIntOp,
        Torch_AtenSubFloatIntOp,
        Torch_AtenSubFloatOp,
        Torch_AtenSubIntFloatOp,
        Torch_AtenSubIntOp,
        Torch_AtenSvdOp,
        Torch_AtenSvdUOp,
        Torch_AtenSymNumelOp,
        Torch_AtenSymSizeIntOp,
        Torch_AtenSymStorageOffsetOp,
        Torch_AtenSymStrideIntOp,
        Torch_AtenTCopyOp,
        Torch_AtenTOp,
        Torch_AtenT_Op,
        Torch_AtenTakeOp,
        Torch_AtenTanFloatOp,
        Torch_AtenTanIntOp,
        Torch_AtenTanOp,
        Torch_AtenTan_Op,
        Torch_AtenTanhBackwardGradInputOp,
        Torch_AtenTanhBackwardOp,
        Torch_AtenTanhFloatOp,
        Torch_AtenTanhIntOp,
        Torch_AtenTanhOp,
        Torch_AtenTanh_Op,
        Torch_AtenToPrimOtherOp,
        Torch_AtenTopkOp,
        Torch_AtenTopkValuesOp,
        Torch_AtenTraceOp,
        Torch_AtenTransposeCopyIntOp,
        Torch_AtenTransposeIntOp,
        Torch_AtenTranspose_Op,
        Torch_AtenTriangularSolveOp,
        Torch_AtenTriangularSolveXOp,
        Torch_AtenTrilOp,
        Torch_AtenTril_Op,
        Torch_AtenTriuOp,
        Torch_AtenTriu_Op,
        Torch_AtenTrueDivideTensorOp,
        Torch_AtenTrueDivide_TensorOp,
        Torch_AtenTruncOp,
        Torch_AtenTrunc_Op,
        Torch_AtenUnfoldCopyOp,
        Torch_AtenUnfoldOp,
        Torch_AtenUniqueDimOp,
        Torch_AtenUnsqueezeCopyOp,
        Torch_AtenUnsqueezeOp,
        Torch_AtenUnsqueeze_Op,
        Torch_AtenVarMeanOp,
        Torch_AtenVarOp,
        Torch_AtenVdotOp,
        Torch_AtenViewAsComplexOp,
        Torch_AtenViewAsRealOp,
        Torch_AtenViewCopyDtypeOp,
        Torch_AtenViewDtypeOp,
        Torch_AtenWhereSelfOp,
        Torch_AtenXlogyOuttensorOp,
        Torch_AtenXlogyTensorOp,
        Torch_AtenXlogy_TensorOp,
        Torch_AtenZeroOp,
        Torch_AtenZero_Op,
        Torch_Aten_AdaptiveAvgPool2DBackwardOp,
        Torch_Aten_AdaptiveAvgPool3DBackwardOp,
        Torch_Aten_And_BoolOp,
        Torch_Aten_And_IntOp,
        Torch_Aten_And_TensorOp,
        Torch_Aten_AssertAsyncOp,
        Torch_Aten_CdistBackwardOp,
        Torch_Aten_CholeskySolveHelperOp,
        Torch_Aten_ConvertWeightToInt4PackForCpuOp,
        Torch_Aten_ConvertWeightToInt4PackOp,
        Torch_Aten_EmbeddingBagPerSampleWeightsBackwardOp,
        Torch_Aten_EuclideanDistOp,
        Torch_Aten_FusedMovingAvgObsFqHelperOp,
        Torch_Aten_Iand_TensorOp,
        Torch_Aten_Ilshift_TensorOp,
        Torch_Aten_IntMmOp,
        Torch_Aten_Ior_TensorOp,
        Torch_Aten_Irshift_TensorOp,
        Torch_Aten_Ixor_TensorOp,
        Torch_Aten_LinalgDetOp,
        Torch_Aten_LinalgEigvalsOp,
        Torch_Aten_LinalgSlogdetOp,
        Torch_Aten_LinalgSolveExOp,
        Torch_Aten_LinalgSolveExResultOp,
        Torch_Aten_LogSoftmaxBackwardDataOp,
        Torch_Aten_LogSoftmaxOp,
        Torch_Aten_Lshift_IntOp,
        Torch_Aten_Lshift_TensorOp,
        Torch_Aten_MaskedScaleOp,
        Torch_Aten_NestedViewFromBufferCopyOp,
        Torch_Aten_NestedViewFromBufferOp,
        Torch_Aten_Or_BoolOp,
        Torch_Aten_Or_IntOp,
        Torch_Aten_Or_TensorOp,
        Torch_Aten_PackPaddedSequenceOp,
        Torch_Aten_PdistBackwardOp,
        Torch_Aten_PdistForwardOp,
        Torch_Aten_PreluKernelBackwardOp,
        Torch_Aten_PreluKernelOp,
        Torch_Aten_Rshift_IntOp,
        Torch_Aten_Rshift_TensorOp,
        Torch_Aten_SoftmaxBackwardDataOp,
        Torch_Aten_SoftmaxOp,
        Torch_Aten_Unique2Op,
        Torch_Aten_WeightInt4PackMmForCpuOp,
        Torch_Aten_WeightInt4PackMmOp,
        Torch_Aten_WeightInt8PackMmOp,
        Torch_Aten_WeightNormInterfaceOp,
        Torch_Aten_Xor_BoolOp,
        Torch_Aten_Xor_IntOp,
        Torch_Aten_Xor_TensorOp,
        Torch_InductorAccumulateGrad_Op,
        Torch_InductorResizeStorageBytes_Op,
        Torch_PrimsAbsOp,
        Torch_PrimsAcosOp,
        Torch_PrimsAcoshOp,
        Torch_PrimsAddOp,
        Torch_PrimsAsinOp,
        Torch_PrimsAsinhOp,
        Torch_PrimsAtan2Op,
        Torch_PrimsAtanOp,
        Torch_PrimsAtanhOp,
        Torch_PrimsBesselI0EOp,
        Torch_PrimsBesselI0Op,
        Torch_PrimsBesselI1EOp,
        Torch_PrimsBesselI1Op,
        Torch_PrimsBesselJ0Op,
        Torch_PrimsBesselJ1Op,
        Torch_PrimsBitwiseAndOp,
        Torch_PrimsBitwiseNotOp,
        Torch_PrimsBitwiseOrOp,
        Torch_PrimsBitwiseXorOp,
        Torch_PrimsCbrtOp,
        Torch_PrimsCeilOp,
        Torch_PrimsCollapseOp,
        Torch_PrimsCollapseViewOp,
        Torch_PrimsConjOp,
        Torch_PrimsConjPhysicalOp,
        Torch_PrimsConvertElementTypeOp,
        Torch_PrimsCopyToOp,
        Torch_PrimsCosOp,
        Torch_PrimsCoshOp,
        Torch_PrimsDigammaOp,
        Torch_PrimsDivOp,
        Torch_PrimsEqOp,
        Torch_PrimsErfInvOp,
        Torch_PrimsErfOp,
        Torch_PrimsErfcOp,
        Torch_PrimsErfcxOp,
        Torch_PrimsExp2Op,
        Torch_PrimsExpOp,
        Torch_PrimsExpm1Op,
        Torch_PrimsFloorOp,
        Torch_PrimsFmaxOp,
        Torch_PrimsFminOp,
        Torch_PrimsFmodOp,
        Torch_PrimsFrexpOp,
        Torch_PrimsGcdOp,
        Torch_PrimsGeOp,
        Torch_PrimsGtOp,
        Torch_PrimsHypotOp,
        Torch_PrimsIgammaOp,
        Torch_PrimsIgammacOp,
        Torch_PrimsImagOp,
        Torch_PrimsIsfiniteOp,
        Torch_PrimsLeOp,
        Torch_PrimsLgammaOp,
        Torch_PrimsLog10Op,
        Torch_PrimsLog1POp,
        Torch_PrimsLog2Op,
        Torch_PrimsLogOp,
        Torch_PrimsLtOp,
        Torch_PrimsMaximumOp,
        Torch_PrimsMinimumOp,
        Torch_PrimsMulOp,
        Torch_PrimsNdtriOp,
        Torch_PrimsNeOp,
        Torch_PrimsNegOp,
        Torch_PrimsNextafterOp,
        Torch_PrimsPowOp,
        Torch_PrimsRealOp,
        Torch_PrimsReciprocalOp,
        Torch_PrimsRemainderOp,
        Torch_PrimsRoundOp,
        Torch_PrimsRsqrtOp,
        Torch_PrimsShiftLeftOp,
        Torch_PrimsShiftRightArithmeticOp,
        Torch_PrimsSignOp,
        Torch_PrimsSignbitOp,
        Torch_PrimsSinOp,
        Torch_PrimsSinhOp,
        Torch_PrimsSphericalBesselJ0Op,
        Torch_PrimsSplitDimOp,
        Torch_PrimsSqrtOp,
        Torch_PrimsSubOp,
        Torch_PrimsSvdOp,
        Torch_PrimsTanOp,
        Torch_PrimsTanhOp,
        Torch_PrimsTruncOp,
        Torch_PrimsViewOfDtypeOp,
        Torch_PrimsViewOfOp,
        Torch_PrimsWhereOp,
        Torch_PrimsZetaOp,
        Torch_Prims_MakeTokenOp,
        Torch_Profiler_RecordFunctionExitOp,
        Torch_QuantizedHardswishOp,
    ],
    [],
)
